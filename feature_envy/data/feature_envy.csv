sample_id,severity,method
4256584,major,"    public void send(byte[] data, int length, InetAddress host, int port)
    throws IOException
    {
        _sendPacket.setData(data);
        _sendPacket.setLength(length);
        _sendPacket.setAddress(host);
        _sendPacket.setPort(port);
        _socket_.send(_sendPacket);
    }"
8922371,major,"    public void read(org.apache.thrift.protocol.TProtocol iprot, WMTrigger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_PLAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourcePlanName = iprot.readString();
              struct.setResourcePlanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRIGGER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggerName = iprot.readString();
              struct.setTriggerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRIGGER_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggerExpression = iprot.readString();
              struct.setTriggerExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionExpression = iprot.readString();
              struct.setActionExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_IN_UNMANAGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInUnmanaged = iprot.readBool();
              struct.setIsInUnmanagedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ns = iprot.readString();
              struct.setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }"
8653310,major,"    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {
        List<Row> rows = new ArrayList<>();

        Collection<ClusterNode> nodes;

        SqlSystemViewColumnCondition idCond = conditionForColumn(""NODE_ID"", first, last);

        if (idCond.isEquality()) {
            try {
                UUID nodeId = uuidFromValue(idCond.valueForEquality());

                ClusterNode node = nodeId == null ? null : ctx.discovery().node(nodeId);

                if (node != null)
                    nodes = Collections.singleton(node);
                else
                    nodes = Collections.emptySet();
            }
            catch (Exception e) {
                nodes = Collections.emptySet();
            }
        }
        else
            nodes = F.concat(false, ctx.discovery().allNodes(), ctx.discovery().daemonNodes());

        for (ClusterNode node : nodes) {
            if (node != null) {
                ClusterMetrics metrics = node.metrics();

                rows.add(
                    createRow(
                        ses,
                        node.id(),
                        valueTimestampFromMillis(metrics.getLastUpdateTime()),
                        metrics.getMaximumActiveJobs(),
                        metrics.getCurrentActiveJobs(),
                        metrics.getAverageActiveJobs(),
                        metrics.getMaximumWaitingJobs(),
                        metrics.getCurrentWaitingJobs(),
                        metrics.getAverageWaitingJobs(),
                        metrics.getMaximumRejectedJobs(),
                        metrics.getCurrentRejectedJobs(),
                        metrics.getAverageRejectedJobs(),
                        metrics.getTotalRejectedJobs(),
                        metrics.getMaximumCancelledJobs(),
                        metrics.getCurrentCancelledJobs(),
                        metrics.getAverageCancelledJobs(),
                        metrics.getTotalCancelledJobs(),
                        metrics.getMaximumJobWaitTime(),
                        metrics.getCurrentJobWaitTime(),
                        (long)metrics.getAverageJobWaitTime(),
                        metrics.getMaximumJobExecuteTime(),
                        metrics.getCurrentJobExecuteTime(),
                        (long)metrics.getAverageJobExecuteTime(),
                        metrics.getTotalJobsExecutionTime(),
                        metrics.getTotalExecutedJobs(),
                        metrics.getTotalExecutedTasks(),
                        metrics.getTotalBusyTime(),
                        metrics.getTotalIdleTime(),
                        metrics.getCurrentIdleTime(),
                        metrics.getBusyTimePercentage(),
                        metrics.getIdleTimePercentage(),
                        metrics.getTotalCpus(),
                        metrics.getCurrentCpuLoad(),
                        metrics.getAverageCpuLoad(),
                        metrics.getCurrentGcCpuLoad(),
                        metrics.getHeapMemoryInitialized(),
                        metrics.getHeapMemoryUsed(),
                        metrics.getHeapMemoryCommitted(),
                        metrics.getHeapMemoryMaximum(),
                        metrics.getHeapMemoryTotal(),
                        metrics.getNonHeapMemoryInitialized(),
                        metrics.getNonHeapMemoryUsed(),
                        metrics.getNonHeapMemoryCommitted(),
                        metrics.getNonHeapMemoryMaximum(),
                        metrics.getNonHeapMemoryTotal(),
                        metrics.getUpTime(),
                        valueTimestampFromMillis(metrics.getStartTime()),
                        valueTimestampFromMillis(metrics.getNodeStartTime()),
                        metrics.getLastDataVersion(),
                        metrics.getCurrentThreadCount(),
                        metrics.getMaximumThreadCount(),
                        metrics.getTotalStartedThreadCount(),
                        metrics.getCurrentDaemonThreadCount(),
                        metrics.getSentMessagesCount(),
                        metrics.getSentBytesCount(),
                        metrics.getReceivedMessagesCount(),
                        metrics.getReceivedBytesCount(),
                        metrics.getOutboundMessagesQueueSize()
                    )
                );
            }
        }

        return rows.iterator();
    }"
4734605,major,"  private void finishRestore(final Timer.Context context, Map<String, List<HoodieRollbackStat>> commitToStats,
      List<String> commitsToRollback, final String startRestoreTime, final String restoreToInstant) throws IOException {
    HoodieTable<T> table = HoodieTable.getHoodieTable(
        new HoodieTableMetaClient(jsc.hadoopConfiguration(), config.getBasePath(), true), config, jsc);
    Optional<Long> durationInMs = Optional.empty();
    Long numFilesDeleted = 0L;
    for (Map.Entry<String, List<HoodieRollbackStat>> commitToStat : commitToStats.entrySet()) {
      List<HoodieRollbackStat> stats = commitToStat.getValue();
      numFilesDeleted = stats.stream().mapToLong(stat -> stat.getSuccessDeleteFiles().size())
          .sum();
    }
    if (context != null) {
      durationInMs = Optional.of(metrics.getDurationInMs(context.stop()));
      metrics.updateRollbackMetrics(durationInMs.get(), numFilesDeleted);
    }
    HoodieRestoreMetadata restoreMetadata = AvroUtils
        .convertRestoreMetadata(startRestoreTime, durationInMs, commitsToRollback, commitToStats);
    table.getActiveTimeline().saveAsComplete(
        new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, startRestoreTime),
        AvroUtils.serializeRestoreMetadata(restoreMetadata));
    logger.info(""Commits "" + commitsToRollback + "" rollback is complete. Restored dataset to "" + restoreToInstant);

    if (!table.getActiveTimeline().getCleanerTimeline().empty()) {
      logger.info(""Cleaning up older restore meta files"");
      // Cleanup of older cleaner meta files
      // TODO - make the commit archival generic and archive rollback metadata
      FSUtils.deleteOlderRollbackMetaFiles(fs, table.getMetaClient().getMetaPath(),
          table.getActiveTimeline().getRestoreTimeline().getInstants());
    }
  }"
4514232,major,"    public synchronized void start(BundleContext context) throws Exception
    {
        PermissionAdminImpl pai = null;

        SecureAction action = new SecureAction();

        Permissions permissions = new Permissions(context, action);

        File tmp = context.getDataFile(""security"" + File.separator + ""tmp"");
        if ((tmp == null) || (!tmp.isDirectory() && !tmp.mkdirs()))
        {
            throw new IOException(""Can't create tmp dir."");
        }
        // TODO: log something if we can not clean-up the tmp dir
        File[] old = tmp.listFiles();
        if (old != null)
        {
            for (int i = 0; i < old.length; i++)
            {
                old[i].delete();
            }
        }

        if (""TRUE"".equalsIgnoreCase(getProperty(context,
            SecurityConstants.ENABLE_PERMISSIONADMIN_PROP,
            SecurityConstants.ENABLE_PERMISSIONADMIN_VALUE)))
        {
            File cache = context.getDataFile(""security"" + File.separator
                + ""pa.txt"");
            if ((cache == null) || (!cache.isFile() && !cache.createNewFile()))
            {
                throw new IOException(""Can't create cache file"");
            }
            pai = new PermissionAdminImpl(permissions, new PropertiesCache(
                cache, tmp, action));
        }

        ConditionalPermissionAdminImpl cpai = null;

        if (""TRUE"".equalsIgnoreCase(getProperty(context,
            SecurityConstants.ENABLE_CONDPERMADMIN_PROP,
            SecurityConstants.ENABLE_CONDPERMADMIN_VALUE)))
        {
            File cpaCache = context.getDataFile(""security"" + File.separator
                + ""cpa.txt"");
            if ((cpaCache == null)
                || (!cpaCache.isFile() && !cpaCache.createNewFile()))
            {
                throw new IOException(""Can't create cache file"");
            }

            LocalPermissions localPermissions = new LocalPermissions(
                permissions);

            cpai = new ConditionalPermissionAdminImpl(permissions,
                new Conditions(action), localPermissions, new PropertiesCache(
                    cpaCache, tmp, action), pai);
        }

        if ((pai != null) || (cpai != null))
        {
            String crlList = getProperty(context,
                SecurityConstants.CRL_FILE_PROP,
                SecurityConstants.CRL_FILE_VALUE);
            String storeList = getProperty(context,
                SecurityConstants.KEYSTORE_FILE_PROP,
                SecurityConstants.KEYSTORE_FILE_VALUE);
            String passwdList = getProperty(context,
                SecurityConstants.KEYSTORE_PASS_PROP,
                SecurityConstants.KEYSTORE_PASS_VALUE);
            String typeList = getProperty(context,
                SecurityConstants.KEYSTORE_TYPE_PROP,
                SecurityConstants.KEYSTORE_TYPE_VALUE);
            String osgi_keystores = getProperty(context,
                Constants.FRAMEWORK_TRUST_REPOSITORIES, null);
            if (osgi_keystores != null)
            {
                StringTokenizer tok = new StringTokenizer(osgi_keystores,
                    File.pathSeparator);

                if (storeList.length() == 0)
                {
                    storeList += ""file:"" + tok.nextToken();
                    passwdList += "" "";
                    typeList += ""JKS"";
                }
                while (tok.hasMoreTokens())
                {
                    storeList += ""|file:"" + tok.nextToken();
                    passwdList += ""| "";
                    typeList += ""|JKS"";
                }
            }

            StringTokenizer storeTok = new StringTokenizer(storeList, ""|"");
            StringTokenizer passwdTok = new StringTokenizer(passwdList, ""|"");
            StringTokenizer typeTok = new StringTokenizer(typeList, ""|"");

            if ((storeTok.countTokens() != typeTok.countTokens())
                || (passwdTok.countTokens() != storeTok.countTokens()))
            {
                throw new BundleException(
                    ""Each CACerts keystore must have one type and one passwd entry and vice versa."");
            }

            SecurityProvider provider = new SecurityProviderImpl(crlList,
                typeList, passwdList, storeList, pai, cpai, action, ((Felix) context.getBundle(0)).getLogger());

            ((Felix) context.getBundle(0)).setSecurityProvider(provider);
        }

        if (pai != null)
        {
            context.registerService(PermissionAdmin.class.getName(), pai, null);
        }

        if (cpai != null)
        {
            context.registerService(ConditionalPermissionAdmin.class.getName(),
                cpai, null);
        }
    }"
4402431,major,"    public static JsonWebKey fromRSAPrivateKey(RSAPrivateKey pk, String algo, String kid) {
        JsonWebKey jwk = prepareRSAJwk(pk.getModulus(), algo, kid);
        String encodedPrivateExponent = Base64UrlUtility.encode(pk.getPrivateExponent().toByteArray());
        jwk.setProperty(JsonWebKey.RSA_PRIVATE_EXP, encodedPrivateExponent);
        if (pk instanceof RSAPrivateCrtKey) {
            RSAPrivateCrtKey pkCrt = (RSAPrivateCrtKey)pk;
            jwk.setProperty(JsonWebKey.RSA_PUBLIC_EXP,
                            Base64UrlUtility.encode(pkCrt.getPublicExponent().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_FACTOR,
                            Base64UrlUtility.encode(pkCrt.getPrimeP().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_FACTOR,
                            Base64UrlUtility.encode(pkCrt.getPrimeQ().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_CRT,
                            Base64UrlUtility.encode(pkCrt.getPrimeExponentP().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_CRT,
                            Base64UrlUtility.encode(pkCrt.getPrimeExponentQ().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_FIRST_CRT_COEFFICIENT,
                            Base64UrlUtility.encode(pkCrt.getCrtCoefficient().toByteArray()));
        }
        // ""oth"" can be populated too if needed
        return jwk;
    }"
6905182,major,"  private TtmlRegion parseRegionAttributes(
      XmlPullParser xmlParser, CellResolution cellResolution, TtsExtent ttsExtent) {
    String regionId = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_ID);
    if (regionId == null) {
      return null;
    }

    float position;
    float line;

    String regionOrigin = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_TTS_ORIGIN);
    if (regionOrigin != null) {
      Matcher originPercentageMatcher = PERCENTAGE_COORDINATES.matcher(regionOrigin);
      Matcher originPixelMatcher = PIXEL_COORDINATES.matcher(regionOrigin);
      if (originPercentageMatcher.matches()) {
        try {
          position = Float.parseFloat(originPercentageMatcher.group(1)) / 100f;
          line = Float.parseFloat(originPercentageMatcher.group(2)) / 100f;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed origin: "" + regionOrigin);
          return null;
        }
      } else if (originPixelMatcher.matches()) {
        if (ttsExtent == null) {
          Log.w(TAG, ""Ignoring region with missing tts:extent: "" + regionOrigin);
          return null;
        }
        try {
          int width = Integer.parseInt(originPixelMatcher.group(1));
          int height = Integer.parseInt(originPixelMatcher.group(2));
          // Convert pixel values to fractions.
          position = width / (float) ttsExtent.width;
          line = height / (float) ttsExtent.height;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed origin: "" + regionOrigin);
          return null;
        }
      } else {
        Log.w(TAG, ""Ignoring region with unsupported origin: "" + regionOrigin);
        return null;
      }
    } else {
      Log.w(TAG, ""Ignoring region without an origin"");
      return null;
      // TODO: Should default to top left as below in this case, but need to fix
      // https://github.com/google/ExoPlayer/issues/2953 first.
      // Origin is omitted. Default to top left.
      // position = 0;
      // line = 0;
    }

    float width;
    float height;
    String regionExtent = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_TTS_EXTENT);
    if (regionExtent != null) {
      Matcher extentPercentageMatcher = PERCENTAGE_COORDINATES.matcher(regionExtent);
      Matcher extentPixelMatcher = PIXEL_COORDINATES.matcher(regionExtent);
      if (extentPercentageMatcher.matches()) {
        try {
          width = Float.parseFloat(extentPercentageMatcher.group(1)) / 100f;
          height = Float.parseFloat(extentPercentageMatcher.group(2)) / 100f;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed extent: "" + regionOrigin);
          return null;
        }
      } else if (extentPixelMatcher.matches()) {
        if (ttsExtent == null) {
          Log.w(TAG, ""Ignoring region with missing tts:extent: "" + regionOrigin);
          return null;
        }
        try {
          int extentWidth = Integer.parseInt(extentPixelMatcher.group(1));
          int extentHeight = Integer.parseInt(extentPixelMatcher.group(2));
          // Convert pixel values to fractions.
          width = extentWidth / (float) ttsExtent.width;
          height = extentHeight / (float) ttsExtent.height;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed extent: "" + regionOrigin);
          return null;
        }
      } else {
        Log.w(TAG, ""Ignoring region with unsupported extent: "" + regionOrigin);
        return null;
      }
    } else {
      Log.w(TAG, ""Ignoring region without an extent"");
      return null;
      // TODO: Should default to extent of parent as below in this case, but need to fix
      // https://github.com/google/ExoPlayer/issues/2953 first.
      // Extent is omitted. Default to extent of parent.
      // width = 1;
      // height = 1;
    }

    @Cue.AnchorType int lineAnchor = Cue.ANCHOR_TYPE_START;
    String displayAlign = XmlPullParserUtil.getAttributeValue(xmlParser,
        TtmlNode.ATTR_TTS_DISPLAY_ALIGN);
    if (displayAlign != null) {
      switch (Util.toLowerInvariant(displayAlign)) {
        case ""center"":
          lineAnchor = Cue.ANCHOR_TYPE_MIDDLE;
          line += height / 2;
          break;
        case ""after"":
          lineAnchor = Cue.ANCHOR_TYPE_END;
          line += height;
          break;
        default:
          // Default ""before"" case. Do nothing.
          break;
      }
    }

    float regionTextHeight = 1.0f / cellResolution.rows;
    return new TtmlRegion(
        regionId,
        position,
        line,
        /* lineType= */ Cue.LINE_TYPE_FRACTION,
        lineAnchor,
        width,
        /* textSizeType= */ Cue.TEXT_SIZE_TYPE_FRACTIONAL_IGNORE_PADDING,
        /* textSize= */ regionTextHeight);
  }"
9469461,major,"  private XMLEvent expectTag(String expected, boolean allowEnd)
      throws IOException {
    XMLEvent ev = null;
    while (true) {
      try {
        ev = events.nextEvent();
      } catch (XMLStreamException e) {
        throw new IOException(""Expecting "" + expected +
            "", but got XMLStreamException"", e);
      }
      switch (ev.getEventType()) {
      case XMLEvent.ATTRIBUTE:
        throw new IOException(""Got unexpected attribute: "" + ev);
      case XMLEvent.CHARACTERS:
        if (!ev.asCharacters().isWhiteSpace()) {
          throw new IOException(""Got unxpected characters while "" +
              ""looking for "" + expected + "": "" +
              ev.asCharacters().getData());
        }
        break;
      case XMLEvent.END_ELEMENT:
        if (!allowEnd) {
          throw new IOException(""Got unexpected end event "" +
              ""while looking for "" + expected);
        }
        return ev;
      case XMLEvent.START_ELEMENT:
        if (!expected.startsWith(""["")) {
          if (!ev.asStartElement().getName().getLocalPart().
                equals(expected)) {
            throw new IOException(""Failed to find <"" + expected + "">; "" +
                ""got "" + ev.asStartElement().getName().getLocalPart() +
                "" instead."");
          }
        }
        return ev;
      default:
        // Ignore other event types like comment, etc.
        if (LOG.isTraceEnabled()) {
          LOG.trace(""Skipping XMLEvent of type "" +
              ev.getEventType() + ""("" +  ev + "")"");
        }
        break;
      }
    }
  }"
3942097,major,"    private static void weaveDir(File dir, String consumerHeaderKey, String consumerHeaderValue, String bundleClassPath) throws Exception {
        Set<WeavingData> wd = ConsumerHeaderProcessor.processHeader(consumerHeaderKey, consumerHeaderValue);

        URLClassLoader cl = new URLClassLoader(new URL [] {dir.toURI().toURL()}, Main.class.getClassLoader());
        String dirName = dir.getAbsolutePath();

        DirTree dt = new DirTree(dir);
        for (File f : dt.getFiles()) {
            if (!f.getName().endsWith("".class""))
                continue;

            String className = f.getAbsolutePath().substring(dirName.length());
            if (className.startsWith(File.separator))
                className = className.substring(1);
            className = className.substring(0, className.length() - "".class"".length());
            className = className.replace(File.separator, ""."");

            InputStream is = new FileInputStream(f);
            byte[] b;
            try {
                ClassReader cr = new ClassReader(is);
                ClassWriter cw = new StaticToolClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES, cl);
                TCCLSetterVisitor cv = new TCCLSetterVisitor(cw, className, wd);
                cr.accept(cv, ClassReader.SKIP_FRAMES);
                if (cv.isWoven()) {
                    b = cw.toByteArray();
                } else {
                    // if not woven, store the original bytes
                    b = Streams.suck(new FileInputStream(f));
                }
            } finally {
                is.close();
            }

            OutputStream os = new FileOutputStream(f);
            try {
                os.write(b);
            } finally {
                os.close();
            }
        }

        if (bundleClassPath != null) {
            for (String entry : bundleClassPath.split("","")) {
                File jarFile = new File(dir, entry.trim());
                if (jarFile.isFile()) {
                    weaveBCPJar(jarFile, consumerHeaderKey, consumerHeaderValue);
                }
            }
        }
    }"
7957449,major,"        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_0 = input.LA(1);

                         
                        int index60_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA60_0==RULE_ID) ) {s = 1;}

                        else if ( (LA60_0==14) ) {s = 2;}

                        else if ( (LA60_0==39) && (synpred33_InternalXbaseWithAnnotations())) {s = 3;}

                        else if ( ((LA60_0>=RULE_STRING && LA60_0<=RULE_DECIMAL)||(LA60_0>=18 && LA60_0<=19)||LA60_0==26||(LA60_0>=42 && LA60_0<=43)||LA60_0==48||LA60_0==55||LA60_0==59||LA60_0==61||(LA60_0>=65 && LA60_0<=67)||(LA60_0>=70 && LA60_0<=82)||LA60_0==84) ) {s = 4;}

                         
                        input.seek(index60_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_1 = input.LA(1);

                         
                        int index60_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalXbaseWithAnnotations()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index60_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalXbaseWithAnnotations()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }"
5939954,major,"    public JsonGenerator(LogIterator iter) {
	servers = new HashSet<Integer>();

	Pattern stateChangeP = Pattern.compile(""- (LOOKING|FOLLOWING|LEADING)"");
	Pattern newElectionP = Pattern.compile(""New election. My id =  (\\d+), Proposed zxid = (\\d+)"");
	Pattern receivedProposalP = Pattern.compile(""Notification: (\\d+) \\(n.leader\\), (\\d+) \\(n.zxid\\), (\\d+) \\(n.round\\), .+ \\(n.state\\), (\\d+) \\(n.sid\\), .+ \\(my state\\)"");
	Pattern exceptionP = Pattern.compile(""xception"");
	
	root = new JSONObject();
	Matcher m = null;
	JSONArray events = new JSONArray();
	root.put(""events"", events);
	
	long starttime = Long.MAX_VALUE;
	long endtime = 0;

	int leader = 0;
	long curEpoch = 0;
	boolean newEpoch = false;

	while (iter.hasNext()) {
	    LogEntry ent = iter.next();
	    
	    if (ent.getTimestamp() < starttime) {
		starttime = ent.getTimestamp();
	    }
	    if (ent.getTimestamp() > endtime) {
		endtime = ent.getTimestamp();
	    }
	    
	    if (ent.getType() == LogEntry.Type.TXN) {
		events.add(txnEntry((TransactionEntry)ent));
	    } else {
		Log4JEntry e = (Log4JEntry)ent;
		servers.add(e.getNode());
		
		if ((m = stateChangeP.matcher(e.getEntry())).find()) {
		    JSONObject stateChange = new JSONObject();
		    stateChange.put(""type"", ""stateChange"");
		    stateChange.put(""time"", e.getTimestamp());
		    stateChange.put(""server"", e.getNode());
		    stateChange.put(""state"", m.group(1));
		    events.add(stateChange);
		    
		    if (m.group(1).equals(""LEADING"")) {
			leader = e.getNode();
		    }
		} else if ((m = newElectionP.matcher(e.getEntry())).find()) {
		    Iterator<Integer> iterator = servers.iterator();
		    long zxid = Long.valueOf(m.group(2));
		    int count = (int)zxid;// & 0xFFFFFFFFL;
		    int epoch = (int)Long.rotateRight(zxid, 32);// >> 32;
		    
		    if (leader != 0 && epoch > curEpoch) {
			JSONObject stateChange = new JSONObject();
			stateChange.put(""type"", ""stateChange"");
			stateChange.put(""time"", e.getTimestamp());
			stateChange.put(""server"", leader);
			stateChange.put(""state"", ""INIT"");
			events.add(stateChange);
			leader = 0;
		    }
		    
		    while (iterator.hasNext()) {
			int dst = iterator.next();
			if (dst != e.getNode()) {
			    JSONObject msg = new JSONObject();
			    msg.put(""type"", ""postmessage"");
			    msg.put(""src"", e.getNode());
			    msg.put(""dst"", dst);
			    msg.put(""time"", e.getTimestamp());
			    msg.put(""zxid"", m.group(2));
			    msg.put(""count"", count);
			    msg.put(""epoch"", epoch);
			    
			    events.add(msg);
			}
		    }
		} else if ((m = receivedProposalP.matcher(e.getEntry())).find()) {
		    // Pattern.compile(""Notification: \\d+, (\\d+), (\\d+), \\d+, [^,]*, [^,]*, (\\d+)"");//, LOOKING, LOOKING, 2
		    int src = Integer.valueOf(m.group(4));
		    long zxid = Long.valueOf(m.group(2));
		    int dst = e.getNode();
		    long epoch2 = Long.valueOf(m.group(3));
		    
		    int count = (int)zxid;// & 0xFFFFFFFFL;
		    int epoch = (int)Long.rotateRight(zxid, 32);// >> 32;
		    
		    if (leader != 0 && epoch > curEpoch) {
			JSONObject stateChange = new JSONObject();
			stateChange.put(""type"", ""stateChange"");
			stateChange.put(""time"", e.getTimestamp());
			stateChange.put(""server"", leader);
			stateChange.put(""state"", ""INIT"");
			events.add(stateChange);
			leader = 0;
		    }
		    
		    if (src != dst) {
			JSONObject msg = new JSONObject();
			msg.put(""type"", ""delivermessage"");
			msg.put(""src"", src);
			msg.put(""dst"", dst);
			msg.put(""time"", e.getTimestamp());
			msg.put(""zxid"", zxid);
			msg.put(""epoch"", epoch);
			msg.put(""count"", count);
			msg.put(""epoch2"", epoch2);
			
			events.add(msg);
		    }
		} else if ((m = exceptionP.matcher(e.getEntry())).find()) {
		    JSONObject ex = new JSONObject();
		    ex.put(""type"", ""exception"");
		    ex.put(""server"", e.getNode());
		    ex.put(""time"", e.getTimestamp());
		    ex.put(""text"", e.getEntry());
		    events.add(ex);
		} 
	    }
	    JSONObject ex = new JSONObject();
	    ex.put(""type"", ""text"");
	    ex.put(""time"", ent.getTimestamp());
	    String txt = ent.toString();
	    ex.put(""text"", txt);
	    events.add(ex);
	}
	//	System.out.println(""pending messages: ""+pendingMessages.size());
	root.put(""starttime"", starttime);
	root.put(""endtime"", endtime);

	JSONArray serversarray = new JSONArray();
	root.put(""servers"", serversarray);
	
	Iterator<Integer> iterator = servers.iterator();
	while (iterator.hasNext()) {
	    serversarray.add(iterator.next());
	}
    }"
6299837,major,"    private static boolean resolveGenericRef(GenericRef ref, Class<?> clazz, Type type)
    {
        if (type instanceof Class)
        {
            if (type == ref.ifaceClass)
            {
                // is this a straight ref or a TypeVariable?
                // debug(""Found ref (as class): %s"",toShortName(type));
                ref.setGenericFromType(type,0);
                return true;
            }
            else
            {
                // Keep digging
                return resolveGenericRef(ref,type);
            }
        }

        if (type instanceof ParameterizedType)
        {
            ParameterizedType ptype = (ParameterizedType)type;
            Type rawType = ptype.getRawType();
            if (rawType == ref.ifaceClass)
            {
                // debug(""Found ref on [%s] as ParameterizedType [%s]"",toShortName(clazz),toShortName(ptype));
                // Always get the raw type parameter, let unwrap() solve for what it is
                ref.setGenericFromType(ptype.getActualTypeArguments()[0],0);
                return true;
            }
            else
            {
                // Keep digging
                return resolveGenericRef(ref,rawType);
            }
        }
        return false;
    }"
5602164,major,"    @Test
    public void writeRead() throws IOException {
        try (XSSFWorkbook workbook = XSSFTestDataSamples.openSampleWorkbook(""WithVariousData.xlsx"")) {
            XSSFSheet sheet1 = workbook.getSheetAt(0);
            XSSFSheet sheet2 = workbook.getSheetAt(1);

            assertTrue(sheet1.hasComments());
            assertFalse(sheet2.hasComments());

            // Change on comment on sheet 1, and add another into
            //  sheet 2
            Row r5 = sheet1.getRow(4);
            Comment cc5 = r5.getCell(2).getCellComment();
            cc5.setAuthor(""Apache POI"");
            cc5.setString(new XSSFRichTextString(""Hello!""));

            Row r2s2 = sheet2.createRow(2);
            Cell c1r2s2 = r2s2.createCell(1);
            assertNull(c1r2s2.getCellComment());

            Drawing<?> dg = sheet2.createDrawingPatriarch();
            Comment cc2 = dg.createCellComment(new XSSFClientAnchor());
            cc2.setAuthor(""Also POI"");
            cc2.setString(new XSSFRichTextString(""A new comment""));
            c1r2s2.setCellComment(cc2);

            // Save, and re-load the file
            try (XSSFWorkbook workbookBack = XSSFTestDataSamples.writeOutAndReadBack(workbook)) {
                // Check we still have comments where we should do
                sheet1 = workbookBack.getSheetAt(0);
                sheet2 = workbookBack.getSheetAt(1);
                assertNotNull(sheet1.getRow(4).getCell(2).getCellComment());
                assertNotNull(sheet1.getRow(6).getCell(2).getCellComment());
                assertNotNull(sheet2.getRow(2).getCell(1).getCellComment());

                // And check they still have the contents they should do
                assertEquals(""Apache POI"",
                        sheet1.getRow(4).getCell(2).getCellComment().getAuthor());
                assertEquals(""Nick Burch"",
                        sheet1.getRow(6).getCell(2).getCellComment().getAuthor());
                assertEquals(""Also POI"",
                        sheet2.getRow(2).getCell(1).getCellComment().getAuthor());

                assertEquals(""Hello!"",
                        sheet1.getRow(4).getCell(2).getCellComment().getString().getString());
            }
        }
    }"
5456950,major,"    public static boolean isBelowLoadLevel(SystemResourceUsage usage, float thresholdPercentage) {
        return (usage.bandwidthOut.percentUsage() < thresholdPercentage
                && usage.bandwidthIn.percentUsage() < thresholdPercentage
                && usage.cpu.percentUsage() < thresholdPercentage
                && usage.directMemory.percentUsage() < thresholdPercentage);
    }"
7769131,major,"  public void validateTwoSegments(final IndexableAdapter adapter1, final IndexableAdapter adapter2)
  {
    if (adapter1.getNumRows() != adapter2.getNumRows()) {
      throw new SegmentValidationException(
          ""Row count mismatch. Expected [%d] found [%d]"",
          adapter1.getNumRows(),
          adapter2.getNumRows()
      );
    }
    {
      final Set<String> dimNames1 = Sets.newHashSet(adapter1.getDimensionNames());
      final Set<String> dimNames2 = Sets.newHashSet(adapter2.getDimensionNames());
      if (!dimNames1.equals(dimNames2)) {
        throw new SegmentValidationException(
            ""Dimension names differ. Expected [%s] found [%s]"",
            dimNames1,
            dimNames2
        );
      }
      final Set<String> metNames1 = Sets.newHashSet(adapter1.getMetricNames());
      final Set<String> metNames2 = Sets.newHashSet(adapter2.getMetricNames());
      if (!metNames1.equals(metNames2)) {
        throw new SegmentValidationException(""Metric names differ. Expected [%s] found [%s]"", metNames1, metNames2);
      }
    }
    final RowIterator it1 = adapter1.getRows();
    final RowIterator it2 = adapter2.getRows();
    long row = 0L;
    while (it1.moveToNext()) {
      if (!it2.moveToNext()) {
        throw new SegmentValidationException(""Unexpected end of second adapter"");
      }
      final RowPointer rp1 = it1.getPointer();
      final RowPointer rp2 = it2.getPointer();
      ++row;
      if (rp1.getRowNum() != rp2.getRowNum()) {
        throw new SegmentValidationException(""Row number mismatch: [%d] vs [%d]"", rp1.getRowNum(), rp2.getRowNum());
      }
      try {
        validateRowValues(rp1, adapter1, rp2, adapter2);
      }
      catch (SegmentValidationException ex) {
        throw new SegmentValidationException(ex, ""Validation failure on row %d: [%s] vs [%s]"", row, rp1, rp2);
      }
    }
    if (it2.moveToNext()) {
      throw new SegmentValidationException(""Unexpected end of first adapter"");
    }
    if (row != adapter1.getNumRows()) {
      throw new SegmentValidationException(
          ""Actual Row count mismatch. Expected [%d] found [%d]"",
          row,
          adapter1.getNumRows()
      );
    }
  }"
5250124,major,"    public void reloadExpectedTimeAndConfig(SLACalcStatus slaCalc) throws JPAExecutorException {
        SLARegistrationBean regBean = SLARegistrationQueryExecutor.getInstance().get(
                SLARegQuery.GET_SLA_EXPECTED_VALUE_CONFIG, slaCalc.getId());

        if (regBean.getExpectedDuration() > 0) {
            slaCalc.getSLARegistrationBean().setExpectedDuration(regBean.getExpectedDuration());
        }
        if (regBean.getExpectedEnd() != null) {
            slaCalc.getSLARegistrationBean().setExpectedEnd(regBean.getExpectedEnd());
        }
        if (regBean.getExpectedStart() != null) {
            slaCalc.getSLARegistrationBean().setExpectedStart(regBean.getExpectedStart());
        }
        if (regBean.getSLAConfigMap().containsKey(OozieClient.SLA_DISABLE_ALERT)) {
            slaCalc.getSLARegistrationBean().addToSLAConfigMap(OozieClient.SLA_DISABLE_ALERT,
                    regBean.getSLAConfigMap().get(OozieClient.SLA_DISABLE_ALERT));
        }
        if (regBean.getNominalTime() != null) {
            slaCalc.getSLARegistrationBean().setNominalTime(regBean.getNominalTime());
        }
    }"
5310114,major,"    protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,
        JDBCStore store, Object[] params, Map updateParams) {
        SQLBuffer sql = new SQLBuffer(this);
        if (updateParams == null) {
          if (requiresTargetForDelete) {
            sql.append(""DELETE "");
            SQLBuffer deleteTargets = getDeleteTargets(sel);
            sql.append(deleteTargets);
            sql.append("" FROM "");
          } else {
            sql.append(""DELETE FROM "");
          }
        }
        else
            sql.append(""UPDATE "");
        sel.addJoinClassConditions();

        // if there is only a single table in the select, then we can
        // just issue a single DELETE FROM TABLE WHERE <conditions>
        // statement; otherwise, since SQL doesn't allow deleting
        // from one of a multi-table select, we need to issue a subselect
        // like DELETE FROM TABLE WHERE EXISTS
        // (SELECT 1 FROM TABLE t0 WHERE t0.ID = TABLE.ID); also, some
        // databases do not allow aliases in delete statements, which
        // also causes us to use a subselect
        Collection<String> selectedTables = getSelectTableAliases(sel);
        if (selectedTables.size() == 1 && supportsSubselect
            && allowsAliasInBulkClause) {
            SQLBuffer from;
            if (sel.getFromSelect() != null)
                from = getFromSelect(sel, false);
            else
                from = getFrom(sel, false);

            sql.append(from);
            appendUpdates(sel, store, sql, params, updateParams,
                allowsAliasInBulkClause);

            SQLBuffer where = sel.getWhere();
            if (where != null && !where.isEmpty()) {
                sql.append("" WHERE "");
                sql.append(where);
            }
            return sql;
        }

        Table table = mapping.getTable();
        String tableName = getFullName(table, false);

        // only use a  subselect if the where is not empty; otherwise
        // an unqualified delete or update will work
        if (sel.getWhere() == null || sel.getWhere().isEmpty()) {
            sql.append(tableName);
            appendUpdates(sel, store, sql, params, updateParams, false);
            return sql;
        }

        // we need to use a subselect if we are to bulk delete where
        // the select includes multiple tables; if the database
        // doesn't support it, then we need to signal this by returning null
        if (!supportsSubselect || !supportsCorrelatedSubselect)
            return null;

        Column[] pks = mapping.getPrimaryKeyColumns();
        sel.clearSelects();
        sel.setDistinct(true);

        // if we have only a single PK, we can use a non-correlated
        // subquery (using an IN statement), which is much faster than
        // a correlated subquery (since a correlated subquery needs
        // to be executed once for each row in the table)
        if (pks.length == 1) {
            sel.select(pks[0]);
            sql.append(tableName);
            appendUpdates(sel, store, sql, params, updateParams, false);
            sql.append("" WHERE "").
                append(pks[0]).append("" IN ("").
                append(sel.toSelect(false, null)).append("")"");
        } else {
            sel.clearSelects();
            sel.setDistinct(false);

            // since the select is using a correlated subquery, we
            // only need to select a bogus virtual column
            sel.select(""1"", null);

            // add in the joins to the table
            Column[] cols = table.getPrimaryKey().getColumns();
            SQLBuffer buf = new SQLBuffer(this);
            buf.append(""("");
            for (int i = 0; i < cols.length; i++) {
                if (i > 0)
                    buf.append("" AND "");

                // add in ""t0.PK = MYTABLE.PK""
                buf.append(sel.getColumnAlias(cols[i])).append("" = "").
                    append(table).append(catalogSeparator).append(cols[i]);
            }
            buf.append("")"");
            sel.where(buf, null);

            sql.append(tableName);
            appendUpdates(sel, store, sql, params, updateParams, false);
            sql.append("" WHERE EXISTS ("").
                append(sel.toSelect(false, null)).append("")"");
        }
        return sql;
    }"
4784081,major,"      public void write(org.apache.thrift.protocol.TProtocol oprot, handle_hms_notification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }"
7777067,major,"  @VisibleForTesting
  @Nonnull
  static Supplier<Object> supplierFromDimensionSelector(final DimensionSelector selector)
  {
    Preconditions.checkNotNull(selector, ""selector"");
    return () -> {
      final IndexedInts row = selector.getRow();

      if (row.size() == 1) {
        return selector.lookupName(row.get(0));
      } else {
        // Can't handle non-singly-valued rows in expressions.
        // Treat them as nulls until we think of something better to do.
        return null;
      }
    };
  }"
5950764,major,"    private void processSingleRecord(final Record record) {

        String data = null;
        final ObjectMapper mapper = new ObjectMapper();
        try {
            final ByteBuffer buffer = record.getData();
            data = new String(buffer.array(), ""UTF-8"");
            final RekognitionOutput output = mapper.readValue(data, RekognitionOutput.class);

            // Get the fragment number from Rekognition Output
            final String fragmentNumber = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getFragmentNumber();
            final Double frameOffsetInSeconds = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getFrameOffsetInSeconds();
            final Double serverTimestamp = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getServerTimestamp();
            final Double producerTimestamp = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getProducerTimestamp();
            final double detectedTime = output.getInputInformation().getKinesisVideo().getServerTimestamp()
                    + output.getInputInformation().getKinesisVideo().getFrameOffsetInSeconds() * 1000L;
            final RekognizedOutput rekognizedOutput = RekognizedOutput.builder()
                    .fragmentNumber(fragmentNumber)
                    .serverTimestamp(serverTimestamp)
                    .producerTimestamp(producerTimestamp)
                    .frameOffsetInSeconds(frameOffsetInSeconds)
                    .detectedTime(detectedTime)
                    .build();

            // Add face search response
            final List<FaceSearchResponse> responses = output.getFaceSearchResponse();

            responses.forEach(response -> {
                final DetectedFace detectedFace = response.getDetectedFace();
                final List<MatchedFace> matchedFaces = response.getMatchedFaces();
                final RekognizedOutput.FaceSearchOutput faceSearchOutput = RekognizedOutput.FaceSearchOutput.builder()
                        .detectedFace(detectedFace)
                        .matchedFaceList(matchedFaces)
                        .build();
                rekognizedOutput.addFaceSearchOutput(faceSearchOutput);
            });

            // Add it to the index
            log.info(""Found Rekognized results for fragment number : {}"", fragmentNumber);
            rekognizedFragmentsIndex.add(fragmentNumber, producerTimestamp.longValue(),
                    serverTimestamp.longValue(), rekognizedOutput);

        } catch (final NumberFormatException e) {
            log.warn(""Record does not match sample record format. Ignoring record with data : {}"", data, e);
        } catch (final Exception e) {
            log.error(""Unable to process record !"", e);
        }
    }"
6863919,minor,"  @Override
  public final Description matchClass(ClassTree classTree, VisitorState state) {
    if (!HAS_CONSTRUCTORS_WITH_INJECT.matches(classTree, state)) {
      return Description.NO_MATCH;
    }

    List<MethodTree> ctors = ASTHelpers.getConstructors(classTree);
    List<MethodTree> ctorsWithInject =
        ctors.stream()
            .filter(c -> hasInjectAnnotation().matches(c, state))
            .collect(toImmutableList());

    if (ctorsWithInject.size() != 1) {
      // Injection frameworks don't support multiple @Inject ctors.
      // There is already an ERROR check for it.
      // http://errorprone.info/bugpattern/MoreThanOneInjectableConstructor
      return Description.NO_MATCH;
    }

    // collect the assignments in ctor
    Set<Symbol> variablesAssigned = new HashSet<>();
    new TreeScanner<Void, Void>() {
      @Override
      public Void visitAssignment(AssignmentTree tree, Void unused) {
        Symbol symbol = ASTHelpers.getSymbol(tree.getVariable());
        // check if it is instance field.
        if (symbol != null && symbol.getKind() == ElementKind.FIELD && !symbol.isStatic()) {
          variablesAssigned.add(symbol);
        }
        return super.visitAssignment(tree, null);
      }
    }.scan((JCTree) getOnlyElement(ctorsWithInject), null);

    SuggestedFix.Builder fix = SuggestedFix.builder();
    VariableTree variableTreeFirstMatch = null;
    for (Tree member : classTree.getMembers()) {
      if (!(member instanceof VariableTree)) {
        continue;
      }
      VariableTree variableTree = (VariableTree) member;
      if (!INSTANCE_FIELD_WITH_INJECT.matches(variableTree, state)) {
        continue;
      }
      if (!variablesAssigned.contains(ASTHelpers.getSymbol(variableTree))) {
        continue;
      }
      variableTreeFirstMatch = variableTree;
      removeInjectAnnotationFromVariable(variableTree, state).ifPresent(fix::merge);
    }
    if (variableTreeFirstMatch == null) {
      return Description.NO_MATCH;
    }
    if (fix.isEmpty()) {
      return describeMatch(variableTreeFirstMatch);
    }
    return describeMatch(variableTreeFirstMatch, fix.build());
  }"
9192832,minor,"	public void widgetSelected( SelectionEvent e )
	{
		Object widget = e.widget;
		if ( widget == btnVisible )
		{
			// Notify Listeners that a change has occurred in the value
			fireValueChangedEvent( GanttLineAttributesComposite.VISIBILITY_CHANGED_EVENT,
					Boolean.valueOf( btnVisible.getSelectionState( ) == ChartCheckbox.STATE_SELECTED ),
					( btnVisible.getSelectionState( ) == ChartCheckbox.STATE_GRAYED ) ? ChartUIExtensionUtil.PROPERTY_UNSET
							: ChartUIExtensionUtil.PROPERTY_UPDATE );
			// Notification may cause this class disposed
			if ( isDisposed( ) )
			{
				return;
			}
			// Enable/Disable UI Elements
			boolean bEnableUI = context.getUIFactory( ).canEnableUI( btnVisible );
			if ( bEnableStyles )
			{
				lblStyle.setEnabled( bEnableUI );
				cmbStyle.setEnabled( bEnableUI );
			}
			if ( bEnableWidths )
			{
				lblWidth.setEnabled( bEnableUI  );
				iscWidth.setEnabled( bEnableUI  );
			}
			if ( bEnableColor )
			{
				lblColor.setEnabled( bEnableUI );
				cmbColor.setEnabled( bEnableUI );
			}
		}
	}"
7581965,minor,"	@Nullable
	public static PropertyEditor findEditorByConvention(@Nullable Class<?> targetType) {
		if (targetType == null || targetType.isArray() || unknownEditorTypes.contains(targetType)) {
			return null;
		}
		ClassLoader cl = targetType.getClassLoader();
		if (cl == null) {
			try {
				cl = ClassLoader.getSystemClassLoader();
				if (cl == null) {
					return null;
				}
			}
			catch (Throwable ex) {
				// e.g. AccessControlException on Google App Engine
				if (logger.isDebugEnabled()) {
					logger.debug(""Could not access system ClassLoader: "" + ex);
				}
				return null;
			}
		}
		String editorName = targetType.getName() + ""Editor"";
		try {
			Class<?> editorClass = cl.loadClass(editorName);
			if (!PropertyEditor.class.isAssignableFrom(editorClass)) {
				if (logger.isInfoEnabled()) {
					logger.info(""Editor class ["" + editorName +
							""] does not implement [java.beans.PropertyEditor] interface"");
				}
				unknownEditorTypes.add(targetType);
				return null;
			}
			return (PropertyEditor) instantiateClass(editorClass);
		}
		catch (ClassNotFoundException ex) {
			if (logger.isTraceEnabled()) {
				logger.trace(""No property editor ["" + editorName + ""] found for type "" +
						targetType.getName() + "" according to 'Editor' suffix convention"");
			}
			unknownEditorTypes.add(targetType);
			return null;
		}
	}"
8389037,minor,"    @Override
    protected Endpoint createEndpoint(final String uri, final String remaining,
                                      final Map<String, Object> parameters) throws Exception {

        final int concurrentConsumers = getAndRemoveParameter(parameters, ""concurrentConsumers"", Integer.class, defaultConcurrentConsumers);
        final boolean limitConcurrentConsumers = getAndRemoveParameter(parameters, ""limitConcurrentConsumers"", Boolean.class, true);

        if (limitConcurrentConsumers && concurrentConsumers > MAX_CONCURRENT_CONSUMERS) {
            throw new IllegalArgumentException(
                    ""The limitConcurrentConsumers flag in set to true. ConcurrentConsumers cannot be set at a value greater than ""
                            + MAX_CONCURRENT_CONSUMERS + "" was "" + concurrentConsumers);
        }

        if (concurrentConsumers < 0) {
            throw new IllegalArgumentException(""concurrentConsumers found to be "" + concurrentConsumers 
                                               + "", must be greater than 0"");
        }

        int size = 0;
        if (parameters.containsKey(""size"")) {
            size = getAndRemoveParameter(parameters, ""size"", int.class);
            if (size <= 0) {
                throw new IllegalArgumentException(""size found to be "" + size + "", must be greater than 0"");
            }
        }

        // Check if the pollTimeout argument is set (may be the case if Disruptor component is used as drop-in
        // replacement for the SEDA component.
        if (parameters.containsKey(""pollTimeout"")) {
            throw new IllegalArgumentException(""The 'pollTimeout' argument is not supported by the Disruptor component"");
        }

        final DisruptorWaitStrategy waitStrategy = getAndRemoveParameter(parameters, ""waitStrategy"", DisruptorWaitStrategy.class, defaultWaitStrategy);
        final DisruptorProducerType producerType = getAndRemoveParameter(parameters, ""producerType"", DisruptorProducerType.class, defaultProducerType);
        final boolean multipleConsumers = getAndRemoveParameter(parameters, ""multipleConsumers"", boolean.class, defaultMultipleConsumers);
        final boolean blockWhenFull = getAndRemoveParameter(parameters, ""blockWhenFull"", boolean.class, defaultBlockWhenFull);

        final DisruptorReference disruptorReference = getOrCreateDisruptor(uri, remaining, size, producerType, waitStrategy);
        final DisruptorEndpoint disruptorEndpoint = new DisruptorEndpoint(uri, this, disruptorReference, concurrentConsumers, multipleConsumers, blockWhenFull);
        disruptorEndpoint.setWaitStrategy(waitStrategy);
        disruptorEndpoint.setProducerType(producerType);
        disruptorEndpoint.configureProperties(parameters);

        return disruptorEndpoint;
    }"
9301230,minor,"    NativeKeyHolder(P11Key p11Key, long keyID, Session keySession,
            boolean extractKeyInfo, boolean isTokenObject) {
        this.p11Key = p11Key;
        this.keyID = keyID;
        this.refCount = -1;
        byte[] ki = null;
        if (isTokenObject) {
            this.ref = null;
        } else {
            this.ref = new SessionKeyRef(p11Key, keyID, keySession);

            // Try extracting key info, if any error, disable it
            Token token = p11Key.token;
            if (extractKeyInfo) {
                try {
                    if (p11Key.sensitive && nativeKeyWrapperKeyID == 0) {
                        synchronized(NativeKeyHolder.class) {
                            // Create a global wrapping/unwrapping key
                            CK_ATTRIBUTE[] wrappingAttributes = token.getAttributes
                                (O_GENERATE, CKO_SECRET_KEY, CKK_AES, new CK_ATTRIBUTE[] {
                                    new CK_ATTRIBUTE(CKA_CLASS, CKO_SECRET_KEY),
                                    new CK_ATTRIBUTE(CKA_VALUE_LEN, 256 >> 3),
                                });
                            Session wrappingSession = null;
                            try {
                                wrappingSession = token.getObjSession();
                                nativeKeyWrapperKeyID = token.p11.C_GenerateKey
                                    (wrappingSession.id(),
                                    new CK_MECHANISM(CKM_AES_KEY_GEN),
                                    wrappingAttributes);
                                byte[] iv = new byte[16];
                                JCAUtil.getSecureRandom().nextBytes(iv);
                                nativeKeyWrapperMechanism = new CK_MECHANISM
                                    (CKM_AES_CBC_PAD, iv);
                            } catch (PKCS11Exception e) {
                                // best effort
                            } finally {
                                token.releaseSession(wrappingSession);
                            }
                        }
                    }
                    Session opSession = null;
                    try {
                        opSession = token.getOpSession();
                        ki = p11Key.token.p11.getNativeKeyInfo(opSession.id(),
                            keyID, nativeKeyWrapperKeyID, nativeKeyWrapperMechanism);
                    } catch (PKCS11Exception e) {
                        // best effort
                    } finally {
                        token.releaseSession(opSession);
                    }
                } catch (PKCS11Exception e) {
                    // best effort
                }
            }
        }
        this.nativeKeyInfo = ((ki == null || ki.length == 0)? null : ki);
    }"
7355243,minor,"        private Action createAction(final ProjectInfo project, final TeamConfiguration team) {
            Check.notNull(project, ""project""); //$NON-NLS-1$
            Check.notNull(team, ""team""); //$NON-NLS-1$

            final String projectGUID = project.getGUID();

            // Omit the team name for the default team
            final String actionName = team.isDefaultTeam() ? project.getName()
                : MessageFormat.format(
                    Messages.getString(""TeamExplorerControl.ProjectSlashTeamFormat""), //$NON-NLS-1$
                    project.getName(),
                    team.getTeamName());

            final Action action = new Action(actionName) {
                @Override
                public void run() {
                    final String beforeChangeProjectGUID = context.getCurrentProjectInfo().getGUID();
                    if (!projectGUID.equals(beforeChangeProjectGUID) || !team.equals(context.getCurrentTeam())) {
                        context.setCurrentProject(projectGUID);
                        context.setCurrentTeam(team);

                        TFSCommonUIClientPlugin.getDefault().projectOrTeamChanged();

                        // Only invoke this listener if team project changed
                        if (!projectGUID.equals(beforeChangeProjectGUID)) {
                            final boolean tfvc =
                                context.getCurrentProjectInfo().getSourceControlCapabilityFlags().contains(
                                    SourceControlCapabilityFlags.TFS);
                            TFSCommonUIClientPlugin.getDefault().sourceControlChanged(tfvc);
                        }
                    }
                }
            };

            if (projectGUID.equals(context.getCurrentProjectInfo().getGUID())
                && team.equals(context.getCurrentTeam())) {
                action.setChecked(true);
            }

            return action;
        }"
9108325,minor,"	protected boolean doAction( ) throws Exception
	{
		if ( Policy.TRACING_ACTIONS )
		{
			System.out.println( ""Edit data source action >> Runs ..."" ); //$NON-NLS-1$
		}
		DataSourceHandle handle = (DataSourceHandle) getSelection( );
		DataSourceEditor dialog = new AdvancedDataSourceEditor( PlatformUI
				.getWorkbench( ).getDisplay( ).getActiveShell( ), handle );

		return ( dialog.open( ) == IDialogConstants.OK_ID );
	}"
7205580,minor,"    @Override
    public CreatePreauthenticatedRequestResponse createPreauthenticatedRequest(
            CreatePreauthenticatedRequestRequest request) {
        LOG.trace(""Called createPreauthenticatedRequest"");
        request = CreatePreauthenticatedRequestConverter.interceptRequest(request);
        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =
                CreatePreauthenticatedRequestConverter.fromRequest(client, request);
        com.google.common.base.Function<
                        javax.ws.rs.core.Response, CreatePreauthenticatedRequestResponse>
                transformer = CreatePreauthenticatedRequestConverter.fromResponse();

        int attempts = 0;
        while (true) {
            try {
                javax.ws.rs.core.Response response =
                        client.post(ib, request.getCreatePreauthenticatedRequestDetails(), request);
                return transformer.apply(response);
            } catch (com.oracle.bmc.model.BmcException e) {
                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS
                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {
                    continue;
                } else {
                    throw e;
                }
            }
        }
    }"
4352708,minor,"    NormalizeResultSetNode(ResultSetNode chldRes,
                           ResultColumnList targetResultColumnList,
                           Properties tableProperties,
                           boolean forUpdate,
                           ContextManager cm) throws StandardException
	{
        super(chldRes, tableProperties, cm);
        this.forUpdate = forUpdate;

        ResultColumnList rcl = chldRes.getResultColumns();
        ResultColumnList targetRCL = targetResultColumnList;
        
		/* We get a shallow copy of the ResultColumnList and its 
		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
		 * 
		 * Setting this.resultColumns to the modified child result column list,
		 * and making a new copy for the child result set node
		 * ensures that the ProjectRestrictNode restrictions still points to 
		 * the same list.  See d3494_npe_writeup-4.html in DERBY-3494 for a
		 * detailed explanation of how this works.
		 */
		ResultColumnList prRCList = rcl;
        chldRes.setResultColumns(rcl.copyListAndObjects());
		// Remove any columns that were generated.
		prRCList.removeGeneratedGroupingColumns();
        // And also columns that were added for ORDER BY (DERBY-6006).
        prRCList.removeOrderByColumns();

		/* Replace ResultColumn.expression with new VirtualColumnNodes
		 * in the NormalizeResultSetNode's ResultColumnList.  (VirtualColumnNodes include
		 * pointers to source ResultSetNode, rsn, and source ResultColumn.)
		 */
        prRCList.genVirtualColumnNodes(chldRes, chldRes.getResultColumns());
        
		setResultColumns( prRCList );
		// Propagate the referenced table map if it's already been created
        if (chldRes.getReferencedTableMap() != null)
		    {
			setReferencedTableMap((JBitSet) getReferencedTableMap().clone());
		    }
        
        
		if (targetResultColumnList != null) {
		    int size = Math.min(targetRCL.size(), getResultColumns().size());

            for (int index = 0; index < size; index++) {
                ResultColumn sourceRC = getResultColumns().elementAt(index);
                ResultColumn resultColumn = targetRCL.elementAt(index);
                sourceRC.setType(resultColumn.getTypeServices());
		    }
		}
	}"
7870683,minor,"  private void processEmail(EmailData emailData) {
    if (logger.isTraceEnabled()) {
      logger.trace(""Entered MailManager:processEmail"");
    }

    if (mailHost == null || mailHost.length() == 0 || emailData == null
        || mailToAddresses.length == 0) {
      logger.error(""Required mail server configuration is not specfied."");
      if (logger.isDebugEnabled()) {
        logger.debug(""Exited MailManager:processEmail: Not sending email as conditions not met"");
      }
      return;
    }

    Session session = Session.getDefaultInstance(getMailHostConfiguration());
    MimeMessage mimeMessage = new MimeMessage(session);
    String subject = emailData.subject;
    String message = emailData.message;
    String mailToList = getMailToAddressesAsString();

    try {
      for (int i = 0; i < mailToAddresses.length; i++) {
        mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(mailToAddresses[i]));
      }

      if (subject == null) {
        subject = ""Alert from GemFire Admin Agent"";
      }
      mimeMessage.setSubject(subject);

      if (message == null) {
        message = """";
      }
      mimeMessage.setText(message);

      Transport.send(mimeMessage);
      logger.info(""Email sent to {}. Subject: {}, Content: {}"",
          new Object[] {mailToList, subject, message});
    } catch (VirtualMachineError err) {
      SystemFailure.initiateFailure(err);
      // If this ever returns, rethrow the error. We're poisoned
      // now, so don't let this thread continue.
      throw err;
    } catch (Throwable ex) {
      // Whenever you catch Error or Throwable, you must also
      // catch VirtualMachineError (see above). However, there is
      // _still_ a possibility that you are dealing with a cascading
      // error condition, so you also need to check to see if the JVM
      // is still usable:
      SystemFailure.checkFailure();
      StringBuilder buf = new StringBuilder();
      buf.append(""An exception occurred while sending email."");
      buf.append(
          ""Unable to send email. Please check your mail settings and the log file."");
      buf.append(""\n\n"").append(
          String.format(""Exception message: %s"", ex.getMessage()));
      buf.append(""\n\n"").append(
          ""Following email was not delivered:"");
      buf.append(""\n\t"")
          .append(String.format(""Mail Host: %s"", mailHost));
      buf.append(""\n\t"").append(String.format(""From: %s"", mailFrom));
      buf.append(""\n\t"").append(String.format(""To: %s"", mailToList));
      buf.append(""\n\t"").append(String.format(""Subject: %s"", subject));
      buf.append(""\n\t"").append(String.format(""Content: %s"", message));

      logger.error(buf.toString(), ex);
    }
    if (logger.isTraceEnabled()) {
      logger.trace(""Exited MailManager:processEmail"");
    }
  }"
5403624,minor,"    private static Class<?> stringToClass(String klass) throws FrontendException {
        if (""string"".equalsIgnoreCase(klass)) {
            return String.class;
        } else if (""int"".equalsIgnoreCase(klass)) {
            return Integer.TYPE;
        } else if (""double"".equalsIgnoreCase(klass)) {
            return Double.TYPE;
        } else if (""float"".equalsIgnoreCase(klass)){
            return Float.TYPE;
        } else if (""long"".equalsIgnoreCase(klass)) {
            return Long.TYPE;
        } else if (""double[]"".equalsIgnoreCase(klass)) {
          return DOUBLE_ARRAY_CLASS;
        } else if (""int[]"".equalsIgnoreCase(klass)) {
          return INT_ARRAY_CLASS;
        } else if (""long[]"".equalsIgnoreCase(klass)) {
          return LONG_ARRAY_CLASS;
        } else if (""float[]"".equalsIgnoreCase(klass)) {
          return FLOAT_ARRAY_CLASS;
        } else if (""string[]"".equalsIgnoreCase(klass)) {
          return STRING_ARRAY_CLASS;
        } else {
            throw new FrontendException(""unable to find matching class for "" + klass);
        }

    }"
6318697,minor,"    @Override
    protected void onRender(Element parent, int index) {
        super.onRender(parent, index);
        setLayout(new FitLayout());
        setBorders(false);

        // init components
        initToolBar();
        initGrid();

        ContentPanel devicesBundlesPanel = new ContentPanel();
        devicesBundlesPanel.setBorders(false);
        devicesBundlesPanel.setBodyBorder(true);
        devicesBundlesPanel.setHeaderVisible(false);
        devicesBundlesPanel.setLayout(new FitLayout());
        devicesBundlesPanel.setScrollMode(Scroll.AUTO);
        devicesBundlesPanel.setTopComponent(toolBar);
        devicesBundlesPanel.add(grid);

        add(devicesBundlesPanel);
        initialized = true;
    }"
4959879,minor,"   public static Predicate<OperatingSystem> isUnix() {
      return new Predicate<OperatingSystem>() {
         @Override
         public boolean apply(OperatingSystem os) {
            if (os.getFamily() != null) {
               switch (os.getFamily()) {
                  case WINDOWS:
                     return false;
               }
            }
            for (String toMatch : searchStrings(os))
               if (toMatch != null && toMatch.toLowerCase().indexOf(""windows"") != -1)
                  return false;
            return true;
         }

         @Override
         public String toString() {
            return ""isUnix()"";
         }
      };
   }"
8494231,minor,"    @Override
    public List<? extends Host> discoverHosts(final AddHostCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
        Long dcId = cmd.getZoneId();
        final Long podId = cmd.getPodId();
        final Long clusterId = cmd.getClusterId();
        String clusterName = cmd.getClusterName();
        final String url = cmd.getUrl();
        final String username = cmd.getUsername();
        final String password = cmd.getPassword();
        final List<String> hostTags = cmd.getHostTags();

        dcId = _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), dcId);

        // this is for standalone option
        if (clusterName == null && clusterId == null) {
            clusterName = ""Standalone-"" + url;
        }

        if (clusterId != null) {
            final ClusterVO cluster = _clusterDao.findById(clusterId);
            if (cluster == null) {
                final InvalidParameterValueException ex = new InvalidParameterValueException(""can not find cluster for specified clusterId"");
                ex.addProxyObject(clusterId.toString(), ""clusterId"");
                throw ex;
            } else {
                if (cluster.getGuid() == null) {
                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);
                    if (!hosts.isEmpty()) {
                        final CloudRuntimeException ex =
                                new CloudRuntimeException(""Guid is not updated for cluster with specified cluster id; need to wait for hosts in this cluster to come up"");
                        ex.addProxyObject(cluster.getUuid(), ""clusterId"");
                        throw ex;
                    }
                }
            }
        }

        return discoverHostsFull(dcId, podId, clusterId, clusterName, url, username, password, cmd.getHypervisor(), hostTags, cmd.getFullUrlParams(), false);
    }"
7085407,minor,"    public void updateState(X509Certificate cert)
        throws CertificateException, IOException, CertPathValidatorException {

        if (cert == null) {
            return;
        }

        /* update subject DN */
        subjectDN = cert.getSubjectX500Principal();

        /* check for key needing to inherit alg parameters */
        X509CertImpl icert = X509CertImpl.toImpl(cert);
        PublicKey newKey = cert.getPublicKey();
        if (PKIX.isDSAPublicKeyWithoutParams(newKey)) {
            newKey = BasicChecker.makeInheritedParamsKey(newKey, pubKey);
        }

        /* update subject public key */
        pubKey = newKey;

        /*
         * if this is a trusted cert (init == true), then we
         * don't update any of the remaining fields
         */
        if (init) {
            init = false;
            return;
        }

        /* update subject key identifier */
        subjKeyId = icert.getSubjectKeyIdentifierExtension();

        /* update crlSign */
        crlSign = RevocationChecker.certCanSignCrl(cert);

        /* update current name constraints */
        if (nc != null) {
            nc.merge(icert.getNameConstraintsExtension());
        } else {
            nc = icert.getNameConstraintsExtension();
            if (nc != null) {
                // Make sure we do a clone here, because we're probably
                // going to modify this object later and we don't want to
                // be sharing it with a Certificate object!
                nc = (NameConstraintsExtension) nc.clone();
            }
        }

        /* update policy state variables */
        explicitPolicy =
            PolicyChecker.mergeExplicitPolicy(explicitPolicy, icert, false);
        policyMapping =
            PolicyChecker.mergePolicyMapping(policyMapping, icert);
        inhibitAnyPolicy =
            PolicyChecker.mergeInhibitAnyPolicy(inhibitAnyPolicy, icert);
        certIndex++;

        /*
         * Update remaining CA certs
         */
        remainingCACerts =
            ConstraintsChecker.mergeBasicConstraints(cert, remainingCACerts);

        init = false;
    }"
7581956,minor,"	@Nullable
	public static Method findDeclaredMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {
		try {
			return clazz.getDeclaredMethod(methodName, paramTypes);
		}
		catch (NoSuchMethodException ex) {
			if (clazz.getSuperclass() != null) {
				return findDeclaredMethod(clazz.getSuperclass(), methodName, paramTypes);
			}
			return null;
		}
	}"
5207888,minor,"    private List<FlowSnapshotMetadata> createFlowSnapshotMetdata(final Flow flow) {
        final List<FlowSnapshotMetadata> flowSnapshotMetadataList = new ArrayList<>();

        final Map<Integer, Flow.FlowPointer> versions = flow.getVersions();
        for (Map.Entry<Integer, Flow.FlowPointer> entry : versions.entrySet()) {
            final Integer version = entry.getKey();
            final Flow.FlowPointer flowPointer = entry.getValue();

            final FlowSnapshotMetadata snapshotMetadata = new FlowSnapshotMetadata();
            snapshotMetadata.setVersion(version);
            snapshotMetadata.setAuthor(flowPointer.getAuthor());
            snapshotMetadata.setComments(flowPointer.getComment());
            snapshotMetadata.setCreated(flowPointer.getCreated());
            flowSnapshotMetadataList.add(snapshotMetadata);
        }

        return flowSnapshotMetadataList;
    }"
4679336,minor,"  public String getColumnText(Object element, int columnIndex) {
    if (element instanceof HadoopServer) {
      HadoopServer server = (HadoopServer) element;

      switch (columnIndex) {
        case 0:
          return server.getLocationName();
        case 1:
          return server.getMasterHostName().toString();
        case 2:
          return server.getState();
        case 3:
          return """";
      }
    } else if (element instanceof HadoopJob) {
      HadoopJob job = (HadoopJob) element;

      switch (columnIndex) {
        case 0:
          return job.getJobID().toString();
        case 1:
          return """";
        case 2:
          return job.getState().toString();
        case 3:
          return job.getStatus();
      }
    } else if (element instanceof JarModule) {
      JarModule jar = (JarModule) element;

      switch (columnIndex) {
        case 0:
          return jar.toString();
        case 1:
          return ""Publishing jar to server.."";
        case 2:
          return """";
      }
    }

    return null;
  }"
4523536,minor,"    private void writeJSON( final Writer pw, final ServiceReference service, final boolean fullDetails, final Locale locale, final String filter )
            throws IOException
    {
        final ServiceReference[] allServices = this.getServices(filter);
        final String statusLine = getStatusLine( allServices );

        final ServiceReference[] services = ( service != null ) ? new ServiceReference[]
                { service } : allServices;

                final JSONWriter jw = new JSONWriter( pw );

                jw.object();

                jw.key( ""status"" );
                jw.value( statusLine );

                jw.key( ""serviceCount"" );
                jw.value( allServices.length );

                jw.key( ""data"" );

                jw.array();

                for ( int i = 0; i < services.length; i++ )
                {
                    serviceInfo( jw, services[i], fullDetails || service != null, locale );
                }

                jw.endArray();

                jw.endObject();

    }"
6613457,minor,"  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // define symbols
    mPointSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.SQUARE, 0xFFFF0000, 20);
    mLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID, 0xFFFF8800, 4);
    mFillSymbol = new SimpleFillSymbol(SimpleFillSymbol.Style.CROSS, 0x40FFA9A9, mLineSymbol);

    // inflate map view from layout
    mMapView = findViewById(R.id.mapView);
    // create a map with the Basemap Type topographic
    ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS, 34.056295, -117.195800, 16);
    // set the map to be displayed in this view
    mMapView.setMap(map);

    mGraphicsOverlay = new GraphicsOverlay();
    mMapView.getGraphicsOverlays().add(mGraphicsOverlay);

    // create a new sketch editor and add it to the map view
    mSketchEditor = new SketchEditor();
    mMapView.setSketchEditor(mSketchEditor);

    // get buttons from layouts
    mPointButton = findViewById(R.id.pointButton);
    mMultiPointButton = findViewById(R.id.pointsButton);
    mPolylineButton = findViewById(R.id.polylineButton);
    mPolygonButton = findViewById(R.id.polygonButton);
    mFreehandLineButton = findViewById(R.id.freehandLineButton);
    mFreehandPolygonButton = findViewById(R.id.freehandPolygonButton);

    // add click listeners
    mPointButton.setOnClickListener(view -> createModePoint());
    mMultiPointButton.setOnClickListener(view -> createModeMultipoint());
    mPolylineButton.setOnClickListener(view -> createModePolyline());
    mPolygonButton.setOnClickListener(view -> createModePolygon());
    mFreehandLineButton.setOnClickListener(view -> createModeFreehandLine());
    mFreehandPolygonButton.setOnClickListener(view -> createModeFreehandPolygon());
  }"
4933953,minor,"    @Override
    public WikiPage getPageInfo( String page, int version )
        throws ProviderException
    {
        int latest = findLatestVersion(page);
        int realVersion;

        WikiPage p = null;

        if( version == WikiPageProvider.LATEST_VERSION ||
            version == latest ||
            (version == 1 && latest == -1) )
        {
            //
            // Yes, we need to talk to the top level directory
            // to get this version.
            //
            // I am listening to Press Play On Tape's guitar version of
            // the good old C64 ""Wizardry"" -tune at this moment.
            // Oh, the memories...
            //
            realVersion = (latest >= 0) ? latest : 1;

            p = super.getPageInfo( page, WikiPageProvider.LATEST_VERSION );

            if( p != null )
            {
                p.setVersion( realVersion );
            }
        }
        else
        {
            //
            //  The file is not the most recent, so we'll need to
            //  find it from the deep trenches of the ""OLD"" directory
            //  structure.
            //
            realVersion = version;
            File dir = findOldPageDir( page );

            if( !dir.exists() || !dir.isDirectory() )
            {
                return null;
            }

            File file = new File( dir, version+FILE_EXT );

            if( file.exists() )
            {
                p = new WikiPage( m_engine, page );

                p.setLastModified( new Date(file.lastModified()) );
                p.setVersion( version );
            }
        }

        //
        //  Get author and other metadata information
        //  (Modification date has already been set.)
        //
        if( p != null )
        {
            try
            {
                Properties props = getPageProperties( page );
                String author = props.getProperty( realVersion+"".author"" );
                if ( author == null )
                {
                    // we might not have a versioned author because the
                    // old page was last maintained by FileSystemProvider
                    Properties props2 = getHeritagePageProperties( page );
                    author = props2.getProperty( WikiPage.AUTHOR );
                }
                if ( author != null )
                {
                    p.setAuthor( author );
                }

                String changenote = props.getProperty( realVersion+"".changenote"" );
                if( changenote != null ) p.setAttribute( WikiPage.CHANGENOTE, changenote );

                // Set the props values to the page attributes
                setCustomProperties(p, props);
            }
            catch( IOException e )
            {
                log.error( ""Cannot get author for page""+page+"": "", e );
            }
        }

        return p;
    }"
4426200,minor,"    public void resetApplications() {
        String jobPath = zkRoot + ""/jobs"";
        InterProcessLock lock = new InterProcessReadWriteLock(curator,jobPath).writeLock();
        try {
            lock.acquire();
            (curator.getChildren().forPath(jobPath)).forEach(appId -> {
                String path = jobPath + ""/"" + appId;
                try {
                    if (curator.checkExists().forPath(path) != null) {
                        String status = new String(curator.getData().forPath(path));
                        if (!ZKStateConstant.AppStatus.INIT.toString().equals(status)) {
                            curator.setData().forPath(path, ZKStateConstant.AppStatus.INIT.toString().getBytes(""UTF-8""));
                        }
                    }
                } catch (Exception e) {
                    LOG.error(""fail to read unprocessed job"", e);
                    throw new RuntimeException(e);
                }
            });

        } catch (Exception e) {
            LOG.error(""fail to read unprocessed jobs"", e);
            throw new RuntimeException(e);
        } finally {
            try {
                lock.release();
            } catch (Exception e) {
                LOG.error(""fail to release lock"", e);
            }
        }
    }"
6036658,minor,"		void cleanup() {
			for (final BundleWire requiredWire : requiredWires.getAllValues()) {
				final ConciergeBundleWiring bw = ((ConciergeBundleWire) requiredWire).providerWiring;
				if (bw != null) {
					bw.inUseSet.remove(revision);
				}
			}
			for (final BundleWire hostWire : providedWires
					.lookup(HostNamespace.HOST_NAMESPACE)) {
				final ConciergeBundleWiring bw = ((ConciergeBundleWire) hostWire).requirerWiring;
				if (bw != null) {
					bw.inUseSet.remove(revision);
				}
			}
		}"
3951549,minor,"  @SuppressWarnings(value = ""unchecked"")
  private void performCommonProcessing(Operation currentOperation, KuduExecutionContext kuduExecutionContext)
  {
    currentOperation.setExternalConsistencyMode(kuduExecutionContext.getExternalConsistencyMode());
    Long propagatedTimeStamp = kuduExecutionContext.getPropagatedTimestamp();
    if ( propagatedTimeStamp != null) { // set propagation timestamp only if enabled
      currentOperation.setPropagatedTimestamp(propagatedTimeStamp);
    }
    PartialRow partialRow = currentOperation.getRow();
    Object payload = kuduExecutionContext.getPayload();
    Set<String> doNotWriteColumns = kuduExecutionContext.getDoNotWriteColumns();
    if (doNotWriteColumns == null) {
      doNotWriteColumns = new HashSet<>();
    }
    for (String columnName: kuduColumnBasedGetters.keySet()) {
      if ( doNotWriteColumns.contains(columnName)) {
        continue;
      }
      ColumnSchema columnSchema = allColumnDefs.get(columnName);
      Type dataType = columnSchema.getType();
      try {
        switch (dataType) {
          case STRING:
            PojoUtils.Getter<Object, String> stringGetter = ((PojoUtils.Getter<Object, String>)kuduColumnBasedGetters
                .get(columnName));
            if (stringGetter != null) {
              final String stringValue = stringGetter.get(payload);
              if (stringValue != null) {
                partialRow.addString(columnName, stringValue);
              }
            }
            break;
          case BINARY:
            PojoUtils.Getter<Object, ByteBuffer> byteBufferGetter = ((PojoUtils.Getter<Object, ByteBuffer>)
                kuduColumnBasedGetters.get(columnName));
            if (byteBufferGetter != null) {
              final ByteBuffer byteBufferValue = byteBufferGetter.get(payload);
              if (byteBufferValue != null) {
                partialRow.addBinary(columnName, byteBufferValue);
              }
            }
            break;
          case BOOL:
            PojoUtils.GetterBoolean<Object> boolGetter = ((PojoUtils.GetterBoolean<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (boolGetter != null) {
              final boolean boolValue = boolGetter.get(payload);
              partialRow.addBoolean(columnName, boolValue);
            }
            break;
          case DOUBLE:
            PojoUtils.GetterDouble<Object> doubleGetter = ((PojoUtils.GetterDouble<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (doubleGetter != null) {
              final double doubleValue = doubleGetter.get(payload);
              partialRow.addDouble(columnName, doubleValue);
            }
            break;
          case FLOAT:
            PojoUtils.GetterFloat<Object> floatGetter = ((PojoUtils.GetterFloat<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (floatGetter != null) {
              final float floatValue = floatGetter.get(payload);
              partialRow.addFloat(columnName, floatValue);
            }
            break;
          case INT8:
            PojoUtils.GetterByte<Object> byteGetter = ((PojoUtils.GetterByte<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (byteGetter != null) {
              final byte byteValue = byteGetter.get(payload);
              partialRow.addByte(columnName, byteValue);
            }
            break;
          case INT16:
            PojoUtils.GetterShort<Object> shortGetter = ((PojoUtils.GetterShort<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (shortGetter != null) {
              final short shortValue = shortGetter.get(payload);
              partialRow.addShort(columnName, shortValue);
            }
            break;
          case INT32:
            PojoUtils.GetterInt<Object> intGetter = ((PojoUtils.GetterInt<Object>)
                kuduColumnBasedGetters.get(columnName));
            if (intGetter != null) {
              final int intValue = intGetter.get(payload);
              partialRow.addInt(columnName, intValue);
            }
            break;
          case INT64:
          case UNIXTIME_MICROS:
            PojoUtils.GetterLong<Object> longGetter = ((PojoUtils.GetterLong<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (longGetter != null) {
              final long longValue = longGetter.get(payload);
              partialRow.addLong(columnName, longValue);
            }
            break;
          default:
            LOG.error(columnName + "" is not of the supported data type"");
            throw new UnsupportedOperationException(""Kudu does not support data type for column "" + columnName);
        }
      } catch ( Exception ex ) {
        LOG.error("" Exception while fetching the value of "" + columnName + "" because "" + ex.getMessage());
        partialRow.setNull(columnName);
      }
    }
    try {
      kuduSession.apply(currentOperation);
    } catch (KuduException e) {
      throw new RuntimeException(""Could not execute operation because "" + e.getMessage(), e);
    }
  }"
5117164,minor,"    public void run()
    {
      try
      {
        IThreadContext threadContext = ThreadContextFactory.make();
        while (true)
        {
          try
          {
            if (Thread.currentThread().isInterrupted())
              throw new ManifoldCFException(""Interrupted"",ManifoldCFException.INTERRUPTED);

            checkAgents(threadContext);
            ManifoldCF.sleep(5000L);
          }
          catch (InterruptedException e)
          {
            break;
          }
          catch (ManifoldCFException e)
          {
            if (e.getErrorCode() == ManifoldCFException.INTERRUPTED)
              break;
            if (e.getErrorCode() == ManifoldCFException.SETUP_ERROR)
            {
              System.err.println(""Misconfigured ManifoldCF agents - shutting down"");
              Logging.agents.fatal(""AgentThread configuration exception tossed: ""+e.getMessage(),e);
              System.exit(-200);
            }
            Logging.agents.error(""Exception tossed: ""+e.getMessage(),e);
          }
          catch (OutOfMemoryError e)
          {
            System.err.println(""Agents process ran out of memory - shutting down"");
            e.printStackTrace(System.err);
            System.exit(-200);
          }
          catch (Throwable e)
          {
            Logging.agents.fatal(""Error tossed: ""+e.getMessage(),e);
          }
        }
      }
      catch (Throwable e)
      {
        // Severe error on initialization
        System.err.println(""Agents process could not start - shutting down"");
        Logging.agents.fatal(""AgentThread initialization error tossed: ""+e.getMessage(),e);
        System.exit(-300);
      }
    }"
8526436,minor,"    public boolean executeSyncCmsId(NuageVspDeviceVO nuageVspDevice, SyncType syncType) {
        NuageVspDeviceVO matchingNuageVspDevice = findMatchingNuageVspDevice(nuageVspDevice);
        if (syncType == SyncType.REGISTER && matchingNuageVspDevice != null) {
            String cmsId = findNuageVspCmsIdForDeviceOrHost(matchingNuageVspDevice.getId(), matchingNuageVspDevice.getHostId());
            registerNewNuageVspDevice(nuageVspDevice.getHostId(), cmsId);
            return true;
        }

        String cmsId = findNuageVspCmsIdForDeviceOrHost(nuageVspDevice.getId(), nuageVspDevice.getHostId());

        SyncNuageVspCmsIdCommand syncCmd = new SyncNuageVspCmsIdCommand(syncType, cmsId);
        SyncNuageVspCmsIdAnswer answer = (SyncNuageVspCmsIdAnswer) _agentMgr.easySend(nuageVspDevice.getHostId(), syncCmd);
        if (answer != null) {
            if (answer.getSuccess()) {
                if (syncType == SyncType.REGISTER || answer.getSyncType() == SyncType.REGISTER) {
                    registerNewNuageVspDevice(nuageVspDevice.getHostId(), answer.getNuageVspCmsId());
                } else if (syncType == SyncType.UNREGISTER) {
                    removeLegacyNuageVspDeviceCmsId(nuageVspDevice.getId());
                }
            } else if (syncType == SyncType.AUDIT || syncType == SyncType.AUDIT_ONLY) {
                s_logger.fatal(""Nuage VSP Device with ID "" + nuageVspDevice.getId() + "" is configured with an unknown CMS ID!"");
            }
        }

        return answer != null && answer.getSuccess();
    }"
8861277,minor,"    @Override
    public boolean isExists(Object identifier) throws AppCatalogException {
        HashMap<String, String> ids;
        if (identifier instanceof Map) {
            ids = (HashMap) identifier;
        } else {
            logger.error(""Identifier should be a map with the field name and it's value"");
            throw new AppCatalogException(""Identifier should be a map with the field name and it's value"");
        }

        EntityManager em = null;
        try {
            em = AppCatalogJPAUtils.getEntityManager();
            ComputeResourcePreference existingPreference = em.find(ComputeResourcePreference.class,
                    new ComputeResourcePreferencePK(ids.get(ComputeResourcePreferenceConstants.GATEWAY_ID),
                            ids.get(ComputeResourcePreferenceConstants.RESOURCE_ID)));
            if (em.isOpen()) {
                if (em.getTransaction().isActive()){
                    em.getTransaction().rollback();
                }
                em.close();
            }
            return existingPreference != null;
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw new AppCatalogException(e);
        } finally {
            if (em != null && em.isOpen()) {
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
                em.close();
            }
        }
    }"
5226222,minor,"  @Override
  public BatchResponsePart executeChangeSet(final BatchHandler handler, final List<ODataRequest> requests)
      throws ODataException {
    List<ODataResponse> responses = new ArrayList<ODataResponse>();
    try {
      oDataJPAContext.getODataJPATransaction().begin();

      for (ODataRequest request : requests) {
        oDataJPAContext.setODataContext(getContext());
        ODataResponse response = handler.handleRequest(request);
        if (response.getStatus().getStatusCode() >= HttpStatusCodes.BAD_REQUEST.getStatusCode()) {
          // Rollback
          oDataJPAContext.getODataJPATransaction().rollback();
          List<ODataResponse> errorResponses = new ArrayList<ODataResponse>(1);
          errorResponses.add(response);
          return BatchResponsePart.responses(errorResponses).changeSet(false).build();
        }
        responses.add(response);
      }
      oDataJPAContext.getODataJPATransaction().commit();

      return BatchResponsePart.responses(responses).changeSet(true).build();
    } catch (Exception e) {
      throw new ODataException(""Error on processing request content:"" + e.getMessage(), e);
    } finally {
      close(true);
    }
  }"
5355489,minor,"    private Map<String, String> tika_parse(InputStream sourceStream, String prefix, Integer maxAttribs,
                                           Integer maxAttribLen) throws IOException, TikaException, SAXException {
        final Metadata metadata = new Metadata();
        final TikaInputStream tikaInputStream = TikaInputStream.get(sourceStream);
        try {
            autoDetectParser.parse(tikaInputStream, new DefaultHandler(), metadata);
        } finally {
            tikaInputStream.close();
        }

        final Map<String, String> results = new HashMap<>();
        final Pattern metadataKeyFilter = metadataKeyFilterRef.get();
        final StringBuilder dataBuilder = new StringBuilder();
        for (final String key : metadata.names()) {
            if (metadataKeyFilter != null && !metadataKeyFilter.matcher(key).matches()) {
                continue;
            }
            dataBuilder.setLength(0);
            if (metadata.isMultiValued(key)) {
                for (String val : metadata.getValues(key)) {
                    if (dataBuilder.length() > 1) {
                        dataBuilder.append("", "");
                    }
                    if (dataBuilder.length() + val.length() < maxAttribLen) {
                        dataBuilder.append(val);
                    } else {
                        dataBuilder.append(""..."");
                        break;
                    }
                }
            } else {
                dataBuilder.append(metadata.get(key));
            }
            if (prefix == null) {
                results.put(key, dataBuilder.toString().trim());
            } else {
                results.put(prefix + key, dataBuilder.toString().trim());
            }

            // cutoff at max if provided
            if (maxAttribs != null && results.size() >= maxAttribs) {
                break;
            }
        }
        return results;
    }"
5326926,minor,"    public SystemDiagnosticsDTO createSystemDiagnosticsDto(final SystemDiagnostics sysDiagnostics) {

        final SystemDiagnosticsDTO dto = new SystemDiagnosticsDTO();
        final SystemDiagnosticsSnapshotDTO snapshot = new SystemDiagnosticsSnapshotDTO();
        dto.setAggregateSnapshot(snapshot);

        snapshot.setStatsLastRefreshed(new Date(sysDiagnostics.getCreationTimestamp()));

        // processors
        snapshot.setAvailableProcessors(sysDiagnostics.getAvailableProcessors());
        snapshot.setProcessorLoadAverage(sysDiagnostics.getProcessorLoadAverage());

        // threads
        snapshot.setDaemonThreads(sysDiagnostics.getDaemonThreads());
        snapshot.setTotalThreads(sysDiagnostics.getTotalThreads());

        // heap
        snapshot.setMaxHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxHeap()));
        snapshot.setMaxHeapBytes(sysDiagnostics.getMaxHeap());
        snapshot.setTotalHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalHeap()));
        snapshot.setTotalHeapBytes(sysDiagnostics.getTotalHeap());
        snapshot.setUsedHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedHeap()));
        snapshot.setUsedHeapBytes(sysDiagnostics.getUsedHeap());
        snapshot.setFreeHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeHeap()));
        snapshot.setFreeHeapBytes(sysDiagnostics.getFreeHeap());
        if (sysDiagnostics.getHeapUtilization() != -1) {
            snapshot.setHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getHeapUtilization()));
        }

        // non heap
        snapshot.setMaxNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxNonHeap()));
        snapshot.setMaxNonHeapBytes(sysDiagnostics.getMaxNonHeap());
        snapshot.setTotalNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalNonHeap()));
        snapshot.setTotalNonHeapBytes(sysDiagnostics.getTotalNonHeap());
        snapshot.setUsedNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedNonHeap()));
        snapshot.setUsedNonHeapBytes(sysDiagnostics.getUsedNonHeap());
        snapshot.setFreeNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeNonHeap()));
        snapshot.setFreeNonHeapBytes(sysDiagnostics.getFreeNonHeap());
        if (sysDiagnostics.getNonHeapUtilization() != -1) {
            snapshot.setNonHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getNonHeapUtilization()));
        }

        // flow file disk usage
        final SystemDiagnosticsSnapshotDTO.StorageUsageDTO flowFileRepositoryStorageUsageDto = createStorageUsageDTO(null, sysDiagnostics.getFlowFileRepositoryStorageUsage());
        snapshot.setFlowFileRepositoryStorageUsage(flowFileRepositoryStorageUsageDto);

        // content disk usage
        final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO> contentRepositoryStorageUsageDtos = new LinkedHashSet<>();
        snapshot.setContentRepositoryStorageUsage(contentRepositoryStorageUsageDtos);
        for (final Map.Entry<String, StorageUsage> entry : sysDiagnostics.getContentRepositoryStorageUsage().entrySet()) {
            contentRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(), entry.getValue()));
        }

        // provenance disk usage
        final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO> provenanceRepositoryStorageUsageDtos = new LinkedHashSet<>();
        snapshot.setProvenanceRepositoryStorageUsage(provenanceRepositoryStorageUsageDtos);
        for (final Map.Entry<String, StorageUsage> entry : sysDiagnostics.getProvenanceRepositoryStorageUsage().entrySet()) {
            provenanceRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(), entry.getValue()));
        }

        // garbage collection
        final Set<SystemDiagnosticsSnapshotDTO.GarbageCollectionDTO> garbageCollectionDtos = new LinkedHashSet<>();
        snapshot.setGarbageCollection(garbageCollectionDtos);
        for (final Map.Entry<String, GarbageCollection> entry : sysDiagnostics.getGarbageCollection().entrySet()) {
            garbageCollectionDtos.add(createGarbageCollectionDTO(entry.getKey(), entry.getValue()));
        }

        // version info
        final SystemDiagnosticsSnapshotDTO.VersionInfoDTO versionInfoDto = createVersionInfoDTO();
        snapshot.setVersionInfo(versionInfoDto);

        // uptime
        snapshot.setUptime(FormatUtils.formatHoursMinutesSeconds(sysDiagnostics.getUptime(), TimeUnit.MILLISECONDS));

        return dto;
    }"
7161584,minor,"    public synchronized void setNotificationRegistration(final String token) {
        // Get the NotificationRegistrationManager from the platform
        ConnectedDevicesNotificationRegistrationManager registrationManager = mPlatform.getNotificationRegistrationManager();

        // Create a NotificationRegistration obect to store all notification information
        ConnectedDevicesNotificationRegistration registration = new ConnectedDevicesNotificationRegistration();
        registration.setType(ConnectedDevicesNotificationType.FCM);
        registration.setToken(token);
        registration.setAppId(Secrets.FCM_SENDER_ID);
        registration.setAppDisplayName(""GraphNotificationsSample"");

        Log.i(TAG, ""Completing the RomeNotificationReceiver operation with token: "" + token);

        // For each prepared account, register for notifications
        for (final Account account : mAccounts) {
            registrationManager.registerForAccountAsync(account.getAccount(), registration)
                    .whenCompleteAsync((Boolean success, Throwable throwable) -> {
                        if (throwable != null) {
                            Log.e(TAG, ""Exception encountered in registerForAccountAsync"", throwable);
                        } else if (!success) {
                            Log.e(TAG, ""Failed to register account "" + account.getAccount().getId() + "" for cloud notifications!"");
                        } else {
                            Log.i(TAG, ""Successfully registered account "" + account.getAccount().getId() + "" for cloud notifications"");
                        }
                    });
        }

        // The two cases of receiving a new notification token are:
        // 1. A notification registration is asked for and now it is available. In this case there is a pending promise that was made
        //    at the time of requesting the information. It now needs to be completed.
        // 2. The account is already registered but for whatever reason the registration changes (GCM/FCM gives the app a new token)
        //
        // In order to most cleanly handle both cases set the new notification information and then trigger a re registration of all accounts
        // that are in good standing.
        RomeNotificationReceiver.setNotificationRegistration(registration);

        // For all the accounts which have been prepared successfully, perform SDK registration
        for (Account account : mAccounts) {
            if (account.getRegistrationState() == AccountRegistrationState.IN_APP_CACHE_AND_SDK_CACHE) {
                account.registerAccountWithSdkAsync();
            }
        }
    }"
4484891,minor,"  private void addOutputContainerData() {
    @SuppressWarnings(""resource"")
    final VarCharVector fragmentIdVector = (VarCharVector) container.getValueAccessorById(
        VarCharVector.class,
        container.getValueVectorId(SchemaPath.getSimplePath(""Fragment"")).getFieldIds())
      .getValueVector();
    AllocationHelper.allocate(fragmentIdVector, 1, 50);
    @SuppressWarnings(""resource"")
    final BigIntVector summaryVector = (BigIntVector) container.getValueAccessorById(BigIntVector.class,
            container.getValueVectorId(SchemaPath.getSimplePath(""Number of records written"")).getFieldIds())
          .getValueVector();
    AllocationHelper.allocate(summaryVector, 1, 8);
    fragmentIdVector.getMutator().setSafe(0, fragmentUniqueId.getBytes());
    fragmentIdVector.getMutator().setValueCount(1);
    summaryVector.getMutator().setSafe(0, counter);
    summaryVector.getMutator().setValueCount(1);

    container.setRecordCount(1);
  }"
3940072,minor,"	private void processAsSubstitutableExport(boolean isFragment, Requirement requirement, List<Capability> capabilities) {
		String namespace = requirement.getNamespace();
		if (!PackageNamespace.PACKAGE_NAMESPACE.equals(namespace)) {
			return;
		}
		Resource resource = requirement.getResource();
		Wiring wiring = wirings.get(resource);
		if (isFragment) {
			List<Wire> fragmentWires = wiring.getRequiredResourceWires(HostNamespace.HOST_NAMESPACE);
			for (Wire fragmentWire : fragmentWires) {
				Resource host = fragmentWire.getProvider();
				processResourceCapabilities(
						wirings.get(host).getResourceCapabilities(namespace),
						requirement,
						capabilities);
			}
		}
		else {
			List<Capability> resourceCapabilities = wiring.getResourceCapabilities(namespace);
			processResourceCapabilities(resourceCapabilities, requirement, capabilities);
		}
	}"
8934300,minor,"    @Override
    public RelOptCost getCost(HiveJoin join) {
      final RelMetadataQuery mq = join.getCluster().getMetadataQuery();
      // 1. Sum of input cardinalities
      final Double leftRCount = mq.getRowCount(join.getLeft());
      final Double rightRCount = mq.getRowCount(join.getRight());
      if (leftRCount == null || rightRCount == null) {
        return null;
      }
      final double rCount = leftRCount + rightRCount;
      // 2. CPU cost = HashTable  construction  cost  +
      //               join cost
      ImmutableList<Double> cardinalities = new ImmutableList.Builder<Double>().
              add(leftRCount).
              add(rightRCount).
              build();
      ImmutableBitSet.Builder streamingBuilder = ImmutableBitSet.builder();
      switch (join.getStreamingSide()) {
        case LEFT_RELATION:
          streamingBuilder.set(0);
          break;
        case RIGHT_RELATION:
          streamingBuilder.set(1);
          break;
        default:
          return null;
      }
      ImmutableBitSet streaming = streamingBuilder.build();
      final double cpuCost = algoUtils.computeBucketMapJoinCPUCost(cardinalities, streaming);
      // 3. IO cost = cost of transferring small tables to join node *
      //              degree of parallelism
      final Double leftRAverageSize = mq.getAverageRowSize(join.getLeft());
      final Double rightRAverageSize = mq.getAverageRowSize(join.getRight());
      if (leftRAverageSize == null || rightRAverageSize == null) {
        return null;
      }
      ImmutableList<Pair<Double,Double>> relationInfos = new ImmutableList.Builder<Pair<Double,Double>>().
              add(new Pair<Double,Double>(leftRCount,leftRAverageSize)).
              add(new Pair<Double,Double>(rightRCount,rightRAverageSize)).
              build();
      //TODO: No Of buckets is not same as no of splits
      JoinAlgorithm oldAlgo = join.getJoinAlgorithm();
      join.setJoinAlgorithm(TezBucketJoinAlgorithm.INSTANCE);
      final int parallelism = mq.splitCount(join) == null
              ? 1 : mq.splitCount(join);
      join.setJoinAlgorithm(oldAlgo);

      final double ioCost = algoUtils.computeBucketMapJoinIOCost(relationInfos, streaming, parallelism);
      // 4. Result
      return HiveCost.FACTORY.makeCost(rCount, cpuCost, ioCost);
    }"
8655527,minor,"    private IgniteFuture<UUID> startRemoteListenAsync(BinaryRawReaderEx reader, IgniteMessaging messaging) {
        Object nativeFilter = reader.readObjectDetached();

        long ptr = reader.readLong();  // interop pointer

        Object topic = reader.readObjectDetached();

        PlatformMessageFilter filter = platformCtx.createRemoteMessageFilter(nativeFilter, ptr);

        return messaging.remoteListenAsync(topic, filter);
    }"
5340257,minor,"    @Override
    public long exportTo(final ContentClaim claim, final Path destination, final boolean append, final long offset, final long length) throws IOException {
        if (claim == null) {
            if (append) {
                return 0L;
            }
            Files.createFile(destination);
            return 0L;
        }

        final StandardOpenOption openOption = append ? StandardOpenOption.APPEND : StandardOpenOption.CREATE;
        try (final InputStream in = read(claim);
                final OutputStream destinationStream = Files.newOutputStream(destination, openOption)) {

            if (offset > 0) {
                StreamUtils.skip(in, offset);
            }

            StreamUtils.copy(in, destinationStream, length);
            return length;
        }
    }"
8660273,minor,"        @Override
        public void addOptionValues(List<OptionValue> optionValues, Map<String, Object> context, Delegator delegator) {
            // first expand any conditions that need expanding based on the current context
            EntityCondition findCondition = null;
            if (UtilValidate.isNotEmpty(this.constraintList)) {
                List<EntityCondition> expandedConditionList = new LinkedList<>();
                for (EntityFinderUtil.Condition condition : constraintList) {
                    ModelEntity modelEntity = delegator.getModelEntity(this.entityName);
                    if (modelEntity == null) {
                        throw new IllegalArgumentException(""Error in entity-options: could not find entity ["" + this.entityName
                                + ""]"");
                    }
                    EntityCondition createdCondition = condition.createCondition(context, modelEntity,
                            delegator.getModelFieldTypeReader(modelEntity));
                    if (createdCondition != null) {
                        expandedConditionList.add(createdCondition);
                    }
                }
                findCondition = EntityCondition.makeCondition(expandedConditionList);
            }

            try {
                Locale locale = UtilMisc.ensureLocale(context.get(""locale""));
                ModelEntity modelEntity = delegator.getModelEntity(this.entityName);
                Boolean localizedOrderBy = UtilValidate.isNotEmpty(this.orderByList)
                        && ModelUtil.isPotentialLocalizedFields(modelEntity, this.orderByList);

                List<GenericValue> values = null;
                if (!localizedOrderBy) {
                    values = delegator.findList(this.entityName, findCondition, null, this.orderByList, null, this.cache);
                } else {
                    //if entity has localized label
                    values = delegator.findList(this.entityName, findCondition, null, null, null, this.cache);
                    values = EntityUtil.localizedOrderBy(values, this.orderByList, locale);
                }

                // filter-by-date if requested
                if (""true"".equals(this.filterByDate)) {
                    values = EntityUtil.filterByDate(values, true);
                } else if (!""false"".equals(this.filterByDate)) {
                    // not explicitly true or false, check to see if has fromDate and thruDate, if so do the filter
                    if (modelEntity != null && modelEntity.isField(""fromDate"") && modelEntity.isField(""thruDate"")) {
                        values = EntityUtil.filterByDate(values, true);
                    }
                }

                for (GenericValue value : values) {
                    // add key and description with string expansion, ie expanding ${} stuff, passing locale explicitly to expand value string because it won't be found in the Entity
                    MapStack<String> localContext = MapStack.create(context);
                    // Rendering code might try to modify the GenericEntity instance,
                    // so we make a copy of it.
                    Map<String, Object> genericEntityClone = UtilGenerics.cast(value.clone());
                    localContext.push(genericEntityClone);

                    // expand with the new localContext, which is locale aware
                    String optionDesc = this.description.expandString(localContext, locale);

                    Object keyFieldObject = value.get(this.getKeyFieldName());
                    if (keyFieldObject == null) {
                        throw new IllegalArgumentException(
                                ""The entity-options identifier (from key-name attribute, or default to the field name) [""
                                        + this.getKeyFieldName() + ""], may not be a valid key field name for the entity [""
                                        + this.entityName + ""]."");
                    }
                    String keyFieldValue = keyFieldObject.toString();
                    optionValues.add(new OptionValue(keyFieldValue, optionDesc));
                }
            } catch (GenericEntityException e) {
                Debug.logError(e, ""Error getting entity options in form"", module);
            }
        }"
8295253,minor,"    private QueryBuilder convertCustomFlagCriterion(SearchQuery.CustomFlagCriterion criterion) {
        QueryBuilder termQueryBuilder = termQuery(JsonMessageConstants.USER_FLAGS, criterion.getFlag());
        if (criterion.getOperator().isSet()) {
            return termQueryBuilder;
        } else {
            return boolQuery().mustNot(termQueryBuilder);
        }
    }"
9023034,minor,"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {
    ShardHandler shardHandler = null;

    CoreContainer cc = req.getCore().getCoreContainer();
    boolean isZkAware = cc.isZooKeeperAware();
    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);
    if (!rb.isDistrib) {
      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this
      // search is distributed.
      final String shards = req.getParams().get(ShardParams.SHARDS);
      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));
    }
    
    if (rb.isDistrib) {
      shardHandler = shardHandlerFactory.getShardHandler();
      shardHandler.prepDistributed(rb);
      if (!rb.isDistrib) {
        shardHandler = null; // request is not distributed after all and so the shard handler is not needed
      }
    }

    if (isZkAware) {
      String shardsTolerant = req.getParams().get(ShardParams.SHARDS_TOLERANT);
      boolean requireZkConnected = shardsTolerant != null && shardsTolerant.equals(ShardParams.REQUIRE_ZK_CONNECTED);
      ZkController zkController = cc.getZkController();
      boolean zkConnected = zkController != null && ! zkController.getZkClient().getConnectionManager().isLikelyExpired();
      if (requireZkConnected && false == zkConnected) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""ZooKeeper is not connected"");
      } else {
        NamedList<Object> headers = rb.rsp.getResponseHeader();
        if (headers != null) {
          headers.add(""zkConnected"", zkConnected);
        }
      }
    }

    return shardHandler;
  }"
6052388,minor,"	public static Dataset[] generateCoordinates(Dataset angles, final double[] geometricParameters) {
		if (geometricParameters.length != PARAMETERS)
			throw new IllegalArgumentException(""Need "" + PARAMETERS + "" parameters"");

		Dataset[] coords = new Dataset[2];

		DoubleDataset x = DatasetFactory.zeros(DoubleDataset.class, angles.getShape());
		DoubleDataset y = DatasetFactory.zeros(DoubleDataset.class, angles.getShape());
		coords[0] = x;
		coords[1] = y;

		final double ca = Math.cos(geometricParameters[2]);
		final double sa = Math.sin(geometricParameters[2]);
		final IndexIterator it = angles.getIterator();

		int i = 0;
		
		while (it.hasNext()) {
			final double t = angles.getElementDoubleAbs(it.index);
			final double ct = Math.cos(t);
			final double st = Math.sin(t);
			x.setAbs(i, geometricParameters[3] + geometricParameters[0]*ca*ct - geometricParameters[1]*sa*st);
			y.setAbs(i, geometricParameters[4] + geometricParameters[0]*sa*ct + geometricParameters[1]*ca*st);
			i++;
		}
		return coords;
	}"
6430791,minor,"    private void addDataAccessNodes(UaFolderNode rootNode) {
        // DataAccess folder
        UaFolderNode dataAccessFolder = new UaFolderNode(
            getNodeContext(),
            newNodeId(""HelloWorld/DataAccess""),
            newQualifiedName(""DataAccess""),
            LocalizedText.english(""DataAccess"")
        );

        getNodeManager().addNode(dataAccessFolder);
        rootNode.addOrganizes(dataAccessFolder);

        // AnalogItemType node
        try {
            AnalogItemNode node = (AnalogItemNode) getNodeFactory().createNode(
                newNodeId(""HelloWorld/DataAccess/AnalogValue""),
                Identifiers.AnalogItemType,
                true
            );

            node.setBrowseName(newQualifiedName(""AnalogValue""));
            node.setDisplayName(LocalizedText.english(""AnalogValue""));
            node.setDataType(Identifiers.Double);
            node.setValue(new DataValue(new Variant(3.14d)));

            node.setEURange(new Range(0.0, 100.0));

            getNodeManager().addNode(node);
            dataAccessFolder.addOrganizes(node);
        } catch (UaException e) {
            logger.error(""Error creating AnalogItemType instance: {}"", e.getMessage(), e);
        }
    }"
7944714,minor,"	protected JvmField createField(Field field) {
		JvmField result;
		int modifiers = field.getModifiers();
		if (!field.isEnumConstant()) {
			result = TypesFactory.eINSTANCE.createJvmField();
		} else
			result = TypesFactory.eINSTANCE.createJvmEnumerationLiteral();
		String fieldName = field.getName();
		result.internalSetIdentifier(field.getDeclaringClass().getName() + ""."" + fieldName);
		result.setSimpleName(fieldName);
		result.setFinal(Modifier.isFinal(modifiers));
		result.setStatic(Modifier.isStatic(modifiers));
		result.setTransient(Modifier.isTransient(modifiers));
		result.setVolatile(Modifier.isVolatile(modifiers));
		setVisibility(result, modifiers);
		Type fieldType = null;
		try {
			fieldType = field.getGenericType();
		} catch (GenericSignatureFormatError error) {
			logSignatureFormatError(field.getDeclaringClass());
			fieldType = field.getType();
		} catch (MalformedParameterizedTypeException error) {
			logSignatureFormatError(field.getDeclaringClass());
			fieldType = field.getType();
		}
		result.setType(createTypeReference(fieldType));
		createAnnotationValues(field, result);
		return result;
	}"
8095851,minor,"	@Override
	/** {@inheritDoc} */
	public IType getFieldType(final CompilationTimeStamp timestamp, final Reference reference, final int actualSubReference,
			final Expected_Value_type expectedIndex, final IReferenceChain refChain, final boolean interruptIfOptional) {
		final List<ISubReference> subreferences = reference.getSubreferences();
		if (subreferences.size() <= actualSubReference) {
			return this;
		}

		final ISubReference subreference = subreferences.get(actualSubReference);
		switch (subreference.getReferenceType()) {
		case arraySubReference:
			subreference.getLocation().reportSemanticError(MessageFormat.format(ArraySubReference.INVALIDSUBREFERENCE, getTypename()));
			return null;
		case fieldSubReference:
			subreference.getLocation().reportSemanticError(
					MessageFormat.format(FieldSubReference.INVALIDSUBREFERENCE, ((FieldSubReference) subreference).getId().getDisplayName(),
							getTypename()));
			return null;
		case parameterisedSubReference:
			subreference.getLocation().reportSemanticError(
					MessageFormat.format(FieldSubReference.INVALIDSUBREFERENCE, ((ParameterisedSubReference) subreference).getId().getDisplayName(),
							getTypename()));
			return null;
		default:
			subreference.getLocation().reportSemanticError(ISubReference.INVALIDSUBREFERENCE);
			return null;
		}
	}"
3922485,minor,"    public void connected(SocketChannel channel) throws IOException, Exception {
        this.channel = channel;

        if( codec !=null ) {
            initializeCodec();
        }

        this.channel.configureBlocking(false);
        this.remoteAddress = channel.socket().getRemoteSocketAddress().toString();
        channel.socket().setSoLinger(true, 0);
        channel.socket().setTcpNoDelay(true);

        this.socketState = new CONNECTED();
    }"
3807471,minor,"   @Override
   public String sendMessage(final Map<String, String> headers,
                             final int type,
                             final String body,
                             boolean durable,
                             final String user,
                             final String password) throws Exception {
      if (AuditLogger.isEnabled()) {
         AuditLogger.sendMessage(this, null, headers, type, body, durable, user, ""****"");
      }
      try {
         return sendMessage(addressInfo.getName(), server, headers, type, body, durable, user, password);
      } catch (Exception e) {
         e.printStackTrace();
         throw new IllegalStateException(e.getMessage());
      }
   }"
7002844,none,"  public static TimeOfYear fromDateTime(DateTime dateTime) {
    DateTime nextYear = dateTime.plusYears(1);  // This turns February 29 into February 28.
    TimeOfYear instance = new TimeOfYear();
    instance.timeString = String.format(
        ""%02d %02d %08d"",
        nextYear.getMonthOfYear(),
        nextYear.getDayOfMonth(),
        nextYear.getMillisOfDay());
    return instance;
  }"
4005583,none,"            public Component getTreeCellRendererComponent(JTree tree,
                                                          Object value,
                                                          boolean sel,
                                                          boolean expanded,
                                                          boolean leaf,
                                                          int row,
                                                          boolean hasFocus) {
                super.getTreeCellRendererComponent(tree, value, sel, expanded,
                                                   leaf, row, hasFocus);
                switch (getNodeType(value)) {
                case Node.ELEMENT_NODE:
                    setIcon(elementIcon);
                    break;
                case Node.COMMENT_NODE:
                    setIcon(commentIcon);
                    break;
                case Node.PROCESSING_INSTRUCTION_NODE:
                    setIcon(piIcon);
                    break;
                case Node.TEXT_NODE:
                case Node.CDATA_SECTION_NODE:
                    setIcon(textIcon);
                    break;
                }
                return this;
            }"
3964331,none,"  public void setMatchKeyList(ArrayList<String> matchKeyList)
  {
    this.matchKeyList = matchKeyList;
  }"
8201390,none,"	public IGrammarAwareElementType getCallExpression_LeftParenthesisKeyword_1_1ElementType() {
		return CallExpression_LeftParenthesisKeyword_1_1_ELEMENT_TYPE;
	}"
5875574,none,"    public String getToken() {
        return token;
    }"
6029853,none,"	public CertificateMessage(X509Certificate[] certificateChain, InetSocketAddress peerAddress) {
		super(peerAddress);
		if (certificateChain == null) {
			throw new NullPointerException(""Certificate chain must not be null"");
		} else {
			setCertificateChain(certificateChain);
			calculateLength();
		}
	}"
9320426,none,"    @Override
    public String toString() {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        writeTo(baos);
        return baos.toString();
    }"
4550371,none,"	@Override
	public void validateSelfUserAccountMapping(Long accountId) {

		if (!this.appuserSavingsMapperReadService.isSavingsMappedToUser(accountId,
				this.context.getAuthenticatedUserIfPresent().getId())) {
			throw new SavingsAccountNotFoundException(accountId);

		}
	}"
3992626,none,"    protected float removeInstanceTime(InstanceTime time, boolean isBegin) {
        // Trace.enter(this, ""removeInstanceTime"", new Object[] { time, new Boolean(isBegin) } ); try {
        hasPropagated = true;
        List instanceTimes = isBegin ? beginInstanceTimes : endInstanceTimes;
        int index = Collections.binarySearch(instanceTimes, time);
        for (int i = index; i >= 0; i--) {
            InstanceTime it = (InstanceTime) instanceTimes.get(i);
            if (it == time) {
                instanceTimes.remove(i);
                break;
            }
            if (it.compareTo(time) != 0) {
                break;
            }
        }
        int len = instanceTimes.size();
        for (int i = index + 1; i < len; i++) {
            InstanceTime it = (InstanceTime) instanceTimes.get(i);
            if (it == time) {
                instanceTimes.remove(i);
                break;
            }
            if (it.compareTo(time) != 0) {
                break;
            }
        }
        shouldUpdateCurrentInterval = true;
        float ret;
        if (root.isSampling() && !isSampling) {
            ret = sampleAt(root.getCurrentTime(), root.isHyperlinking());
        } else {
            ret = Float.POSITIVE_INFINITY;
        }
        hasPropagated = false;
        root.currentIntervalWillUpdate();
        return ret;
        // } finally { Trace.exit(); }
    }"
7879764,none,"  public static ImmutableMap<String, String> readClassMapping(Iterable<String> lines) {
    ImmutableMap.Builder<String, String> classMappingBuilder = ImmutableMap.builder();

    for (String line : lines) {
      if (line.charAt(0) == ' ') {
        // This is a member mapping, which we don't handle yet.
        continue;
      }

      Matcher matcher = CLASS_LINE_PATTERN.matcher(line);
      if (!matcher.matches()) {
        throw new IllegalArgumentException(""Invalid line in proguard mapping: "" + line);
      }

      classMappingBuilder.put(matcher.group(1), matcher.group(2));
    }

    return classMappingBuilder.build();
  }"
4445309,none,"    @Override
    public void startField() throws IOException {
      if (!skipNullFields || this.reader.isSet()) {
        if (fieldName.equals(Statistic.ROWCOUNT)
            || fieldName.equals(Statistic.NNROWCOUNT)
            || fieldName.equals(Statistic.NDV)
            || fieldName.equals(Statistic.SUM_DUPS)) {
          nextField = fieldName;
        }
      }
    }"
4691358,none,"    @Override
    public void enterBarrier(BSPJobID jobId, TaskAttemptID taskId,
        long superstep) throws SyncException {
      try {
        barrier.await();
      } catch (Exception e) {
        throw new SyncException(e.toString());
      }
    }"
8148121,none,"    private static int characterSet(String stmt, int offset, int depth) {
        if (stmt.length() > offset + 14) {
            char c1 = stmt.charAt(++offset);
            char c2 = stmt.charAt(++offset);
            char c3 = stmt.charAt(++offset);
            char c4 = stmt.charAt(++offset);
            char c5 = stmt.charAt(++offset);
            char c6 = stmt.charAt(++offset);
            char c7 = stmt.charAt(++offset);
            char c8 = stmt.charAt(++offset);
            char c9 = stmt.charAt(++offset);
            char c10 = stmt.charAt(++offset);
            char c11 = stmt.charAt(++offset);
            char c12 = stmt.charAt(++offset);
            char c13 = stmt.charAt(++offset);
            char c14 = stmt.charAt(++offset);
            if ((c1 == 'H' || c1 == 'h') && (c2 == 'A' || c2 == 'a') && (c3 == 'R' || c3 == 'r')
                    && (c4 == 'A' || c4 == 'a') && (c5 == 'C' || c5 == 'c') && (c6 == 'T' || c6 == 't')
                    && (c7 == 'E' || c7 == 'e') && (c8 == 'R' || c8 == 'r') && (c9 == '_')
                    && (c10 == 'S' || c10 == 's') && (c11 == 'E' || c11 == 'e') && (c12 == 'T' || c12 == 't')
                    && (c13 == '_')) {
                switch (c14) {
                case 'R':
                case 'r':
                    return characterSetResults(stmt, offset);
                case 'C':
                case 'c':
                    return characterSetC(stmt, offset);
                default:
                    return OTHER;
                }
            }
        }
        return OTHER;
    }"
6243619,none,"    public IAnnulusWedgeCriteria create() {
        switch (this) {
        case LEAF_NUMBER:
            return new AnnulusWedgeByLeafs();
        case NODE_SIZE:
            return new AnnulusWedgeByNodeSpace();
        default:
            throw new IllegalArgumentException(
                    ""No implementation is available for the layout option "" + this.toString());
        }
    }"
3930845,none,"    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }"
7525975,none,"	String toString(boolean appended) {

		if (variables.isEmpty()) {
			return """";
		}

		StringBuilder builder = new StringBuilder();
		TemplateVariable previous = null;

		for (TemplateVariable variable : variables) {

			VariableType type = variable.getType();
			type = appended && type.equals(REQUEST_PARAM) ? REQUEST_PARAM_CONTINUED : type;

			if (previous == null) {
				builder.append(""{"").append(type.toString());
			} else if (!previous.isCombinable(variable)) {
				builder.append(""}{"").append(type.toString());
			} else {
				builder.append("","");
			}

			previous = variable;
			builder.append(variable.getName());
		}

		return builder.append(""}"").toString();
	}"
7678894,none,"	public String newlineWithIndent(int indent) {
		StringBuilder buf = new StringBuilder();
		addNewlineWithIndent(indent, buf);
		return buf.toString();
	}"
4188059,none,"    public DbRelationship(String name) {
        super(name);
    }"
7563653,none,"		@Override
		@Nullable
		public Class<?> getBeanType() {
			return this.adviceBean.getBeanType();
		}"
5782140,none,"    @Override
    public void onVertexManagerEventReceived(VertexManagerEvent vmEvent)
        throws Exception {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""onVertexManagerEventReceived is invoked in NoOpVertexManager, vertex="" + getContext().getVertexName());
      }
    }"
8051978,none,"    public final void rule__ParserRuleParameters__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalTwoParametersTestLanguage.g:1073:1: ( rule__ParserRuleParameters__Group_1_2__1__Impl )
            // InternalTwoParametersTestLanguage.g:1074:2: rule__ParserRuleParameters__Group_1_2__1__Impl
            {
            pushFollow(FollowSets000.FOLLOW_2);
            rule__ParserRuleParameters__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
5480114,none,"    private void validateNodeAutoCreationPolicy(final NodeAutoCreationPolicy policy)
    {
        String pattern = policy.getPattern();
        if(pattern == null)
        {
            throw new IllegalArgumentException(""The 'pattern' attribute of a NodeAutoCreationPolicy MUST be supplied: "" + policy);
        }

        try
        {
            Pattern.compile(pattern);
        }
        catch (PatternSyntaxException e)
        {
            throw new IllegalArgumentException(""The 'pattern' attribute of a NodeAutoCreationPolicy MUST be a valid ""
                                               + ""Java Regular Expression Pattern, the value '"" + pattern + ""' is not: "" + policy);

        }

        String nodeType = policy.getNodeType();
        Class<? extends ConfiguredObject> sourceClass = null;
        for (Class<? extends ConfiguredObject> childClass : getModel().getChildTypes(getCategoryClass()))
        {
            if (childClass.getSimpleName().equalsIgnoreCase(nodeType.trim()))
            {
                sourceClass = childClass;
                break;
            }
        }
        if(sourceClass == null)
        {
            throw new IllegalArgumentException(""The node type of a NodeAutoCreationPolicy must be a valid child type ""
                                               + ""of a VirtualHost, '"" + nodeType + ""' is not."");
        }
        if(policy.isCreatedOnConsume() && !MessageSource.class.isAssignableFrom(sourceClass))
        {
            throw new IllegalArgumentException(""A NodeAutoCreationPolicy which creates nodes on consume must have a ""
                                               + ""nodeType which implements MessageSource, '"" + nodeType + ""' does not."");
        }

        if(policy.isCreatedOnPublish() && !MessageDestination.class.isAssignableFrom(sourceClass))
        {
            throw new IllegalArgumentException(""A NodeAutoCreationPolicy which creates nodes on publish must have a ""
                                               + ""nodeType which implements MessageDestination, '"" + nodeType + ""' does not."");
        }
        if(!(policy.isCreatedOnConsume() || policy.isCreatedOnPublish()))
        {
            throw new IllegalArgumentException(""A NodeAutoCreationPolicy must create on consume, create on publish or both."");
        }

    }"
9303905,none,"        private static boolean isMetaName(byte[] name, int off, int len) {
            // Use the ""oldest ASCII trick in the book""
            return len > 9                     // ""META-INF/"".length()
                && name[off + len - 1] != '/'  // non-directory
                && (name[off++] | 0x20) == 'm'
                && (name[off++] | 0x20) == 'e'
                && (name[off++] | 0x20) == 't'
                && (name[off++] | 0x20) == 'a'
                && (name[off++]       ) == '-'
                && (name[off++] | 0x20) == 'i'
                && (name[off++] | 0x20) == 'n'
                && (name[off++] | 0x20) == 'f'
                && (name[off]         ) == '/';
        }"
3961246,none,"        @Override
        public Consumer build(BlockingQueue<JsonNode> queue) {
            return (isResuming)
                    ? new ResumingConsumer(queue, graph, bulkLoadGraph, parseElement, batchSize)
                    : new Consumer(queue, graph, bulkLoadGraph, parseElement, batchSize);
        }"
7979179,none,"    public final void mT__15() throws RecognitionException {
        try {
            int _type = T__15;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalBug288734TestLanguage.g:15:7: ( '@desc' )
            // InternalBug288734TestLanguage.g:15:9: '@desc'
            {
            match(""@desc""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
7674551,none,"    protected void configWebView(QMUIWebViewContainer webViewContainer, QMUIWebView webView) {

    }"
4553122,none,"    @Transactional
    @Override
    public CommandProcessingResult processCommand(JsonCommand jsonCommand) {
        return this.shareProductWritePlatformService.deleteShareProductDividend(jsonCommand.entityId());
    }"
7782013,none,"	@Override
	public void setContentLength(final int length)
	{
		setIntHeader(""Content-Length"", length);
	}"
7484147,none,"	public Customer888(String firstName, String lastName) {
		this.firstName = firstName;
		this.lastName = lastName;
	}"
4345368,none,"    public OutputStream setBinaryStream(long arg0) throws SQLException {
        throw new SQLException(""not implemented for this test"");
    }"
7473205,none,	protected Customer377() {}
8039190,none,"    public final void mT__60() throws RecognitionException {
        try {
            int _type = T__60;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalSequencerTestLanguage.g:57:7: ( 'kwp3' )
            // InternalSequencerTestLanguage.g:57:9: 'kwp3'
            {
            match(""kwp3""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
8976668,none,"  @Override
  protected void securityConfEdited() {
    // Need to call explicitly since we will not get notified of changes to local security.json
    cores.securityNodeChanged();
  }"
8566692,none,"  @Override
  public boolean hasReferences() {
    // Grab the read lock here, because we need to ensure that: only when the atomic
    // replaceStoreFiles(..) finished, we can get all the complete store file list.
    this.lock.readLock().lock();
    try {
      // Merge the current store files with compacted files here due to HBASE-20940.
      Collection<HStoreFile> allStoreFiles = new ArrayList<>(getStorefiles());
      allStoreFiles.addAll(getCompactedFiles());
      return StoreUtils.hasReferences(allStoreFiles);
    } finally {
      this.lock.readLock().unlock();
    }
  }"
3743029,none,"    public int incrementAndGetVariantIndex() {
        return ++variantIndex;
    }"
7580470,none,"	static ResolvableType forType(
			@Nullable Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {

		if (type == null && typeProvider != null) {
			type = SerializableTypeWrapper.forTypeProvider(typeProvider);
		}
		if (type == null) {
			return NONE;
		}

		// For simple Class references, build the wrapper right away -
		// no expensive resolution necessary, so not worth caching...
		if (type instanceof Class) {
			return new ResolvableType(type, typeProvider, variableResolver, (ResolvableType) null);
		}

		// Purge empty entries on access since we don't have a clean-up thread or the like.
		cache.purgeUnreferencedEntries();

		// Check the cache - we may have a ResolvableType which has been resolved before...
		ResolvableType resultType = new ResolvableType(type, typeProvider, variableResolver);
		ResolvableType cachedType = cache.get(resultType);
		if (cachedType == null) {
			cachedType = new ResolvableType(type, typeProvider, variableResolver, resultType.hash);
			cache.put(cachedType, cachedType);
		}
		resultType.resolved = cachedType.resolved;
		return resultType;
	}"
7107337,none,"    private boolean namedNodeMapsEqual(NamedNodeMap a, NamedNodeMap b) {
        if (a.getLength() != b.getLength()) {
            return false;
        }
        for (int i = 0; i < a.getLength(); i++) {
            Node aNode = a.item(i);
            Node bNode = aNode.getLocalName() == null
                    ? b.getNamedItem(aNode.getNodeName())
                    : b.getNamedItemNS(aNode.getNamespaceURI(), aNode.getLocalName());
            if (bNode == null || !aNode.isEqualNode(bNode)) {
                return false;
            }
        }
        return true;
    }"
7909952,none,"  public static SourcePath createEmptyInitModule(
      BuildTarget buildTarget,
      ProjectFilesystem projectFilesystem,
      ActionGraphBuilder graphBuilder) {
    BuildTarget emptyInitTarget = getEmptyInitTarget(buildTarget);
    Path emptyInitPath =
        BuildTargetPaths.getGenPath(projectFilesystem, buildTarget, ""%s/__init__.py"");
    WriteFile rule =
        graphBuilder.addToIndex(
            new WriteFile(
                emptyInitTarget, projectFilesystem, """", emptyInitPath, /* executable */ false));
    return rule.getSourcePathToOutput();
  }"
7528643,none,"	public SqsMessageHandler(AmazonSQSAsync amazonSqs, ResourceIdResolver resourceIdResolver) {
		this(amazonSqs, new DynamicQueueUrlDestinationResolver(amazonSqs, resourceIdResolver));
	}"
5604954,none,"    @Override
    public XSSFRichTextString createRichTextString(String text) {
        XSSFRichTextString rt = new XSSFRichTextString(text);
        rt.setStylesTableReference(workbook.getStylesSource());
        return rt;
    }"
6964408,none,"    @Override
    public void forEach(Consumer<? super E> action) {
      synchronized (mutex) {
        delegate().forEach(action);
      }
    }"
7345031,none,"    public ServiceDefinition[] findServicesByToolID(final String toolId) {
        try {
            ensureDiskCacheLoaded();
            accessLock.readLock().lock();

            final boolean returnAll = toolId == null || toolId.length() == 0;
            final List<ServiceDefinition> requestedDefinitions = new ArrayList<ServiceDefinition>();

            // Iterate the map of service types. Values are a map of service
            // instances.
            for (final Map<GUID, ServiceDefinition> mapServiceInstances : mapServices.values()) {
                for (final ServiceDefinition definition : mapServiceInstances.values()) {
                    /*
                     * NB! some service definitions in Dev12 QU1 may have null
                     * ToolID
                     */
                    if (returnAll || toolId.equalsIgnoreCase(definition.getToolID())) {
                        requestedDefinitions.add((ServiceDefinition) definition.clone());
                    }
                }
            }

            // Return null if no matching definitions were found.
            if (requestedDefinitions.size() == 0) {
                return null;
            }

            // Return an array of the matching service definitions.
            return requestedDefinitions.toArray(new ServiceDefinition[requestedDefinitions.size()]);
        } finally {
            accessLock.readLock().unlock();
        }
    }"
6850124,none,"  public CGraphPanelSynchronizer(final CGraphModel model, final CGraphWindowMenuBar menuBar) {
    m_model = Preconditions.checkNotNull(model, ""IE01618: Model argument can not be null"");
    m_menuBar = Preconditions.checkNotNull(menuBar, ""IE01620: Menu bar argument can not be null"");

    m_clickHandler = new CNodeClickHandler(model);

    m_model.getGraph().addListener(m_graphListener);
    m_model.getGraph().getRawView().addListener(m_viewListener);
  }"
7720540,none,"    public String getHost() {
        return host;
    }"
7602224,none,"	public void moveConfigDown(IBeansConfig config) {
		String configName = config.getElementName();
		if (configNames.contains(configName)) {
			ArrayList<String> newConfigNames = new ArrayList<String>(
					configNames);
			int index = newConfigNames.indexOf(configName);
			if (index < (configNames.size() - 1)) {
				newConfigNames.remove(configName);
				newConfigNames.add(index + 1, configName);
				configNames.clear();
				configNames.addAll(newConfigNames);
				notifyListeners();
			}
		}
	}"
6782933,none,"  private static InputStream inputStreamFromJar(URL resourceUrl)
      throws URISyntaxException, IOException {
    // Jar URLs look like this: jar:file:/path/to/file.jar!/entry/within/jar
    // So take apart the URL to open the jar /path/to/file.jar and read the entry
    // entry/within/jar from it.
    String resourceUrlString = resourceUrl.toString().substring(""jar:"".length());
    int bang = resourceUrlString.lastIndexOf('!');
    String entryName = resourceUrlString.substring(bang + 1);
    if (entryName.startsWith(""/"")) {
      entryName = entryName.substring(1);
    }
    URI jarUri = new URI(resourceUrlString.substring(0, bang));
    JarFile jar = new JarFile(new File(jarUri));
    JarEntry entry = jar.getJarEntry(entryName);
    InputStream in = jar.getInputStream(entry);
    // We have to be careful not to close the JarFile before the stream has been read, because
    // that would also close the stream. So we defer closing the JarFile until the stream is closed.
    return new FilterInputStream(in) {
      @Override
      public void close() throws IOException {
        super.close();
        jar.close();
      }
    };
  }"
8916223,none,"    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_o1 = true && (isSetO1());
      list.add(present_o1);
      if (present_o1)
        list.add(o1);

      boolean present_o2 = true && (isSetO2());
      list.add(present_o2);
      if (present_o2)
        list.add(o2);

      return list.hashCode();
    }"
5788107,none,"    public String getImageMagickPath() {

        return imageMagickPath;
    }"
7641912,none,"	public void testSynchronizationGlobal() throws Exception {
		SecurityContextHolder.clearContext();
		SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_GLOBAL);
		loadStartAndWaitForThreads(true, ""Main_"", NUM_THREADS, true, false);
		assertThat(errors).as(""Thread errors detected; review log output for details"").isZero();
	}"
4298660,none,"    public void timeout( Integer timeout ) throws ValidationException
    {
        if ( ( timeout < 0 ) || ( timeout >= Integer.MAX_VALUE ) )
        {
            String error = ""timeout - invalid timeout value ["" + timeout + ""]"";
            throw new ValidationException( GlobalErrIds.CONST_TIMEOUT_INVLD, error );
        }
    }"
5232497,none,"   public void crawl(File dirRoot) {
      LOG.info(String.format(""Start crawling dir: %s"", dirRoot));

      // Reset ingest status.a

      ingestStatus.clear();

      // Load actions.
      loadAndValidateActions();

      // Create Ingester.
      setupIngester();

      // Verify valid crawl directory.
      if (dirRoot == null || !dirRoot.exists()) {
         throw new IllegalArgumentException(""dir root is null or non existant!"");
      }

      // Start crawling.
      Stack<File> stack = new Stack<File>();
      stack.push(dirRoot.isDirectory() ? dirRoot : dirRoot.getParentFile());
      while (!stack.isEmpty()) {
         File dir = (File) stack.pop();
         LOG.log(Level.INFO, ""Crawling "" + dir);

         File[] productFiles;
         productFiles = isCrawlForDirs() ? dir.listFiles(DIR_FILTER) : dir.listFiles(FILE_FILTER);

         if(productFiles!=null) {
            for (File productFile : productFiles) {
               ingestStatus.add(handleFile(productFile));
            }
         }

         if (!isNoRecur()) {
            File[] subdirs = dir.listFiles(DIR_FILTER);
            if (subdirs != null) {
               for (File subdir : subdirs) {
                  stack.push(subdir);
               }
            }
         }
      }

      LOG.info(String.format(""Finished crawling dir: %s"", dirRoot));
   }"
7627967,none,"	@SuppressWarnings(""unchecked"")
	public static <T> T getParentOfClass(IModelElement child, Class<T> parentType) {
		if (child != null) {
			IModelElement parent = child.getElementParent();
			while (parent != null) {
				if (parentType.isAssignableFrom(parent.getClass())) {
					return (T) parent;
				}
				parent = parent.getElementParent();
			}
		}
		return null;
	}"
3739360,none,"    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        checkState();

        PreparedStatementHolder stmtHolder = null;
        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.Precall_1);

        boolean poolPreparedStatements = holder.isPoolPreparedStatements();

        if (poolPreparedStatements) {
            stmtHolder = holder.getStatementPool().get(key);
        }

        if (stmtHolder == null) {
            try {
                stmtHolder = new PreparedStatementHolder(key, conn.prepareCall(sql));
                holder.getDataSource().incrementPreparedStatementCount();
            } catch (SQLException ex) {
                handleException(ex, sql);
            }
        }

        initStatement(stmtHolder);

        DruidPooledCallableStatement rtnVal = new DruidPooledCallableStatement(this, stmtHolder);

        holder.addTrace(rtnVal);

        return rtnVal;
    }"
6212333,none,"  public MouseEvent getEvent() {
    return event;
  }"
8673459,none,"    public void onRemove(){
        rmCnt.incrementAndGet();

        if (delegate != null)
            delegate.onRemove();
    }"
5449838,none,"    @GET
    @ApiOperation(
            value = ""Downloads Pulsar Function file data"",
            hidden = true
    )
    @Path(""/download"")
    public StreamingOutput downloadFunction(final @QueryParam(""path"") String path) {
        return functions.downloadFunction(path);
    }"
5412639,none,"    public String submit() {
        invocation.getMethodParameters().clear();
        for (ParameterInfo info : methodParameters) {
            invocation.getMethodParameters().add(info.getValue());
        }
        methodParameters.clear();
        methodParameters = null;
        return ""ejb-invoker?faces-redirect=true"";
    }"
4265826,none,"    public TextStringBuilder appendln(final boolean value) {
        return append(value).appendNewLine();
    }"
5535647,none,"  default V get(K key) {
    try {
      return getAsync(key).get();
    } catch (InterruptedException | ExecutionException e) {
      throw new SamzaException(""GET failed for "" + key, e);
    }
  }"
4634029,none,"  public int hashCode() {
    int result = cookie.hashCode();

    for (String file : files) {
      result = PRIME * result + file.hashCode();
    }

    return result;
  }"
4546223,none,"    @Override
    public void stopScheduler(final String name) {
        final Scheduler scheduler = this.schedulers.remove(name);
        try {
            scheduler.shutdown();
        } catch (final SchedulerException e) {
            logger.error(e.getMessage(), e);
        }
    }"
4386725,none,"    private void validate()
    {
        setPageComplete( getApplyOnDns() != null || spw.isValid() );
        setErrorMessage( searchButton.getSelection() ? spw.getErrorMessage() : null );
    }"
7301073,none,"    public NonFatalErrorHelper(final Workspace workspace) {
        Check.notNull(workspace, ""workspace""); //$NON-NLS-1$

        this.workspace = workspace;

        workspace.getClient().getEventEngine().addNonFatalErrorListener(listener);
    }"
5366640,none,"    public PigServer(PigContext context, boolean connect) throws ExecException {
        this.pigContext = context;
        currDAG = new Graph(false);

        jobName = pigContext.getProperties().getProperty(
                PigContext.JOB_NAME,
                PigContext.JOB_NAME_PREFIX + "":DefaultJobName"");

        if (connect) {
            pigContext.connect();
        }

        this.filter = new BlackAndWhitelistFilter(this);

        addHadoopProperties();
        addJarsFromProperties();
        markPredeployedJarsFromProperties();

        if (ScriptState.get() == null) {
            // If Pig was started via command line, ScriptState should have been
            // already initialized in Main. If so, we should not overwrite it.
            ScriptState.start(pigContext.getExecutionEngine().instantiateScriptState());
        }
        PigStats.start(pigContext.getExecutionEngine().instantiatePigStats());

        // log ATS event includes the caller context
        String auditId = PigATSClient.getPigAuditId(pigContext);
        String callerId = (String)pigContext.getProperties().get(PigConfiguration.PIG_LOG_TRACE_ID);
        log.info(""Pig Script ID for the session: "" + auditId);
        if (callerId != null) {
            log.info(""Caller ID for session: "" + callerId);
        }
        if (Boolean.parseBoolean(pigContext.getProperties()
                .getProperty(PigConfiguration.PIG_ATS_ENABLED))) {
            if (Boolean.parseBoolean(pigContext.getProperties()
                    .getProperty(""yarn.timeline-service.enabled"", ""false""))) {
                PigATSClient.ATSEvent event = new PigATSClient.ATSEvent(auditId, callerId);
                try {
                    PigATSClient.getInstance().logEvent(event);
                } catch (Exception e) {
                    log.warn(""Error posting to ATS: "", e);
                }
            } else {
                log.warn(""ATS is disabled since""
                        + "" yarn.timeline-service.enabled set to false"");
            }

        }

        // set hdfs caller context
        Class callerContextClass = null;
        try {
            callerContextClass = Class.forName(""org.apache.hadoop.ipc.CallerContext"");
        } catch (ClassNotFoundException e) {
            // If pre-Hadoop 2.8.0, skip setting CallerContext
        }
        if (callerContextClass != null) {
            try {
                // Reflection for the following code since it is only available since hadoop 2.8.0:
                // CallerContext hdfsContext = new CallerContext.Builder(auditId).build();
                // CallerContext.setCurrent(hdfsContext);
                Class callerContextBuilderClass = Class.forName(""org.apache.hadoop.ipc.CallerContext$Builder"");
                Constructor callerContextBuilderConstruct = callerContextBuilderClass.getConstructor(String.class);
                Object builder = callerContextBuilderConstruct.newInstance(auditId);
                Method builderBuildMethod = builder.getClass().getMethod(""build"");
                Object hdfsContext = builderBuildMethod.invoke(builder);
                Method callerContextSetCurrentMethod = callerContextClass.getMethod(""setCurrent"", hdfsContext.getClass());
                callerContextSetCurrentMethod.invoke(callerContextClass, hdfsContext);
            } catch (Exception e) {
                // Shall not happen unless API change in future Hadoop commons
                throw new ExecException(e);
            }
        }
    }"
8625002,none,"    @Override public <K1, V1> GridCacheProxyImpl<K1, V1> keepBinary() {
        if (opCtx != null && opCtx.isKeepBinary())
            return (GridCacheProxyImpl<K1, V1>)this;

        return new GridCacheProxyImpl<>((GridCacheContext<K1, V1>)ctx,
            (GridCacheAdapter<K1, V1>)delegate,
            opCtx != null ? opCtx.keepBinary() :
                new CacheOperationContext(false, null, true, null, false, null, false, DFLT_ALLOW_ATOMIC_OPS_IN_TX));
    }"
8934890,none,"    @Override
    public AggregationBuffer getNewAggregationBuffer() throws HiveException {
      NGramAggBuf result = new NGramAggBuf();
      result.nge = new NGramEstimator();
      reset(result);
      return result;
    }"
8049687,none,"    public final void rule__XCastedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXbaseWithAnnotations.g:6835:1: ( rule__XCastedExpression__Group__1__Impl )
            // InternalXbaseWithAnnotations.g:6836:2: rule__XCastedExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
7587149,none,"  private Reference getReference(final Attributes attributes) {
    return new Reference(attributes.getValue(DatabaseXmlUtils.LOCAL),
        attributes.getValue(DatabaseXmlUtils.FOREIGN));
  }"
7400506,none,"    public int rewindUpTo(VirtualFrame frame, int length) {
        if (props.isForward()) {
            final int offset = Math.min(getIndex(frame), length);
            setIndex(frame, getIndex(frame) - offset);
            return offset;
        } else {
            assert length == 0;
            return 0;
        }
    }"
9519320,none,"    @Override
    public UL<T> $onmousedown(String value) {
      addAttr(""onmousedown"", value);
      return this;
    }"
7294667,none,"	private boolean isGrailsLaunch(ILaunchConfiguration launchConfiguration) {
		try {
			ILaunchConfigurationType type = launchConfiguration.getType();
			return GrailsCoreActivator.PLUGIN_ID.equals(type.getPluginIdentifier());
		} catch (CoreException ex) {
			return false;
		}
	}"
4140046,none,"    protected RexNode makeMultiply(
        RexNode a,
        RexNode b) {
      return builder.makeCall(
          SqlStdOperatorTable.MULTIPLY,
          a,
          b);
    }"
9245741,none,"        @Override
        protected void uninstallListeners(JComponent scrollPane) {
            super.uninstallListeners(scrollPane);
            scrollPane.removePropertyChangeListener(propertyChangeHandler);
        }"
7520782,none,"	@Override
	public SecurityConfigurer<I> namenodePrincipal(String principal) {
		if (StringUtils.hasText(principal)) {
			hadoopSecurity.setNamenodePrincipal(principal);
		}
		return this;
	}"
4232438,none,"    @Override
    public void nextBytes(byte[] bytes) {
        
        synchronized (OpenSslJnaCryptoRandom.class) {
            //this method is synchronized for now
            //to support multithreading https://wiki.openssl.org/index.php/Manual:Threads(3) needs to be done
            
            if(rdrandEnabled && OpenSslNativeJna.RAND_get_rand_method().equals(OpenSslNativeJna.RAND_SSLeay())) {
                close();
                throw new RuntimeException(""rdrand should be used but default is detected"");
            }

            ByteBuffer buf = ByteBuffer.allocateDirect(bytes.length);
            int retVal = OpenSslNativeJna.RAND_bytes(buf, bytes.length);
            throwOnError(retVal);
            buf.rewind();
            buf.get(bytes,0, bytes.length);
        }
    }"
7495599,none,"	@Override
	public Long zRemRangeByScore(byte[] key, double min, double max) {
		return convertAndReturn(delegate.zRemRangeByScore(key, min, max), identityConverter);
	}"
5843392,none,"  public JavaCharStream(java.io.InputStream dstream, String encoding, int startline,
  int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException
  {
    this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }"
8845205,none,"      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
        return fields;
      }"
8934244,none,"    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      }
      throw new IllegalStateException();
    }"
6823557,none,"    public final void norm3_RelationalExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); 
            }
            loop421:
            do {
                int alt421=2;
                int LA421_0 = input.LA(1);

                if ( (LA421_0==GreaterThanSign) ) {
                    int LA421_2 = input.LA(2);

                    if ( ((LA421_2>=Intersection && LA421_2<=Implements)||(LA421_2>=Promisify && LA421_2<=Abstract)||(LA421_2>=External && LA421_2<=Function)||(LA421_2>=Private && LA421_2<=Delete)||LA421_2==Public||LA421_2==Static||(LA421_2>=Target && LA421_2<=Await)||LA421_2==Class||(LA421_2>=False && LA421_2<=Super)||LA421_2==Union||LA421_2==This||(LA421_2>=From && LA421_2<=Void)||(LA421_2>=Get && LA421_2<=Set)||LA421_2==PlusSignPlusSign||LA421_2==HyphenMinusHyphenMinus||LA421_2==SolidusEqualsSign||LA421_2==As||LA421_2==Of||LA421_2==ExclamationMark||LA421_2==LeftParenthesis||LA421_2==PlusSign||LA421_2==HyphenMinus||LA421_2==Solidus||(LA421_2>=LessThanSign && LA421_2<=EqualsSign)||(LA421_2>=CommercialAt && LA421_2<=LeftSquareBracket)||LA421_2==LeftCurlyBracket||LA421_2==Tilde||LA421_2==RULE_DOUBLE||(LA421_2>=RULE_HEX_INT && LA421_2<=RULE_LEGACY_OCTAL_INT)||LA421_2==RULE_SCIENTIFIC_INT||LA421_2==RULE_IDENTIFIER||LA421_2==RULE_STRING||(LA421_2>=RULE_TEMPLATE_HEAD && LA421_2<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_2==RULE_INT) ) {
                        alt421=1;
                    }


                }
                else if ( (LA421_0==Instanceof||LA421_0==LessThanSignEqualsSign||LA421_0==In||LA421_0==LessThanSign) ) {
                    alt421=1;
                }


                switch (alt421) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_126);
            	    norm3_RelationalExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop421;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
9094331,none,"        Warning(String message, Object call) {
            this.message = message;
            this.call = call;
        }"
9421769,none,"    public JCNewClass SpeculativeNewClass(JCExpression encl,
                             List<JCExpression> typeargs,
                             JCExpression clazz,
                             List<JCExpression> args,
                             JCClassDecl def,
                             boolean classDefRemoved)
    {
        JCNewClass tree = classDefRemoved ?
                new JCNewClass(encl, typeargs, clazz, args, def) {
                    @Override
                    public boolean classDeclRemoved() {
                        return true;
                    }
                } :
                new JCNewClass(encl, typeargs, clazz, args, def);
        tree.pos = pos;
        return tree;
    }"
4613952,none,"    public static boolean disjoint(Iterable left, Iterable right) {
        Collection leftCol = asCollection(left);
        Collection rightCol = asCollection(right);

        if (leftCol.isEmpty() || rightCol.isEmpty())
            return true;

        Collection pickFrom = new TreeSet(new NumberAwareComparator());
        pickFrom.addAll(rightCol);

        for (final Object o : leftCol) {
            if (pickFrom.contains(o))
                return false;
        }
        return true;
    }"
6455346,none,"	private void addUTF8Region(StructurePointer clazz, String slotName,
			String additionalInfo, AbstractPointer utf8String)
			throws CorruptDataException {
		long offset = utf8String.getAddress() - clazz.getAddress();
		/* We do not want to print UTF8 outside of the ROM class. */
		long clazzSize = ((J9ROMClassPointer) clazz).romSize().longValue();
		if ((offset > 0) && (offset < clazzSize)) {
			if (utf8String.notNull()) {
				long UTF8Length = getUTF8Length(J9UTF8Pointer.cast(utf8String));
				if (utf8String.getAddress() < firstJ9_ROM_UTF8) {
					firstJ9_ROM_UTF8 = utf8String.getAddress();
				}
				if ((utf8String.getAddress() + UTF8Length) > lastJ9_ROM_UTF8) {
					lastJ9_ROM_UTF8 = utf8String.getAddress() + UTF8Length;
				}
				classRegions.add(new J9ClassRegion(utf8String,
						SlotType.J9_ROM_UTF8, slotName, additionalInfo,
						UTF8Length, offset, true));
			}
		}
	}"
9224077,none,"    private PhysicalFont findDeferredFont(String name, int style) {
        PhysicalFont physicalFont = findJREDeferredFont(name, style);
        if (physicalFont != null) {
            return physicalFont;
        } else {
            return findOtherDeferredFont(name, style);
        }
    }"
7359431,none,"    public _Failure[] getFailures()
    {
        return this.failures;
    }"
5476379,none,"    @Override
    public UUID[] remove(final ConfiguredObjectRecord... objects)
    {
        assertState(State.OPEN);
        List<UUID> removed = new ArrayList<UUID>();
        for (ConfiguredObjectRecord record : objects)
        {
            if (_configuredObjectRecords.remove(record.getId()) != null)
            {
                removed.add(record.getId());
            }
        }
        return removed.toArray(new UUID[removed.size()]);
    }"
7379790,none,"	@Override
	public boolean supportsParameter(MethodParameter parameter) {

		if (!super.supportsParameter(parameter)) {
			return false;
		}

		Class<?> type = parameter.getParameterType();

		if (!type.isInterface()) {
			return false;
		}

		// Annotated parameter
		if (parameter.getParameterAnnotation(ProjectedPayload.class) != null) {
			return true;
		}

		// Annotated type
		if (AnnotatedElementUtils.findMergedAnnotation(type, ProjectedPayload.class) != null) {
			return true;
		}

		// Fallback for only user defined interfaces
		String packageName = ClassUtils.getPackageName(type);

		return !IGNORED_PACKAGES.stream().anyMatch(it -> packageName.startsWith(it));
	}"
5422127,none,"        @Override
        public Component getNextComponent(final Container container, final Component component,
            final FocusTraversalDirection direction) {
            Utils.checkNull(container, ""container"");
            Utils.checkNull(direction, ""direction"");

            Component nextComponent = null;

            int n = container.getLength();
            if (n > 0) {
                switch (direction) {
                    case FORWARD:
                        if (component == null) {
                            // Return the first component in the sequence
                            nextComponent = container.get(0);
                        } else {
                            // Return the next component in the sequence
                            int index = container.indexOf(component);
                            if (index == -1) {
                                throw new IllegalArgumentException(""Component is not a child of the container."");
                            }

                            if (index < n - 1) {
                                nextComponent = container.get(index + 1);
                            } else {
                                if (wrap) {
                                    nextComponent = container.get(0);
                                }
                            }
                        }

                        break;

                    case BACKWARD:
                        if (component == null) {
                            // Return the last component in the sequence
                            nextComponent = container.get(n - 1);
                        } else {
                            // Return the previous component in the sequence
                            int index = container.indexOf(component);
                            if (index == -1) {
                                throw new IllegalArgumentException(""Component is not a child of the container."");
                            }

                            if (index > 0) {
                                nextComponent = container.get(index - 1);
                            } else {
                                if (wrap) {
                                    nextComponent = container.get(n - 1);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }
            }

            return nextComponent;
        }"
5548181,none,"  @VisibleForTesting
   Set<MPath> getMAuthzPaths(long authzSnapshotID, String authzObj) throws Exception {
    return tm.executeTransactionWithRetry( pm -> {
      MAuthzPathsMapping mapping = null;
      pm.setDetachAllOnCommit(true); // No need to detach objects
      mapping = getMAuthzPathsMappingCore(pm, authzSnapshotID, authzObj);
      if(mapping != null) {
        Set<MPath> paths = mapping.getPathsPersisted();
        return paths;
      } else {
        return Collections.emptySet();
      }
    });
  }"
4106696,none,"	public ProductCategoryUsageSimulator(double dailyUsageRate, double amountUsedAverage,
			double amountUsedVariance, SeedFactory seedFactory)
	{
		this.amountUsedAverage = amountUsedAverage;
		this.amountUsedVariance = amountUsedVariance;

		timestepSampler = new ExponentialSampler(dailyUsageRate, seedFactory);
		R = new GaussianSampler(0.0, 1.0, seedFactory);
	}"
8579381,none,"  public long getCallMethodCount(String callQueueName, String methodName) {
    long methodCount;

    Map<String, Long> methodCountMap = callQueueMethodCountsSummary.getOrDefault(callQueueName, null);

    if (null != methodCountMap) {
      methodCount = methodCountMap.getOrDefault(methodName, 0L);
    } else {
      methodCount = 0L;
    }

    return methodCount;
  }"
9371099,none,"    public Dimension getMinimumSize(int rows) {
        FontMetrics fm = getFontMetrics(getFont());
        initFontMetrics();
        return new Dimension(20 + fm.stringWidth(""0123456789abcde""),
                             getItemHeight() * rows + (2*MARGIN));
    }"
8051310,none,"	@Override
	protected InternalExBacktrackingBug325745TestLanguageParser createParser(XtextTokenStream stream) {
		return new InternalExBacktrackingBug325745TestLanguageParser(stream, getGrammarAccess());
	}"
6610938,none,"    public final void mThis_1() throws RecognitionException {
        try {
            int _type = This_1;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalTypesLexer.g:131:8: ( 'this' )
            // InternalTypesLexer.g:131:10: 'this'
            {
            match(""this""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
3921684,none,"    public void unsetTinfo() {
      this.tinfo = null;
    }"
8025955,none,"  public PublicResolvedTypes(final DefaultReentrantTypeResolver resolver) {
    super(resolver, CancelIndicator.NullImpl);
  }"
8195306,none,"        public PsiInternalExBacktrackingBug325745TestLanguageParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }"
8819009,none,"    public deleteExperiment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }"
4798652,none,"	public String getPassword() {
		final UsernamePassword userPass = getUserPass();
		final String pw = userPass.getPasswordAsString();
		userPass.resetPassword();
		return pw;
	}"
5319003,none,"    @Override
    public List<E> subList(int fromIndex, int toIndex)
    {
        return actual.subList( fromIndex, toIndex );
    }"
3871308,none,"  public void setTimeCreated(Long timeCreated) {
    this.timeCreated = timeCreated;
  }"
5958765,none,"    @Managed
    public void flush() {
        stats.flushes.record();
        poolVersion.incrementAndGet();
    }"
4737348,none,"  public StreamManagerClient(NIOLooper s, String streamManagerHost, int streamManagerPort,
                             String topologyName, String topologyId,
                             PhysicalPlans.Instance instance,
                             Communicator<Message> inStreamQueue,
                             Communicator<Message> outStreamQueue,
                             Communicator<InstanceControlMsg> inControlQueue,
                             HeronSocketOptions options,
                             GatewayMetrics gatewayMetrics) {
    super(s, streamManagerHost, streamManagerPort, options);

    this.topologyName = topologyName;
    this.topologyId = topologyId;

    this.instance = instance;
    this.inStreamQueue = inStreamQueue;
    this.outStreamQueue = outStreamQueue;
    this.inControlQueue = inControlQueue;

    this.systemConfig =
        (SystemConfig) SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);

    this.gatewayMetrics = gatewayMetrics;

    addStreamManagerClientTasksOnWakeUp();
  }"
8350294,none,"    public void doAssert() {
        assert(true);
    }"
7294696,none,"	@Override
	public IVMInstall verifyVMInstall(ILaunchConfiguration conf) throws CoreException {
		IVMInstall javaInstall = super.verifyVMInstall(conf);
		IGrailsInstall grailsInstall = GrailsLaunchArgumentUtils.getGrailsInstall(conf);
		grailsInstall.verifyJavaInstall(javaInstall);
		return javaInstall;
	}"
6864294,none,"    @Override
    public int getSourcePos(int i) {
      return wrapped.getSourcePos(i) + offset;
    }"
5904841,none,"    public BranchInstruction GE(boolean tozero) {
	return tozero ? (BranchInstruction) new IFGE(null) : 
	    (BranchInstruction) new IF_ICMPGE(null);
    }"
4897642,none,"  @Override
  public void getDictionaryIds(int[] inDocIds, int inStartPos, int inDocIdsSize, int[] outDictionaryIds,
      int outStartPos) {
    _reader.readValues(inDocIds, inStartPos, inDocIdsSize, outDictionaryIds, outStartPos);
  }"
8231238,none,"    public WebContinuation getContinuation(int level) {
        if (level <= 0) {
            return this;
        } else if (parentContinuation == null) {
            return this;
        } else {
            return parentContinuation.getContinuation(level - 1);
        }
    }"
4217515,none,"    @Override
    public Set<Entry<String, Object>> entrySet() {
        return new EntrySetImpl();
    }"
8844288,none,"    private Runnable getIAMUserProfileUpdater(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException {
        IamAdminServices.Client iamAdminServicesClient = getIamAdminServicesClient();
        return () -> {
            try {
                iamAdminServicesClient.updateUserProfile(authzToken, userProfile);
            } catch (TException e) {
                throw new RuntimeException(""Failed to update user profile in IAM service"", e);
            }
        };
    }"
7517076,none,"    @Override
    public Pair<String, String> toCSVFormat(long value) {
        return toCSVFormatHelper(value);
    }"
8834964,none,"  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }"
7277838,none,"  @Override
  public CsdlProperty setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }"
3897308,none,"    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEC:
        return getSec();

      case TOPE:
        return getTope();

      }
      throw new java.lang.IllegalStateException();
    }"
7496171,none,"    public synchronized int countDependencies() {
        return size;
    }"
4336972,none,"	public PersistentService getServiceType(Object serviceModule) {
		TopService ts = findTopService(serviceModule);

		if (ts == null)
			return null;

		return ts.getServiceType();
	}"
7023392,none,"  @Provides
  @Singleton
  @Named(""read"")
  public Supplier<Request> provideRead(
      @Named(""request.id"") final Function<Map<String, String>, String> id, final Scheme scheme,
      @ReadHost final Function<Map<String, String>, String> host,
      @Nullable @Named(""port"") final Integer port,
      @Nullable @Named(""uri.root"") final String uriRoot,
      @Named(""read.container"") final Function<Map<String, String>, String> container,
      @Nullable @Named(""api.version"") final String apiVersion,
      @Nullable @ReadObjectName final Function<Map<String, String>, String> object,
      @ReadHeaders final Map<String, Function<Map<String, String>, String>> headers,
      @Named(""read.context"") final List<Function<Map<String, String>, String>> context,
      @Nullable @Named(""credentials"") final Function<Map<String, String>, Credential> credentials,
      @Named(""virtualhost"") final boolean virtualHost,
      @Named(""read.sseCSource"") final boolean encryptedSourceObject) {

    final Map<String, Function<Map<String, String>, String>> queryParameters =
        Collections.emptyMap();

    if (encryptedSourceObject) {
      if (!headers.containsKey(""x-amz-server-side-encryption-customer-algorithm"")) {
        headers.put(""x-amz-server-side-encryption-customer-algorithm"",
            provideSSEEncryptionAlgorithm());
      }
      if (!headers.containsKey(""x-amz-server-side-encryption-customer-key"")) {
        headers.put(""x-amz-server-side-encryption-customer-key"", provideSSEEncryptionKey());
      }
      if (!headers.containsKey(""x-amz-server-side-encryption-customer-key-MD5"")) {
        headers.put(""x-amz-server-side-encryption-customer-key-MD5"", provideSSEKeyMD5());
      }
    }

    final Supplier<Body> bodySupplier = Suppliers.of(Bodies.none());
    final Function<Map<String, String>, Body> body = MoreFunctions.forSupplier(bodySupplier);

    return createRequestSupplier(Operation.READ, id, Method.GET, scheme, host, port, uriRoot,
        container, apiVersion, object, queryParameters, headers, context, null, body, credentials,
        virtualHost, null, null, false, null);
  }"
8574527,none,"  public void updateFsReadTime(long t) {
    source.updateFsReadTime(t);
  }"
4072597,none,"    public long computeIfAbsent(long key, LongLongFunction provider) {
        checkBiggerEqualZero(key);
        checkNotNull(provider);
        long h = hash(key);
        return getSection(h).put(key, ValueNotFound, (int) h, true, provider);
    }"
8100520,none,"	@Override
	/* @Nullable */
	public JvmIdentifiableElement getFeature() {
		return description.getElementOrProxy();
	}"
7274045,none,"        public void propertyChange(PropertyChangeEvent evt) {
            if (!evt.getNewValue().equals(Stateful.STATE_AVAILABLE)) {
                ((Application)evt.getSource()).removePropertyChangeListener(
                        Stateful.PROPERTY_STATE, this);
                client.disconnectImpl(false);
                availabilityListener = null;
            }
        }"
7030976,none,"    public HeadBucketResult withBucketRegion(String bucketRegion) {
        setBucketRegion(bucketRegion);
        return this;
    }"
7276259,none,"    protected final void setBufferType(int bufferType) {
        if (this.bufferType == bufferType) return;
        if (bufferType == BUFFER_NONE ||
            bufferType == BUFFER_IMAGE ||
            bufferType == BUFFER_VOLATILE_IMAGE) {
            this.bufferType = bufferType;
            releaseOffscreenImage();
            repaintImpl(0, 0, getWidth(), getHeight());
        } else {
            throw new IllegalArgumentException(""Unknown buffer type: "" + bufferType); // NOI18N
        }
    }"
3987166,none,"    protected void endObject()
        throws JSONException
    {
        writer.endObject();
    }"
7204338,none,"        public Builder nodePoolId(String nodePoolId) {
            this.nodePoolId = nodePoolId;
            this.__explicitlySet__.add(""nodePoolId"");
            return this;
        }"
9209481,none,"    public DocumentCache(int size) throws SAXException {
        this(size, null);
        try {
            _dtmManager = XSLTCDTMManager.createNewDTMManagerInstance();
        } catch (Exception e) {
            throw new SAXException(e);
        }
    }"
9012407,none,"  @Override
  public boolean incrementToken() throws IOException {
    for(;;) {

      if (!remainingTokens.isEmpty()) {
        // clearAttributes();  // not currently necessary
        restoreState(remainingTokens.removeFirst());
        return true;
      }

      if (!input.incrementToken()) return false;

      int len = termAtt.length();
      if (len==0) return true; // pass through zero length terms
      
      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();

      String v = termAtt.toString();
      String primaryPhoneticValue = encoder.doubleMetaphone(v);
      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);

      // a flag to lazily save state if needed... this avoids a save/restore when only
      // one token will be generated.
      boolean saveState=inject;

      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {
        if (saveState) {
          remainingTokens.addLast(captureState());
        }
        posAtt.setPositionIncrement( firstAlternativeIncrement );
        firstAlternativeIncrement = 0;
        termAtt.setEmpty().append(primaryPhoneticValue);
        saveState = true;
      }

      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0
              && !alternatePhoneticValue.equals(primaryPhoneticValue)
              && !primaryPhoneticValue.equals(v)) {
        if (saveState) {
          remainingTokens.addLast(captureState());
          saveState = false;
        }
        posAtt.setPositionIncrement( firstAlternativeIncrement );
        termAtt.setEmpty().append(alternatePhoneticValue);
        saveState = true;
      }

      // Just one token to return, so no need to capture/restore
      // any state, simply return it.
      if (remainingTokens.isEmpty()) {
        return true;
      }

      if (saveState) {
        remainingTokens.addLast(captureState());
      }
    }
  }"
5343588,none,"    @Override
    public void onTrigger(final ProcessContext context, final ProcessSession session) {
        List<FlowFile> flowFiles = session.get(context.getProperty(BATCH_SIZE).evaluateAttributeExpressions().asInteger());
        if (flowFiles == null || flowFiles.size() == 0) {
            return;
        }

        Map<ItemKeys, FlowFile> keysToFlowFileMap = new HashMap<>();

        final String table = context.getProperty(TABLE).evaluateAttributeExpressions().getValue();

        final String hashKeyName = context.getProperty(HASH_KEY_NAME).evaluateAttributeExpressions().getValue();
        final String hashKeyValueType = context.getProperty(HASH_KEY_VALUE_TYPE).getValue();
        final String rangeKeyName = context.getProperty(RANGE_KEY_NAME).evaluateAttributeExpressions().getValue();
        final String rangeKeyValueType = context.getProperty(RANGE_KEY_VALUE_TYPE).getValue();
        final String jsonDocument = context.getProperty(JSON_DOCUMENT).evaluateAttributeExpressions().getValue();
        final String charset = context.getProperty(DOCUMENT_CHARSET).evaluateAttributeExpressions().getValue();

        TableWriteItems tableWriteItems = new TableWriteItems(table);

        for (FlowFile flowFile : flowFiles) {
            final Object hashKeyValue = getValue(context, HASH_KEY_VALUE_TYPE, HASH_KEY_VALUE, flowFile);
            final Object rangeKeyValue = getValue(context, RANGE_KEY_VALUE_TYPE, RANGE_KEY_VALUE, flowFile);

            if (!isHashKeyValueConsistent(hashKeyName, hashKeyValue, session, flowFile)) {
                continue;
            }

            if (!isRangeKeyValueConsistent(rangeKeyName, rangeKeyValue, session, flowFile)) {
                continue;
            }

            if (!isDataValid(flowFile, jsonDocument)) {
                flowFile = session.putAttribute(flowFile, AWS_DYNAMO_DB_ITEM_SIZE_ERROR, ""Max size of item + attribute should be 400kb but was "" + flowFile.getSize() + jsonDocument.length());
                session.transfer(flowFile, REL_FAILURE);
                continue;
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            session.exportTo(flowFile, baos);

            try {
                if (rangeKeyValue == null || StringUtils.isBlank(rangeKeyValue.toString())) {
                    tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName, hashKeyValue)
                        .withJSON(jsonDocument, IOUtils.toString(baos.toByteArray(), charset)));
                } else {
                    tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName, hashKeyValue)
                        .withKeyComponent(rangeKeyName, rangeKeyValue)
                        .withJSON(jsonDocument, IOUtils.toString(baos.toByteArray(), charset)));
                }
            } catch (IOException ioe) {
                getLogger().error(""IOException while creating put item : "" + ioe.getMessage());
                flowFile = session.putAttribute(flowFile, DYNAMODB_ITEM_IO_ERROR, ioe.getMessage());
                session.transfer(flowFile, REL_FAILURE);
            }
            keysToFlowFileMap.put(new ItemKeys(hashKeyValue, rangeKeyValue), flowFile);
        }

        if (keysToFlowFileMap.isEmpty()) {
            return;
        }

        final DynamoDB dynamoDB = getDynamoDB();

        try {
            BatchWriteItemOutcome outcome = dynamoDB.batchWriteItem(tableWriteItems);

            handleUnprocessedItems(session, keysToFlowFileMap, table, hashKeyName, hashKeyValueType, rangeKeyName,
                rangeKeyValueType, outcome);

            // Handle any remaining flowfiles
            for (FlowFile flowFile : keysToFlowFileMap.values()) {
                getLogger().debug(""Successful posted items to dynamodb : "" + table);
                session.transfer(flowFile, REL_SUCCESS);
            }
        } catch (AmazonServiceException exception) {
            getLogger().error(""Could not process flowFiles due to service exception : "" + exception.getMessage());
            List<FlowFile> failedFlowFiles = processServiceException(session, flowFiles, exception);
            session.transfer(failedFlowFiles, REL_FAILURE);
        } catch (AmazonClientException exception) {
            getLogger().error(""Could not process flowFiles due to client exception : "" + exception.getMessage());
            List<FlowFile> failedFlowFiles = processClientException(session, flowFiles, exception);
            session.transfer(failedFlowFiles, REL_FAILURE);
        } catch (Exception exception) {
            getLogger().error(""Could not process flowFiles due to exception : "" + exception.getMessage());
            List<FlowFile> failedFlowFiles = processException(session, flowFiles, exception);
            session.transfer(failedFlowFiles, REL_FAILURE);
        }
    }"
5965453,none,"    private boolean hasCmpPersistenceUnit(final Persistence persistence) {
        for (final PersistenceUnit unit : persistence.getPersistenceUnit()) {
            if (unit.getName().startsWith(""cmp"")) {
                return true;
            }
        }
        return false;
    }"
7747391,none,"    @Override
    public void onManagementStarting() {
        super.onManagementStarting();
        
        exchange = (getConfig(EXCHANGE_NAME) != null) ? getConfig(EXCHANGE_NAME) : getDefaultExchangeName();
        virtualHost = getConfig(RabbitBroker.VIRTUAL_HOST_NAME);
        sensors().set(RabbitBroker.VIRTUAL_HOST_NAME, virtualHost);
        
        machine = (SshMachineLocation) Iterables.find(getParent().getLocations(), Predicates.instanceOf(SshMachineLocation.class));
        shellEnvironment = getParent().getShellEnvironment();
    }"
4535026,none,"        public LoanRescheduleRequestRowMapper() {
            final StringBuilder sqlBuilder = new StringBuilder(200);

            sqlBuilder.append(""lr.id as id, lr.loan_id as loanId, lr.status_enum as statusEnum, "");
            sqlBuilder.append(""mc.display_name as clientName, "");
            sqlBuilder.append(""mc.id as clientId, "");
            sqlBuilder.append(""ml.account_no as loanAccountNumber, "");
            sqlBuilder.append(""lr.reschedule_from_installment as rescheduleFromInstallment, "");
            sqlBuilder.append(""lr.reschedule_from_date as rescheduleFromDate, "");
            sqlBuilder.append(""lr.recalculate_interest as recalculateInterest, "");
            sqlBuilder.append(""lr.reschedule_reason_cv_id as rescheduleReasonCvId, "");
            sqlBuilder.append(""cv.code_value as rescheduleReasonCvValue, "");
            sqlBuilder.append(""lr.reschedule_reason_comment as rescheduleReasonComment, "");

            sqlBuilder.append(""lr.submitted_on_date as submittedOnDate, "");
            sqlBuilder.append(""sbu.username as submittedByUsername, "");
            sqlBuilder.append(""sbu.firstname as submittedByFirstname, "");
            sqlBuilder.append(""sbu.lastname as submittedByLastname, "");

            sqlBuilder.append(""lr.approved_on_date as approvedOnDate, "");
            sqlBuilder.append(""abu.username as approvedByUsername, "");
            sqlBuilder.append(""abu.firstname as approvedByFirstname, "");
            sqlBuilder.append(""abu.lastname as approvedByLastname, "");

            sqlBuilder.append(""lr.rejected_on_date as rejectedOnDate, "");
            sqlBuilder.append(""rbu.username as rejectedByUsername, "");
            sqlBuilder.append(""rbu.firstname as rejectedByFirstname, "");
            sqlBuilder.append(""rbu.lastname as rejectedByLastname, "");
            
            sqlBuilder.append(""tv.id as termId,"");
            sqlBuilder.append(""tv.term_type as termType,"");
            sqlBuilder.append(""tv.applicable_date as variationApplicableFrom, "");
            sqlBuilder.append(""tv.decimal_value as decimalValue, "");
            sqlBuilder.append(""tv.date_value as dateValue, "");
            sqlBuilder.append(""tv.is_specific_to_installment as isSpecificToInstallment "");

            sqlBuilder.append(""from "" + loanRescheduleRequestTableName() + "" lr "");
            sqlBuilder.append(""left join m_code_value cv on cv.id = lr.reschedule_reason_cv_id "");
            sqlBuilder.append(""left join m_appuser sbu on sbu.id = lr.submitted_by_user_id "");
            sqlBuilder.append(""left join m_appuser abu on abu.id = lr.approved_by_user_id "");
            sqlBuilder.append(""left join m_appuser rbu on rbu.id = lr.rejected_by_user_id "");
            sqlBuilder.append(""left join m_loan ml on ml.id = lr.loan_id "");
            sqlBuilder.append(""left join m_client mc on mc.id = ml.client_id "");
            sqlBuilder.append(""join m_loan_reschedule_request_term_variations_mapping rrtvm on lr.id = rrtvm.loan_reschedule_request_id "");
            sqlBuilder.append(""join m_loan_term_variations tv on tv.id = rrtvm.loan_term_variations_id and tv.parent_id is null"") ;

            this.schema = sqlBuilder.toString();
        }"
4318753,none,"    @Override
	public void finish() throws StandardException {
		source.finish();
		super.finish();
	}"
8739715,none,"  public void applicationFinished(ApplicationId applicationId) {
    processDelegationTokenRenewerEvent(new DelegationTokenRenewerEvent(
        applicationId,
        DelegationTokenRenewerEventType.FINISH_APPLICATION));
  }"
7476486,none,"	public Customer1935(String firstName, String lastName) {
		this.firstName = firstName;
		this.lastName = lastName;
	}"
8423791,none,"    public void setLabel(String label) {
        this.label = label;
    }"
5882133,none,"    @Inject
    public CandidateIdFilter( final EntityCollectionManagerFactory entityCollectionManagerFactory,
                              final EntityIndexFactory entityIndexFactory,
                              final IndexLocationStrategyFactory indexLocationStrategyFactory,
                              final IndexProducer indexProducer) {
        this.entityCollectionManagerFactory = entityCollectionManagerFactory;
        this.entityIndexFactory = entityIndexFactory;
        this.indexLocationStrategyFactory = indexLocationStrategyFactory;
        this.indexProducer = indexProducer;
    }"
6459836,none,"    private void buildNode79()
        throws Exception {
        UaVariableNode node = new DataTypeDescriptionNode(this.context, NodeId.parse(""ns=0;i=8567""), new QualifiedName(0, ""ContentFilter""), new LocalizedText(""en"", ""ContentFilter""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=12""), -1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=39""), ExpandedNodeId.parse(""svr=0;i=587""), NodeClass.Object, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=47""), ExpandedNodeId.parse(""svr=0;i=8252""), NodeClass.Variable, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=69""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=47""), ExpandedNodeId.parse(""svr=0;i=8252""), NodeClass.Variable, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:String xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\"">//xs:element[@name='ContentFilter']</ns2:String>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
6009570,none,"    public JedisPool(final GenericObjectPoolConfig poolConfig, final String host, final int port) {
        this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, null);
    }"
4875906,none,"  public static void updateResourceConfigsFor(Map<String, String> newConfigs, String resourceName, String clusterName,
      HelixAdmin admin) {
    final HelixConfigScope scope = getResourceScopeFor(clusterName, resourceName);
    admin.setConfig(scope, newConfigs);
  }"
6725232,none,"    public APIRequestDelete requestAllFields (boolean value) {
      for (String field : FIELDS) {
        this.requestField(field, value);
      }
      return this;
    }"
7883024,none,"    public SimException(String message, Throwable cause) {
        super(message, cause);
    }"
7204833,none,"    public static CreateSteeringPolicyRequest interceptRequest(
            CreateSteeringPolicyRequest request) {

        return request;
    }"
6536605,none,"    public static String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,
            String contentType, int timeout) throws IOException {
        final ProxyParams proxyParams = prepareProxyParams();

        return executeUrl(httpMethod, url, httpHeaders, content, contentType, timeout, proxyParams.proxyHost,
                proxyParams.proxyPort, proxyParams.proxyUser, proxyParams.proxyPassword, proxyParams.nonProxyHosts);
    }"
7094329,none,"    private static void writeFinalRule(Writer writer, boolean isDst, AnnualTimeZoneRule rule,
            int fromRawOffset, int fromDSTSavings, long startTime) throws IOException{
        DateTimeRule dtrule = toWallTimeRule(rule.getRule(), fromRawOffset, fromDSTSavings);

        // If the rule's mills in a day is out of range, adjust start time.
        // Olson tzdata supports 24:00 of a day, but VTIMEZONE does not.
        // See ticket#7008/#7518

        int timeInDay = dtrule.getRuleMillisInDay();
        if (timeInDay < 0) {
            startTime = startTime + (0 - timeInDay);
        } else if (timeInDay >= Grego.MILLIS_PER_DAY) {
            startTime = startTime - (timeInDay - (Grego.MILLIS_PER_DAY - 1));
        }

        int toOffset = rule.getRawOffset() + rule.getDSTSavings();
        switch (dtrule.getDateRuleType()) {
        case DateTimeRule.DOM:
            writeZonePropsByDOM(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleDayOfMonth(), startTime, MAX_TIME);
            break;
        case DateTimeRule.DOW:
            writeZonePropsByDOW(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleWeekInMonth(), dtrule.getRuleDayOfWeek(), startTime, MAX_TIME);
            break;
        case DateTimeRule.DOW_GEQ_DOM:
            writeZonePropsByDOW_GEQ_DOM(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleDayOfMonth(), dtrule.getRuleDayOfWeek(), startTime, MAX_TIME);
            break;
        case DateTimeRule.DOW_LEQ_DOM:
            writeZonePropsByDOW_LEQ_DOM(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleDayOfMonth(), dtrule.getRuleDayOfWeek(), startTime, MAX_TIME);
            break;
        }
    }"
7234731,none,"  public final int colorModeWideColorGamut() {
    return colorMode & COLOR_MODE_WIDE_COLOR_GAMUT_MASK;
  }"
6212569,none,"  public Element replaceWith(NewElement newElement) {
    checkNotRemoved();
    notPermittedOnRootElement();
    requireNonNull(newElement, ""Required not null new element"");
    insertAfter(newElement);
    final Element inserted = getNextSibling();
    remove();
    return inserted;
  }"
8967424,none,"  public Text evaluate(String xml, String path) {
    String s = xpath.evalString(xml, path);
    if (s == null) {
      return null;
    }

    result.set(s);
    return result;
  }"
8979235,none,"    public Builder(float k1, float b) {
      this.similarity = new BM25Similarity(k1, b);
    }"
5487652,none,"    public Interaction open() throws Exception
    {
        return _interaction.sendPerformative(new ConnectionOpenBody(AMQShortString.valueOf(_openVirtualHost),
                                                                    null,
                                                                    false));
    }"
4217571,none,"    private static String[] enumerationToArray(Enumeration<String> values) {
        ArrayList<String> list = new ArrayList<String>();

        while (values.hasMoreElements()) {
            list.add(values.nextElement());
        }

        return list.toArray(new String[list.size()]);
    }"
4350115,none,"	public static	ExecIndexRow getIndexRowFromHeapRow(IndexRowGenerator irg,
														RowLocation rl,
														ExecRow heapRow)
		throws StandardException
	{
		ExecIndexRow		indexRow;

		indexRow = irg.getIndexRowTemplate();
		// Get an index row based on the base row
		irg.getIndexRow(heapRow, rl, indexRow, (FormatableBitSet) null);

		return indexRow;
	}"
9209895,none,"    public static Element getParent(Element elem) {
        Node parent = elem.getParentNode();
        if (parent instanceof Element)
            return (Element)parent;
        return null;
    } // getParent(Element):Element"
5693079,none,"    public String getOutputName() {
        if (this.prefix == null) {
            return this.localName;
        } else {
            return this.prefix + "":"" + this.localName;
        }
    }"
9122985,none,"	private void checkValid( )
	{
		if ( !valid )
			return;

		if ( cursor == maxLength - 1 )
			valid = false;
	}"
7905552,none,"  @Override
  public ExitCode runWithoutHelp(CommandRunnerParams params) throws Exception {
    ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();
    try (ProjectBuildFileParser parser =
        new DefaultProjectBuildFileParserFactory(
                new DefaultTypeCoercerFactory(),
                params.getConsole(),
                new ParserPythonInterpreterProvider(
                    params.getCell().getBuckConfig(), params.getExecutableFinder()),
                params.getKnownRuleTypesProvider(),
                params.getManifestServiceSupplier(),
                params.getFileHashCache())
            .createBuildFileParser(
                params.getBuckEventBus(), params.getCell(), params.getWatchman())) {
      /*
       * The super console does a bunch of rewriting over the top of the console such that
       * simultaneously writing to stdout and stderr in an interactive session is problematic.
       * (Overwritten characters, lines never showing up, etc). As such, writing to stdout directly
       * stops superconsole rendering (no errors appear). Because of all of this, we need to
       * just buffer the output and print it to stdout at the end fo the run. The downside
       * is that we have to buffer all of the output in memory, and it could potentially be large,
       * however, we'll just have to accept that tradeoff for now to get both error messages
       * from the parser, and the final output
       */

      try (ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
          PrintStream out = new PrintStream(new BufferedOutputStream(byteOut))) {
        for (String pathToBuildFile : getArguments()) {
          // Print a comment with the path to the build file.
          out.printf(""# %s\n\n"", pathToBuildFile);

          // Resolve the path specified by the user.
          Path path = Paths.get(pathToBuildFile);
          if (!path.isAbsolute()) {
            Path root = projectFilesystem.getRootPath();
            path = root.resolve(path);
          }

          // Parse the rules from the build file.
          ImmutableMap<String, Map<String, Object>> rawRules =
              parser.getBuildFileManifest(path).getTargets();

          // Format and print the rules from the raw data, filtered by type.
          ImmutableSet<String> types = getTypes();
          Predicate<String> includeType = type -> types.isEmpty() || types.contains(type);
          printRulesToStdout(out, rawRules, includeType);
        }

        // Make sure we tell the event listener to flush, otherwise there is a race condition where
        // the event listener might not have flushed, we dirty the stream, and then it will not
        // render the last frame (see {@link SuperConsoleEventListener})
        params.getBuckEventBus().post(new FlushConsoleEvent());
        out.close();
        params.getConsole().getStdOut().write(byteOut.toByteArray());
      }
    }

    return ExitCode.SUCCESS;
  }"
7469146,none,"	public NamedMongoScript(String name, String rawScript) {
		this(name, new ExecutableMongoScript(rawScript));
	}"
8644476,none,"    ZkDiscoveryNodeJoinEventData(
        long evtId,
        long topVer,
        List<ZkJoinedNodeEvtData> joinedNodes,
        int dataForJoinedPartCnt)
    {
        super(evtId, ZK_EVT_NODE_JOIN, topVer);

        this.joinedNodes = joinedNodes;
        this.dataForJoinedPartCnt = dataForJoinedPartCnt;
    }"
5865735,none,"    @Override
    public void println(char x) throws IOException
    {
        getEnclosingWriter().println(x);
    }"
4651047,none,"    protected static boolean typeCheckMethodsWithGenerics(ClassNode receiver, ClassNode[] arguments, MethodNode candidateMethod) {
        if (isUsingUncheckedGenerics(receiver)) {
            return true;
        }
        if (CLASS_Type.equals(receiver)
                && receiver.isUsingGenerics()
                && !candidateMethod.getDeclaringClass().equals(receiver)
                && !(candidateMethod instanceof ExtensionMethodNode)) {
            return typeCheckMethodsWithGenerics(receiver.getGenericsTypes()[0].getType(), arguments, candidateMethod);
        }
        // both candidate method and receiver have generic information so a check is possible
        GenericsType[] genericsTypes = candidateMethod.getGenericsTypes();
        boolean methodUsesGenerics = (genericsTypes != null && genericsTypes.length > 0);
        boolean isExtensionMethod = candidateMethod instanceof ExtensionMethodNode;
        if (isExtensionMethod && methodUsesGenerics) {
            ClassNode[] dgmArgs = new ClassNode[arguments.length + 1];
            dgmArgs[0] = receiver;
            System.arraycopy(arguments, 0, dgmArgs, 1, arguments.length);
            MethodNode extensionMethodNode = ((ExtensionMethodNode) candidateMethod).getExtensionMethodNode();
            return typeCheckMethodsWithGenerics(extensionMethodNode.getDeclaringClass(), dgmArgs, extensionMethodNode, true);
        } else {
            return typeCheckMethodsWithGenerics(receiver, arguments, candidateMethod, false);
        }
    }"
5075026,none,"    @Override
    public long size()
    {
        return currentSize ;
//        long x = 0 ;
//        for ( K key : keys )
//            if ( key != null )
//                x++ ;
//        return x ;
    }"
5057041,none,"        @Override
        public DirectWriteRolloverStrategy build() {
            int maxIndex = Integer.MAX_VALUE;
            if (maxFiles != null) {
                maxIndex = Integer.parseInt(maxFiles);
                if (maxIndex < 0) {
                    maxIndex = Integer.MAX_VALUE;
                } else if (maxIndex < 2) {
                    LOGGER.error(""Maximum files too small. Limited to "" + DEFAULT_MAX_FILES);
                    maxIndex = DEFAULT_MAX_FILES;
                }
            }
            final int compressionLevel = Integers.parseInt(compressionLevelStr, Deflater.DEFAULT_COMPRESSION);
            return new DirectWriteRolloverStrategy(maxIndex, compressionLevel, config.getStrSubstitutor(),
                    customActions, stopCustomActionsOnError, tempCompressedFilePattern);
        }"
4197431,none,"    public boolean isSkipRelationshipsLoading() {
        return skipRelationshipsLoading != null && skipRelationshipsLoading;
    }"
6303431,none,"    @Override
    public String toString()
    {
        return String.format(""%s[requested=\""%s\"", negotiated=\""%s\""]"",
                getClass().getSimpleName(),
                configRequested.getParameterizedName(),
                configNegotiated.getParameterizedName());
    }"
5608439,none,"    private boolean isValid(Document xml) throws SAXException{
        try{
            String language = ""http://www.w3.org/2001/XMLSchema"";
            SchemaFactory factory = SchemaFactory.newInstance(language);

            Source source = new DOMSource(map.getSchema());
            Schema schema = factory.newSchema(source);
            Validator validator = schema.newValidator();
            validator.validate(new DOMSource(xml));
            
            //if no exceptions where raised, the document is valid
            return true;
        } catch(IOException e) {
            LOG.log(POILogger.ERROR, ""document is not valid"", e);
        }

        return false;
    }"
3730280,none,"    public void start() {
        checkInst();

        if (scheduler == null) {
            scheduler = new ScheduledThreadPoolExecutor(schedulerThreadSize);
        }

        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                collectSql();
            }
        }, timeBetweenSqlCollect, timeBetweenSqlCollect, timeUnit);

        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                collectSpringMethod();
            }
        }, timeBetweenSpringCollect, timeBetweenSpringCollect, timeUnit);

        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                collectWebURI();
            }
        }, timeBetweenWebUriCollect, timeBetweenWebUriCollect, timeUnit);
    }"
4324794,none,"    private ThreadGroup createDaemonGroup() {
        try {
            ThreadGroup group = new ThreadGroup(""derby.daemons"");
            group.setDaemon(true);
            return group;
        } catch (SecurityException se) {
            // In case of a lacking privilege, issue a warning, return null and
            // let the daemon threads be created in the default thread group.
            // This can only happen if the current Derby thread is a part of
            // the root thread group ""system"".
            reportThread(se);
            return null;
        }
    }"
4260514,none,"    @Override
    protected void invoke( Class<?> c )
        throws Exception
    {
        getRuntime().getConstructors( c );
    }"
9115400,none,"	public void parse(  ) throws ParseException
	{
		try
		{
			parser.open( templateDir );
		}
		catch ( FileNotFoundException e )
		{
			return;
		}

		parseElement( );
	}"
4237161,none,"    @Override
    public boolean hasNext() {
        try {
            return !rs.isLast();
        } catch (final SQLException e) {
            rethrow(e);
            return false;
        }
    }"
4257893,none,"        @Override
        public int compare(int[] c1,
                           int[] c2) {
            if (c1.length != k) {
                throw new CombinatoricsException(CombinatoricsException.MISMATCH, c1.length, k);
            }
            if (c2.length != k) {
                throw new CombinatoricsException(CombinatoricsException.MISMATCH, c2.length, k);
            }

            // Method ""lexNorm"" works with ordered arrays.
            final int[] c1s = Arrays.copyOf(c1, k);
            final int[] c2s = Arrays.copyOf(c2, k);
            Arrays.sort(c1s);
            Arrays.sort(c2s);

            final long v1 = lexNorm(c1s);
            final long v2 = lexNorm(c2s);

            if (v1 < v2) {
                return -1;
            } else if (v1 > v2) {
                return 1;
            } else {
                return 0;
            }
        }"
5698693,none,"	public PropertiesVocabSource(Properties prop) {
		assert (prop != null);
		this.prop = prop;
		vocabs = readVocab(prop);
	}"
7205348,none,"        public GetRouteTableRequest build() {
            GetRouteTableRequest request = buildWithoutInvocationCallback();
            request.setInvocationCallback(invocationCallback);
            return request;
        }"
4360681,none,"    public static Test clientExistingServerSuite(Class testClass, String hostName, int portNumber)
    {
               // Will not start server and does not stop it when done!.
        return existingServerDecorator(bareClientServerSuite(testClass),
                hostName, portNumber);
    }"
7320020,none,"        public CLCHTTPProxyConfiguration(
            final String host,
            final int port,
            final String username,
            final String password) {
            Check.notNull(host, ""host""); //$NON-NLS-1$

            this.host = host;
            this.port = port;
            this.username = username;
            this.password = password;
        }"
9187819,none,"		public void inputChanged( Viewer viewer, Object oldInput,
				Object newInput )
		{
			if ( viewer == subCategoryTable )
			{
				functionTable.setInput( null );
			}
		}"
7900059,none,"  @Override
  public int hashCode() {
    return Objects.hash(id);
  }"
5705708,none,"    public static void logAccess(Integer requestId, InetAddress remoteAddress,
                                 Principal principal, String operation,
                                 String stormName, String accessResult) {
        if (stormName != null && accessResult != null) {
            LOG.info(accessLogBase + "" storm-name: {} access result: {}"",
                     requestId, remoteAddress, principal, operation, stormName, accessResult);
        } else if (accessResult != null) {
            LOG.info(accessLogBase + "" access result: {}"",
                     requestId, remoteAddress, principal, operation, accessResult);
        } else {
            // for completeness
            LOG.info(accessLogBase + "" storm-name: {}"",
                     requestId, remoteAddress, principal, operation, stormName);
        }
    }"
7306229,none,"    public void setServiceHost(final IBuildServiceHost value) {
        serviceHost = value;

        if (serviceHost != null) {
            getWebServiceObject().setServiceHostUri(serviceHost.getURI());
        } else {
            getWebServiceObject().setServiceHostUri(null);
        }
    }"
9542718,none,"  @Override
  public KillTaskAttemptResponse killTaskAttempt(
      KillTaskAttemptRequest request) throws IOException {
    KillTaskAttemptResponse resp =
      recordFactory.newRecordInstance(KillTaskAttemptResponse.class);
    return resp;
  }"
5297721,none,"  public BufferedProtocolReadToWrite(StructType thriftType, FieldIgnoredHandler errorHandler) {
    super();
    this.thriftType = thriftType;
    this.errorHandler = errorHandler;
  }"
6601584,none,"    @Transactional(propagation = Propagation.MANDATORY)
    public Map<Long, List<BiologicalDataItem>> loadBookmarkItemsByBookmarkIds(Collection<Long> bookmarkIds) {
        if (bookmarkIds == null || bookmarkIds.isEmpty()) {
            return Collections.emptyMap();
        }

        Long listId = daoHelper.createTempLongList(bookmarkIds);
        Map<Long, List<BiologicalDataItem>> itemsMap = new HashMap<>();

        getJdbcTemplate().query(loadBookmarksItemsQuery, rs -> {
            BiologicalDataItem dataItem = BiologicalDataItemDao.BiologicalDataItemParameters.getRowMapper()
                .mapRow(rs, 0);
            long bookmarkId = rs.getLong(BookmarkItemParameters.BOOKMARK_ID.name());
            if (!itemsMap.containsKey(bookmarkId)) {
                itemsMap.put(bookmarkId, new ArrayList<>());
            }
            itemsMap.get(bookmarkId).add(dataItem);
        }, listId);

        daoHelper.clearTempList(listId);
        return itemsMap;
    }"
3825676,none,"   default int getGroupSequence() {
      return 0;
   }"
4534763,none,"    protected void warn(String msg, Object ... params) {
	if (LOG_LEVEL >= LogService.LOG_WARNING) {
	    log(LogService.LOG_WARNING, params.length > 0 ? String.format(msg, params) : msg);
	}
    }"
6500087,none,"	@Override
	public boolean appliesToPartially(GenerationSimpleRule rule, int i) {
		if(rule instanceof ButtonRule && ((((ButtonRule)rule).getStyle() & SWT.CHECK) != 0)){
			if(i == 0){
				bRule = (ButtonRule)rule;
			}
			if(bRule.equals(rule)){
				return true;
			}
			return false;
		}
		return false;
	}"
8969767,none,"  public void testIndependantIterators() throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig().setMergePolicy(newLogMergePolicy());
    CannedNormSimilarity sim = new CannedNormSimilarity(new long[] {42, 10, 20});
    conf.setSimilarity(sim);
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);
    Document doc = new Document();
    Field indexedField = new TextField(""indexed"", ""a"", Field.Store.NO);
    doc.add(indexedField);
    for (int i = 0; i < 3; ++i) {
      writer.addDocument(doc);
    }
    writer.forceMerge(1);
    LeafReader r = getOnlyLeafReader(maybeWrapWithMergingReader(writer.getReader()));
    NumericDocValues n1 = r.getNormValues(""indexed"");
    NumericDocValues n2 = r.getNormValues(""indexed"");
    assertEquals(0, n1.nextDoc());
    assertEquals(42, n1.longValue());
    assertEquals(1, n1.nextDoc());
    assertEquals(10, n1.longValue());
    assertEquals(0, n2.nextDoc());
    assertEquals(42, n2.longValue());
    assertEquals(1, n2.nextDoc());
    assertEquals(10, n2.longValue());
    assertEquals(2, n2.nextDoc());
    assertEquals(20, n2.longValue());
    assertEquals(2, n1.nextDoc());
    assertEquals(20, n1.longValue());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, n1.nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, n2.nextDoc());
    IOUtils.close(r, writer, dir);
  }"
8954733,none,"  static DescriptiveStatistics benchmarkTableCreate(@NotNull MicroBenchmark bench,
                                                    @NotNull BenchData data) {
    final HMSClient client = data.getClient();
    String dbName = data.dbName;
    String tableName = data.tableName;
    Table table = Util.TableBuilder.buildDefaultTable(dbName, tableName);

    return bench.measure(null,
        () -> throwingSupplierWrapper(() -> client.createTable(table)),
        () -> throwingSupplierWrapper(() -> client.dropTable(dbName, tableName)));
  }"
4371368,none,"    public Set<String> keySet() {
        return wrappedService.keySet();
    }"
6306007,none,"    public int getObjectId() {
        return objectId;
    }"
7929441,none,"	public ImageFigure() {
		this(null, PositionConstants.CENTER);
	}"
4773397,none,"    @Override
    public CloseableIteration<BindingSet, QueryEvaluationException> evaluate(BindingSet bindings)
            throws QueryEvaluationException {
        return evaluate(Collections.singleton(bindings));
    }"
8008638,none,"  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ImportUriUiPackage.IMPORT__IMPORT_URI:
        return getImportURI();
    }
    return super.eGet(featureID, resolve, coreType);
  }"
3698860,none,"    @Override
    public String toString() {
        return ""RouteMeta{"" +
                ""type="" + type +
                "", rawType="" + rawType +
                "", destination="" + destination +
                "", path='"" + path + '\'' +
                "", group='"" + group + '\'' +
                "", priority="" + priority +
                "", extra="" + extra +
                "", paramsType="" + paramsType +
                "", name='"" + name + '\'' +
                '}';
    }"
9290971,none,"  @Override
  public final Element getDocumentElement()
  {
                int dochandle=dtm.getDocument();
                int elementhandle=DTM.NULL;
                for(int kidhandle=dtm.getFirstChild(dochandle);
                                kidhandle!=DTM.NULL;
                                kidhandle=dtm.getNextSibling(kidhandle))
                {
                        switch(dtm.getNodeType(kidhandle))
                        {
                        case Node.ELEMENT_NODE:
                                if(elementhandle!=DTM.NULL)
                                {
                                        elementhandle=DTM.NULL; // More than one; ill-formed.
                                        kidhandle=dtm.getLastChild(dochandle); // End loop
                                }
                                else
                                        elementhandle=kidhandle;
                                break;

                        // These are harmless; document is still wellformed
                        case Node.COMMENT_NODE:
                        case Node.PROCESSING_INSTRUCTION_NODE:
                        case Node.DOCUMENT_TYPE_NODE:
                                break;

                        default:
                                elementhandle=DTM.NULL; // ill-formed
                                kidhandle=dtm.getLastChild(dochandle); // End loop
                                break;
                        }
                }
                if(elementhandle==DTM.NULL)
                        throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
                else
                        return (Element)(dtm.getNode(elementhandle));
  }"
4371443,none,"    public static String getOpenIdScope() {
        return OPENID_SCOPE;
    }"
6848482,none,"  public static boolean validateTypeSize(final Component parent, final JTextField size) {
    if (validateTypeSize(size)) {
      return true;
    } else {
      CMessageBox.showWarning(parent, ""Please enter a valid type size."");
      return false;
    }
  }"
7792449,none,"	@Override
	protected void onConfigure() 
	{
		super.onConfigure();
		dequeue();
	}"
4995171,none,"    public Object doExecute() throws Exception {

        Group group = groupManager.findGroupByName(groupName);
        if (group == null) {
            System.err.println(""Cluster group "" + groupName + "" doesn't exist"");
            return null;
        }

        CellarSupport support = new CellarSupport();
        support.setClusterManager(clusterManager);
        support.setGroupManager(groupManager);
        support.setConfigurationAdmin(configurationAdmin);

        if (!in && !out) {
            in = true;
            out = true;
        }
        if (!whitelist && !blacklist) {
            whitelist = true;
            blacklist = true;
        }

        if (pid == null || pid.isEmpty()) {
            // display mode
            if (in) {
                System.out.println(""INBOUND:"");
                if (whitelist) {
                    System.out.print(""\twhitelist: "");
                    Set<String> list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND);
                    System.out.println(list.toString());
                }
                if (blacklist) {
                    System.out.print(""\tblacklist: "");
                    Set<String> list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND);
                    System.out.println(list.toString());
                }
            }
            if (out) {
                System.out.println(""OUTBOUND:"");
                if (whitelist) {
                    System.out.print(""\twhitelist: "");
                    Set<String> list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);
                    System.out.println(list.toString());
                }
                if (blacklist) {
                    System.out.print(""\tblacklist: "");
                    Set<String> list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);
                    System.out.println(list.toString());
                }
            }
        } else {
            // edit mode
            System.out.println(""Updating blocking policy for "" + pid);
            if (in) {
                if (whitelist) {
                    System.out.println(""\tinbound whitelist ..."");
                    support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);
                }
                if (blacklist) {
                    System.out.println(""\tinbound blacklist ..."");
                    support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);
                }
            }
            if (out) {
                if (whitelist) {
                    System.out.println(""\toutbound whitelist ..."");
                    support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);
                }
                if (blacklist) {
                    System.out.println(""\toutbound blacklist ..."");
                    support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);
                }
            }
        }

        return null;
    }"
4264057,none,"    public double correlation(final double[] xArray, final double[] yArray)
            throws DimensionMismatchException {

        if (xArray.length != yArray.length) {
            throw new DimensionMismatchException(xArray.length, yArray.length);
        }

        final int n = xArray.length;
        final long numPairs = sum(n - 1);

        @SuppressWarnings(""unchecked"")
        Pair<Double, Double>[] pairs = new Pair[n];
        for (int i = 0; i < n; i++) {
            pairs[i] = new Pair<>(xArray[i], yArray[i]);
        }

        Arrays.sort(pairs, new Comparator<Pair<Double, Double>>() {
            /** {@inheritDoc} */
            @Override
            public int compare(Pair<Double, Double> pair1, Pair<Double, Double> pair2) {
                int compareFirst = pair1.getFirst().compareTo(pair2.getFirst());
                return compareFirst != 0 ? compareFirst : pair1.getSecond().compareTo(pair2.getSecond());
            }
        });

        long tiedXPairs = 0;
        long tiedXYPairs = 0;
        long consecutiveXTies = 1;
        long consecutiveXYTies = 1;
        Pair<Double, Double> prev = pairs[0];
        for (int i = 1; i < n; i++) {
            final Pair<Double, Double> curr = pairs[i];
            if (curr.getFirst().equals(prev.getFirst())) {
                consecutiveXTies++;
                if (curr.getSecond().equals(prev.getSecond())) {
                    consecutiveXYTies++;
                } else {
                    tiedXYPairs += sum(consecutiveXYTies - 1);
                    consecutiveXYTies = 1;
                }
            } else {
                tiedXPairs += sum(consecutiveXTies - 1);
                consecutiveXTies = 1;
                tiedXYPairs += sum(consecutiveXYTies - 1);
                consecutiveXYTies = 1;
            }
            prev = curr;
        }
        tiedXPairs += sum(consecutiveXTies - 1);
        tiedXYPairs += sum(consecutiveXYTies - 1);

        long swaps = 0;
        @SuppressWarnings(""unchecked"")
        Pair<Double, Double>[] pairsDestination = new Pair[n];
        for (int segmentSize = 1; segmentSize < n; segmentSize <<= 1) {
            for (int offset = 0; offset < n; offset += 2 * segmentSize) {
                int i = offset;
                final int iEnd = FastMath.min(i + segmentSize, n);
                int j = iEnd;
                final int jEnd = FastMath.min(j + segmentSize, n);

                int copyLocation = offset;
                while (i < iEnd || j < jEnd) {
                    if (i < iEnd) {
                        if (j < jEnd) {
                            if (pairs[i].getSecond().compareTo(pairs[j].getSecond()) <= 0) {
                                pairsDestination[copyLocation] = pairs[i];
                                i++;
                            } else {
                                pairsDestination[copyLocation] = pairs[j];
                                j++;
                                swaps += iEnd - i;
                            }
                        } else {
                            pairsDestination[copyLocation] = pairs[i];
                            i++;
                        }
                    } else {
                        pairsDestination[copyLocation] = pairs[j];
                        j++;
                    }
                    copyLocation++;
                }
            }
            final Pair<Double, Double>[] pairsTemp = pairs;
            pairs = pairsDestination;
            pairsDestination = pairsTemp;
        }

        long tiedYPairs = 0;
        long consecutiveYTies = 1;
        prev = pairs[0];
        for (int i = 1; i < n; i++) {
            final Pair<Double, Double> curr = pairs[i];
            if (curr.getSecond().equals(prev.getSecond())) {
                consecutiveYTies++;
            } else {
                tiedYPairs += sum(consecutiveYTies - 1);
                consecutiveYTies = 1;
            }
            prev = curr;
        }
        tiedYPairs += sum(consecutiveYTies - 1);

        final long concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps;
        final double nonTiedPairsMultiplied = (numPairs - tiedXPairs) * (double) (numPairs - tiedYPairs);
        return concordantMinusDiscordant / FastMath.sqrt(nonTiedPairsMultiplied);
    }"
4456439,none,"    public Builder defaultSchemaPathColumns() {
      this.columns = GroupScan.ALL_COLUMNS;
      return this;
    }"
4896610,none,"    @Override
    public boolean releaseCheckpoint(String checkpoint) {
        log.info(""Released checkpoint [{}]"", checkpoint);
        return store.release(checkpoint);
    }"
7268641,none,"	public String getSalesOrderId() {
		return this.salesOrderId;
	}"
9267571,none,"    public void reset(XMLComponentManager componentManager) throws XMLConfigurationException {

        XMLSecurityPropertyManager spm = (XMLSecurityPropertyManager)componentManager.getProperty(XML_SECURITY_PROPERTY_MANAGER);
        if (spm == null) {
            spm = new XMLSecurityPropertyManager();
            setProperty(XML_SECURITY_PROPERTY_MANAGER, spm);
        }

        XMLSecurityManager sm = (XMLSecurityManager)componentManager.getProperty(SECURITY_MANAGER);
        if (sm == null)
            setProperty(SECURITY_MANAGER,new XMLSecurityManager(true));

        faccessExternalSchema = spm.getValue(XMLSecurityPropertyManager.Property.ACCESS_EXTERNAL_SCHEMA);

        fGrammarBucket.reset();

        fSubGroupHandler.reset();

        boolean parser_settings = true;
        // If the component manager is the loader config don't bother querying it since it doesn't
        // recognize the PARSER_SETTINGS feature. Prevents an XMLConfigurationException from being
        // thrown.
        if (componentManager != fLoaderConfig) {
            parser_settings = componentManager.getFeature(PARSER_SETTINGS, true);
        }

        if (!parser_settings || !fSettingsChanged){
            // need to reprocess JAXP schema sources
            fJAXPProcessed = false;
            // reinitialize grammar bucket
            initGrammarBucket();
            if (fDeclPool != null) {
                fDeclPool.reset();
            }
            return;
        }

        //pass the component manager to the factory..
        fNodeFactory.reset(componentManager);

        // get registered entity manager to be able to resolve JAXP schema-source property:
        // Note: in case XMLSchemaValidator has created the loader,
        // the entity manager property is null
        fEntityManager = (XMLEntityManager)componentManager.getProperty(ENTITY_MANAGER);

        // get the error reporter
        fErrorReporter = (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);

        // Determine schema dv factory to use
        SchemaDVFactory dvFactory = null;
        dvFactory = fSchemaHandler.getDVFactory();
        if (dvFactory == null) {
            dvFactory = SchemaDVFactory.getInstance();
            fSchemaHandler.setDVFactory(dvFactory);
        }

        // get schema location properties
        try {
            fExternalSchemas = (String) componentManager.getProperty(SCHEMA_LOCATION);
            fExternalNoNSSchema = (String) componentManager.getProperty(SCHEMA_NONS_LOCATION);
        } catch (XMLConfigurationException e) {
            fExternalSchemas = null;
            fExternalNoNSSchema = null;
        }

        // get JAXP sources if available
        fJAXPSource = componentManager.getProperty(JAXP_SCHEMA_SOURCE, null);
        fJAXPProcessed = false;

        // clear grammars, and put the one for schema namespace there
        fGrammarPool = (XMLGrammarPool) componentManager.getProperty(XMLGRAMMAR_POOL, null);
        initGrammarBucket();

        boolean psvi = componentManager.getFeature(AUGMENT_PSVI, false);

        // Only use the decl pool when there is no chance that the schema
        // components will be exposed or cached.
        // TODO: when someone calls loadGrammar(XMLInputSource), the schema is
        // always exposed even without the use of a grammar pool.
        // Disabling the ""decl pool"" feature for now until we understand when
        // it can be safely used.
        if (!psvi && fGrammarPool == null && false) {
            if (fDeclPool != null) {
                fDeclPool.reset();
            }
            else {
                fDeclPool = new XSDeclarationPool();
            }
            fCMBuilder.setDeclPool(fDeclPool);
            fSchemaHandler.setDeclPool(fDeclPool);
            if (dvFactory instanceof SchemaDVFactoryImpl) {
                fDeclPool.setDVFactory((SchemaDVFactoryImpl)dvFactory);
                ((SchemaDVFactoryImpl)dvFactory).setDeclPool(fDeclPool);
            }
        } else {
            fCMBuilder.setDeclPool(null);
            fSchemaHandler.setDeclPool(null);
            if (dvFactory instanceof SchemaDVFactoryImpl) {
                ((SchemaDVFactoryImpl)dvFactory).setDeclPool(null);
            }
        }

        // get continue-after-fatal-error feature
        try {
            boolean fatalError = componentManager.getFeature(CONTINUE_AFTER_FATAL_ERROR, false);
            if (!fatalError) {
                fErrorReporter.setFeature(CONTINUE_AFTER_FATAL_ERROR, fatalError);
            }
        } catch (XMLConfigurationException e) {
        }
        // set full validation to false
        fIsCheckedFully = componentManager.getFeature(SCHEMA_FULL_CHECKING, false);

        // get generate-synthetic-annotations feature
        fSchemaHandler.setGenerateSyntheticAnnotations(componentManager.getFeature(GENERATE_SYNTHETIC_ANNOTATIONS, false));
        fSchemaHandler.reset(componentManager);
    }"
5578507,none,"  public static ConcurrentCompositeConfiguration createLocalConfig() {
    MicroserviceConfigLoader loader = new MicroserviceConfigLoader();
    loader.loadAndSort();
    if (localConfig.size() > 0) {
      ConfigModel model = new ConfigModel();
      model.setConfig(localConfig);
      loader.getConfigModels().add(model);
    }

    LOGGER.info(""create local config:"");
    for (ConfigModel configModel : loader.getConfigModels()) {
      LOGGER.info("" {}."", configModel.getUrl());
    }

    ConcurrentCompositeConfiguration config = ConfigUtil.createLocalConfig(loader.getConfigModels());
    ConfigUtil.setMicroserviceConfigLoader(config, loader);
    return config;
  }"
3701614,none,"      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Entry) {
          return mergeFrom((Entry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }"
7349010,none,"    @Override
    public String getErrorMessage(final NTLMState state) {
        Check.notNull(state, ""state""); //$NON-NLS-1$
        Check.isTrue(state instanceof NativeNTLMState, ""state instanceof NativeNTLMState""); //$NON-NLS-1$

        try {
            return NativeAuth.authGetErrorMessage(((NativeNTLMState) state).id);
        } catch (final Exception e) {
            return MessageFormat.format(
                Messages.getString(""NativeNTLM.CouldNotCallNativeNTLMFormat""), //$NON-NLS-1$
                e.getLocalizedMessage());
        }
    }"
3858217,none,"  @DELETE
  @Path(""{requestScheduleId}"")
  @Produces(MediaType.TEXT_PLAIN)
  @ApiOperation(value = ""Delete a request schedule"", notes = ""Changes status from COMPLETED to DISABLED"")
  @ApiResponses({
          @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),
          @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_CLUSTER_OR_HOST_NOT_FOUND),
          @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),
          @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),
          @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),
  })
  public Response deleteRequestSchedule(@Context HttpHeaders headers,
                                        @Context UriInfo ui,
                                        @PathParam(""requestScheduleId"") String requestScheduleId) {
    return handleRequest(headers, null, ui, Request.Type.DELETE,
      createRequestSchedule(m_clusterName, requestScheduleId));
  }"
5922177,none,"  protected boolean validateToken(String token) {
    try {
      SignedJWT signed = SignedJWT.parse(token);
      boolean sigValid = validateSignature(signed);
      if (!sigValid) {
        LOGGER.warn(""Signature of JWT token could not be verified. Please check the public key"");
        return false;
      }
      boolean expValid = validateExpiration(signed);
      if (!expValid) {
        LOGGER.warn(""Expiration time validation of JWT token failed."");
        return false;
      }
      String currentUser = (String) org.apache.shiro.SecurityUtils.getSubject().getPrincipal();
      if (currentUser == null) {
        return true;
      }
      String cookieUser = signed.getJWTClaimsSet().getSubject();
      if (!cookieUser.equals(currentUser)) {
        return false;
      }
      return true;
    } catch (ParseException ex) {
      LOGGER.info(""ParseException in validateToken"", ex);
      return false;
    }
  }"
3790421,none,"  @Override
  public final Object getUidOfPeriod(int periodIndex) {
    int childIndex = getChildIndexByPeriodIndex(periodIndex);
    int firstPeriodIndexInChild = getFirstPeriodIndexByChildIndex(childIndex);
    Object periodUidInChild =
        getTimelineByChildIndex(childIndex).getUidOfPeriod(periodIndex - firstPeriodIndexInChild);
    return getConcatenatedUid(getChildUidByChildIndex(childIndex), periodUidInChild);
  }"
9414619,none,"    private static void relinkComposableInvoker(final CallSite cs, final CompiledFunction inv, final boolean constructor) {
        final HandleAndAssumptions handleAndAssumptions = inv.getValidOptimisticInvocation(new Supplier<MethodHandle>() {
            @Override
            public MethodHandle get() {
                return inv.getInvokerOrConstructor(constructor);
            }
        });
        final MethodHandle handle = handleAndAssumptions.handle;
        final SwitchPoint assumptions = handleAndAssumptions.assumptions;
        final MethodHandle target;
        if(assumptions == null) {
            target = handle;
        } else {
            final MethodHandle relink = MethodHandles.insertArguments(RELINK_COMPOSABLE_INVOKER, 0, cs, inv, constructor);
            target = assumptions.guardWithTest(handle, MethodHandles.foldArguments(cs.dynamicInvoker(), relink));
        }
        cs.setTarget(target.asType(cs.type()));
    }"
6310221,none,"    private void setModalFieldsTooltips() {
        // set Tooltips
        this.tooltipInput.setTitle(MSGS.firewallPortForwardFormInboundInterfaceToolTip());
        this.tooltipOutput.setTitle(MSGS.firewallPortForwardFormOutboundInterfaceToolTip());
        this.tooltipLan.setTitle(MSGS.firewallPortForwardFormLanAddressToolTip());
        this.tooltipProtocol.setTitle(MSGS.firewallPortForwardFormProtocolToolTip());
        this.tooltipInternal.setTitle(MSGS.firewallPortForwardFormInternalPortToolTip());
        this.tooltipExternal.setTitle(MSGS.firewallPortForwardFormExternalPortToolTip());
        this.tooltipEnable.setTitle(MSGS.firewallPortForwardFormMasqueradingToolTip());
        this.tooltipPermittedNw.setTitle(MSGS.firewallPortForwardFormPermittedNetworkToolTip());
        this.tooltipPermittedMac.setTitle(MSGS.firewallPortForwardFormPermittedMacAddressToolTip());
        this.tooltipSource.setTitle(MSGS.firewallPortForwardFormSourcePortRangeToolTip());
        this.tooltipInput.reconfigure();
        this.tooltipOutput.reconfigure();
        this.tooltipLan.reconfigure();
        this.tooltipProtocol.reconfigure();
        this.tooltipExternal.reconfigure();
        this.tooltipInternal.reconfigure();
        this.tooltipEnable.reconfigure();
        this.tooltipPermittedNw.reconfigure();
        this.tooltipPermittedMac.reconfigure();
        this.tooltipSource.reconfigure();
    }"
7727842,none,"    public void selectOwner(String selectorPath, String key, Operation op) {
        if (isStopping()) {
            op.fail(new CancellationException(""Host is stopping""));
            return;
        }

        SelectAndForwardRequest body = this.selectOwnerRequests.get();
        body.key = key;

        NodeSelectorService nss = findNodeSelectorService(selectorPath, op);
        if (nss == null) {
            return;
        }

        nss.selectAndForward(op, body);
    }"
6128483,none,"    @Override
    public int size()
    {
        return 4;
    }"
7558115,none,"	public OperationResponse create(HttpStatus status, HttpHeaders headers,
			byte[] content) {
		return new StandardOperationResponse(status, augmentHeaders(headers, content),
				content);
	}"
7885799,none,"  @Override
  public void close() throws SecurityException {
    inner.close();
  }"
8348686,none,"	private static final void getPathComponents(String path, ArrayList<String> list) {
		if (path != null) {
			StringTokenizer tok = new StringTokenizer(path, File.pathSeparator);

			while (tok.hasMoreTokens()) {
				String name = tok.nextToken();
				File file = new File(name);

				if (file.exists())
					list.add(name);
			}
		}
	}"
7775896,none,"  synchronized void removeSegment(DataSegment segment)
  {
    if (segments.remove(segment)) {
      currSize -= segment.getSize();
    }
  }"
3717906,none,"    BundleArchiveRevision(String location, File revisionDir, File file) throws IOException{
        this.revisionDir = revisionDir;
        this.location = location;
        if (!this.revisionDir.exists()) {
            this.revisionDir.mkdirs();
        }
        if(revisionDir.getAbsolutePath().startsWith(RuntimeVariables.androidApplication.getFilesDir().getAbsolutePath())){
            externalStorage = false;
        }else{
            externalStorage = true;
        }
        if(shouldCopyInstallFile(file)){
            if (isSameDriver(revisionDir, file)) {
                this.revisionLocation = FILE_PROTOCOL;
                this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);
                boolean result = file.renameTo(bundleFile);
                if(!result){
                    ApkUtils.copyInputStreamToFile(new FileInputStream(file), bundleFile);
                }
            } else {
                this.revisionLocation = FILE_PROTOCOL;
                this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);
                ApkUtils.copyInputStreamToFile(new FileInputStream(file), bundleFile);
            }
            installSoLib(bundleFile);
        }else{
            this.revisionLocation = REFERENCE_PROTOCOL + file.getAbsolutePath();
            this.bundleFile = file;
            installSoLib(file);
        }
        updateMetadata();
    }"
8199173,none,"	public IGrammarAwareElementType getModelElementType() {
		return Model_ELEMENT_TYPE;
	}"
9410474,none,"    public void comment(char[] chars, int offset, int length)
        throws SAXException
    {
        if (_dom == null) {
           prepareNewDOM();
        }

        maybeEmitStartElement();
        _dom.comment(chars, offset, length);
    }"
3909025,none,"    protected boolean supportsNonFileResources() {
        return getClass().equals(Tar.class);
    }"
6904320,none,"        @Override
        public CapturedType cloneWithMetadata(TypeMetadata md) {
            return new CapturedType(tsym, bound, bound, lower, wildcard, md) {
                @Override
                public Type baseType() { return CapturedType.this.baseType(); }
            };
        }"
6436372,none,"    @Nullable
    static Integer doubleToInt32(@Nonnull Double d) {
        long rounded = Math.round(d);

        if (rounded >= Integer.MIN_VALUE && rounded <= Integer.MAX_VALUE) {
            return (int) rounded;
        } else {
            return null;
        }
    }"
7492767,none,"    @SuppressWarnings(""try"")
    private void doRun(Map<Method, CEntryPointData> entryPoints, Method mainEntryPoint,
                    JavaMainSupport javaMainSupport, String imageName, AbstractBootImage.NativeImageKind k,
                    SubstitutionProcessor harnessSubstitutions,
                    ForkJoinPool compilationExecutor, ForkJoinPool analysisExecutor) {
        List<HostedMethod> hostedEntryPoints = new ArrayList<>();

        OptionValues options = HostedOptionValues.singleton();
        SnippetReflectionProvider originalSnippetReflection = GraalAccess.getOriginalSnippetReflection();
        try (DebugContext debug = DebugContext.create(options, new GraalDebugHandlersFactory(originalSnippetReflection))) {
            setupNativeImage(imageName, options, entryPoints, javaMainSupport, harnessSubstitutions, analysisExecutor, originalSnippetReflection, debug);

            boolean returnAfterAnalysis = runPointsToAnalysis(imageName, options, debug);
            if (returnAfterAnalysis) {
                return;
            }

            NativeImageHeap heap;
            HostedMethod mainEntryPointHostedStub;
            HostedMetaAccess hMetaAccess;
            SharedRuntimeConfigurationBuilder runtime;
            try (StopTimer t = new Timer(imageName, ""universe"").start()) {
                hUniverse = new HostedUniverse(bigbang);
                hMetaAccess = new HostedMetaAccess(hUniverse, bigbang.getMetaAccess());

                new UniverseBuilder(aUniverse, bigbang.getMetaAccess(), hUniverse, hMetaAccess, HostedConfiguration.instance().createStaticAnalysisResultsBuilder(bigbang, hUniverse),
                                bigbang.getUnsupportedFeatures()).build(debug);

                runtime = new HostedRuntimeConfigurationBuilder(options, bigbang.getHostVM(), hUniverse, hMetaAccess, bigbang.getProviders()).build();
                registerGraphBuilderPlugins(featureHandler, runtime.getRuntimeConfig(), (HostedProviders) runtime.getRuntimeConfig().getProviders(), bigbang.getMetaAccess(), aUniverse,
                                hMetaAccess, hUniverse,
                                nativeLibraries, loader, false, true, bigbang.getAnnotationSubstitutionProcessor(), new SubstrateClassInitializationPlugin((SVMHost) aUniverse.hostVM()),
                                bigbang.getHostVM().getClassInitializationSupport());

                if (NativeImageOptions.PrintUniverse.getValue()) {
                    printTypes();
                }

                /* Find the entry point methods in the hosted world. */
                for (AnalysisMethod m : aUniverse.getMethods()) {
                    if (m.isEntryPoint()) {
                        HostedMethod found = hUniverse.lookup(m);
                        assert found != null;
                        hostedEntryPoints.add(found);
                    }
                }
                /* Find main entry point */
                if (mainEntryPoint != null) {
                    AnalysisMethod analysisStub = CEntryPointCallStubSupport.singleton().getStubForMethod(mainEntryPoint);
                    mainEntryPointHostedStub = (HostedMethod) hMetaAccess.getUniverse().lookup(analysisStub);
                    assert hostedEntryPoints.contains(mainEntryPointHostedStub);
                } else {
                    mainEntryPointHostedStub = null;
                }
                if (hostedEntryPoints.size() == 0) {
                    throw UserError.abort(""Warning: no entry points found, i.e., no method annotated with @"" + CEntryPoint.class.getSimpleName());
                }

                heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess);

                BeforeCompilationAccessImpl config = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);
                featureHandler.forEachFeature(feature -> feature.beforeCompilation(config));

                bigbang.getUnsupportedFeatures().report(bigbang);
            } catch (UnsupportedFeatureException ufe) {
                throw UserError.abort(ufe.getMessage());
            }

            recordMethodsWithStackValues();
            recordRestrictHeapAccessCallees(aUniverse.getMethods());

            /*
             * After this point, all TypeFlow (and therefore also TypeState) objects are unreachable
             * and can be garbage collected. This is important to keep the overall memory footprint
             * low. However, this also means we no longer have complete call chain information. Only
             * the summarized information stored in the StaticAnalysisResult objects is available
             * after this point.
             */
            bigbang.cleanupAfterAnalysis();

            NativeImageCodeCache codeCache;
            CompileQueue compileQueue;
            try (StopTimer t = new Timer(imageName, ""compile"").start()) {
                compileQueue = HostedConfiguration.instance().createCompileQueue(debug, featureHandler, hUniverse, runtime, DeoptTester.enabled(), bigbang.getProviders().getSnippetReflection(),
                                compilationExecutor);
                compileQueue.finish(debug);

                /* release memory taken by graphs for the image writing */
                hUniverse.getMethods().forEach(HostedMethod::clear);

                codeCache = NativeImageCodeCacheFactory.get().newCodeCache(compileQueue, heap);
                codeCache.layoutConstants();
                codeCache.layoutMethods(debug, imageName);

                AfterCompilationAccessImpl config = new AfterCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);
                featureHandler.forEachFeature(feature -> feature.afterCompilation(config));
            }

            try (Indent indent = debug.logAndIndent(""create native image"")) {
                try (DebugContext.Scope buildScope = debug.scope(""CreateBootImage"")) {
                    try (StopTimer t = new Timer(imageName, ""image"").start()) {

                        // Start building the model of the native image heap.
                        heap.addInitialObjects();
                        // Then build the model of the code cache, which can
                        // add objects to the native image heap.
                        codeCache.addConstantsToHeap();
                        // Finish building the model of the native image heap.
                        heap.addTrailingObjects();

                        AfterHeapLayoutAccessImpl config = new AfterHeapLayoutAccessImpl(featureHandler, loader, hMetaAccess, debug);
                        featureHandler.forEachFeature(feature -> feature.afterHeapLayout(config));

                        this.image = AbstractBootImage.create(k, hUniverse, hMetaAccess, nativeLibraries, heap, codeCache, hostedEntryPoints, mainEntryPointHostedStub, loader.getClassLoader());
                        image.build(debug);
                        if (NativeImageOptions.PrintUniverse.getValue()) {
                            /*
                             * This debug output must be printed _after_ and not _during_ image
                             * building, because it adds some PrintStream objects to static fields,
                             * which disrupts the heap.
                             */
                            codeCache.printCompilationResults();
                        }
                    }
                }
            }

            BeforeImageWriteAccessImpl beforeConfig = new BeforeImageWriteAccessImpl(featureHandler, loader, imageName, image,
                            runtime.getRuntimeConfig(), aUniverse, hUniverse, optionProvider, hMetaAccess, debug);
            featureHandler.forEachFeature(feature -> feature.beforeImageWrite(beforeConfig));

            try (StopTimer t = new Timer(imageName, ""write"").start()) {
                /*
                 * This will write the debug info too -- i.e. we may be writing more than one file,
                 * if the debug info is in a separate file. We need to push writing the file to the
                 * image implementation, because whether the debug info and image share a file or
                 * not is an implementation detail of the image.
                 */
                Path tmpDir = tempDirectory();
                Path imagePath = image.write(debug, generatedFiles(HostedOptionValues.singleton()), tmpDir, imageName, beforeConfig).getOutputFile();

                AfterImageWriteAccessImpl afterConfig = new AfterImageWriteAccessImpl(featureHandler, loader, hUniverse, imagePath, tmpDir, image.getBootImageKind(), debug);
                featureHandler.forEachFeature(feature -> feature.afterImageWrite(afterConfig));
            }
        }
    }"
4357598,none,"    private  static  Object bootServiceModule
        (
         final boolean create, final Object serviceModule,
         final String factoryInterface, final Properties properties
         )
        throws StandardException
    {
        try {
            return AccessController.doPrivileged
                (
                 new PrivilegedExceptionAction<Object>()
                 {
                     public Object run()
                         throws StandardException
                     {
                         return Monitor.bootServiceModule( create, serviceModule, factoryInterface, properties );
                     }
                 }
                 );
        } catch (PrivilegedActionException pae)
        {
            throw StandardException.plainWrapException( pae );
        }
    }"
4470846,none,"  private void parseArray(NameSegment nameSeg) {
    String name = nameSeg.getPath();
    ArraySegment arraySeg = ((ArraySegment) nameSeg.getChild());
    int index = arraySeg.getIndex();
    RequestedColumnImpl member = getImpl(name);
    if (member == null) {
      member = new RequestedColumnImpl(this, name);
      projection.add(name, member);
    } else if (member.isSimple()) {

      // Saw both a and a[x]. Occurs in project list.
      // Project all elements.

      member.projectAllElements();
      return;
    } else if (member.hasIndex(index)) {
      throw UserException
        .validationError()
        .message(""Duplicate array index in project list: %s[%d]"",
            member.fullName(), index)
        .build(logger);
    }
    member.addIndex(index);

    // Drills SQL parser does not support map arrays: a[0].c
    // But, the SchemaPath does support them, so no harm in
    // parsing them here.

    if (! arraySeg.isLastPath()) {
      parseInternal(nameSeg);
    }
  }"
9110608,none,"	public void onRow( boolean populateValue, FactTableRow factTableRow )
			throws DataException
	{
		for ( int aggrIndex = 0; aggrIndex < this.functions.length; aggrIndex++ )
		{
			Accumulator acc = this.accumulators.get( aggrIndex );
			
			// Calculate arguments to the aggregate aggregationtion

			acc.onRow( new Object[]{factTableRow.getMeasures( )[aggrIndex]} );
			

			if ( populateValue )
			{
				acc.finish( );
				currentRoundAggrValue[aggrIndex] = acc.getValue( );
				acc.start( );
			}
		}
	}"
8452328,none,"    public TelegramServiceRestBotAPIAdapter(RestBotAPI api) {
        this.api = api;
    }"
4104993,none,"    @Override
    public FunctionIdentifier getIdentifier() {
        return FID;
    }"
7896708,none,"    public static Rop opInvokeDirect(Prototype meth) {
        return new Rop(RegOps.INVOKE_DIRECT,
                       meth.getParameterFrameTypes(),
                       StdTypeList.THROWABLE);
    }"
5242909,none,"	public void streamStarted(LogEvent event) {
	  for (Object listener1 : listeners) {
		LogListener listener = (LogListener) listener1;
		listener.streamStarted(event);
	  }
	}"
9291749,none,"    public Shape createTransformedShape(Shape pSrc) {
        if (pSrc == null) {
            return null;
        }
        return new Path2D.Double(pSrc, this);
    }"
3875995,none,"  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.CLUSTER_NAME_PROPERTY_ID)
  public String getClusterName() {
    return clusterName;
  }"
5731614,none,"    void set(final String name, final String desc, final Handle bsm,
            final Object[] bsmArgs) {
        this.type = 'y';
        this.strVal1 = name;
        this.strVal2 = desc;
        this.objVal3 = bsm;
        this.objVals = bsmArgs;

        int hashCode = 'y' + name.hashCode() * desc.hashCode() * bsm.hashCode();
        for (Object bsmArg : bsmArgs) {
            hashCode *= bsmArg.hashCode();
        }
        this.hashCode = 0x7FFFFFFF & hashCode;
    }"
7197198,none,"    private static void doPaginateWithRecordPaginator(
            final IdentityClient identityClient, final String compartmentId) {

        System.out.println(""Pagination Using Record Paginator"");
        System.out.println(""==================="");

        // Build a request object as normal, including any sorting or filtering you wish to do
        final ListUsersRequest request =
                ListUsersRequest.builder().compartmentId(compartmentId).build();

        // Note that the iterable is over the model object
        final Iterable<User> recordIterator =
                identityClient.getPaginators().listUsersRecordIterator(request);
        for (User user : recordIterator) {
            System.out.println(user);
        }

        System.out.println();
        System.out.println();
    }"
7995724,none,"  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Bug347012TestLanguagePackage.MY_BINDING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Bug347012TestLanguagePackage.MY_BINDING__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case Bug347012TestLanguagePackage.MY_BINDING__EXPRESSION:
        return expression != null;
    }
    return super.eIsSet(featureID);
  }"
6658892,none,"    public APIRequestGetTestLeads requestFieldDataField () {
      return this.requestFieldDataField(true);
    }"
6511643,none,"  public static Class<Float[]> call(Float[] param) {
    return Float[].class;
  }"
6014861,none,"    @Override
    public Mono<ListMembersResponse> listMembers(ListMembersRequest request) {
        return get(request, ListMembersResponse.class, builder -> builder.pathSegment(""Groups"", request.getGroupId(), ""members""))
            .checkpoint();
    }"
5651881,none,"  @Override
  public Map<String, List<Integer>> getColumnInfoForQuery(String query) {
    // Manipulate the query to return immediately, with zero rows.
    String rawQuery = query.replace(SUBSTITUTE_TOKEN, "" (1 = 0) "");
    return getColumnInfoForRawQuery(rawQuery);
  }"
9192024,none,"	public void removeModifyListener( ModifyListener listener )
	{
		checkWidget( );
		if ( listener == null )
			SWT.error( SWT.ERROR_NULL_ARGUMENT );
		removeListener( SWT.Modify, listener );
	}"
4527035,none,"    public SpellCheckerGui() {
        super();
        initComponents();
        this.setTitle(""Spellchecker Gui"");
    }"
5712776,none,"  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder(""SupervisorInfo("");
    boolean first = true;

    sb.append(""time_secs:"");
    sb.append(this.time_secs);
    first = false;
    if (!first) sb.append("", "");
    sb.append(""hostname:"");
    if (this.hostname == null) {
      sb.append(""null"");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (is_set_assignment_id()) {
      if (!first) sb.append("", "");
      sb.append(""assignment_id:"");
      if (this.assignment_id == null) {
        sb.append(""null"");
      } else {
        sb.append(this.assignment_id);
      }
      first = false;
    }
    if (is_set_used_ports()) {
      if (!first) sb.append("", "");
      sb.append(""used_ports:"");
      if (this.used_ports == null) {
        sb.append(""null"");
      } else {
        sb.append(this.used_ports);
      }
      first = false;
    }
    if (is_set_meta()) {
      if (!first) sb.append("", "");
      sb.append(""meta:"");
      if (this.meta == null) {
        sb.append(""null"");
      } else {
        sb.append(this.meta);
      }
      first = false;
    }
    if (is_set_scheduler_meta()) {
      if (!first) sb.append("", "");
      sb.append(""scheduler_meta:"");
      if (this.scheduler_meta == null) {
        sb.append(""null"");
      } else {
        sb.append(this.scheduler_meta);
      }
      first = false;
    }
    if (is_set_uptime_secs()) {
      if (!first) sb.append("", "");
      sb.append(""uptime_secs:"");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (is_set_version()) {
      if (!first) sb.append("", "");
      sb.append(""version:"");
      if (this.version == null) {
        sb.append(""null"");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (is_set_resources_map()) {
      if (!first) sb.append("", "");
      sb.append(""resources_map:"");
      if (this.resources_map == null) {
        sb.append(""null"");
      } else {
        sb.append(this.resources_map);
      }
      first = false;
    }
    if (is_set_server_port()) {
      if (!first) sb.append("", "");
      sb.append(""server_port:"");
      sb.append(this.server_port);
      first = false;
    }
    sb.append("")"");
    return sb.toString();
  }"
7982015,none,"	protected Bug288734TestLanguageRuntimeModule createRuntimeModule() {
		// make it work also with Maven/Tycho and OSGI
		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=493672
		return new Bug288734TestLanguageRuntimeModule() {
			@Override
			public ClassLoader bindClassLoaderToInstance() {
				return Bug288734TestLanguageInjectorProvider.class
						.getClassLoader();
			}
		};
	}"
8123359,none,"  public <T extends Object> List<NamedSerializationContexts<T>> getNamedContexts(final SerializationContextMap<T> map) {
    final ArrayList<NamedSerializationContexts<T>> result = CollectionLiterals.<NamedSerializationContexts<T>>newArrayList();
    final HashMap<String, Integer> names = CollectionLiterals.<String, Integer>newHashMap();
    List<SerializationContextMap.Entry<T>> _values = map.values();
    for (final SerializationContextMap.Entry<T> e : _values) {
      Set<EClass> _types = e.getTypes();
      for (final EClass t : _types) {
        {
          final List<ISerializationContext> ctx = e.getContexts(t);
          String _xifexpression = null;
          if ((t == null)) {
            _xifexpression = """";
          } else {
            _xifexpression = t.getName();
          }
          String _plus = (_xifexpression + ""_"");
          String _significantGrammarElement = this.getSignificantGrammarElement(ctx);
          final String name = (_plus + _significantGrammarElement);
          final Integer dup = names.get(name);
          String _xifexpression_1 = null;
          if ((dup == null)) {
            String _xblockexpression = null;
            {
              names.put(name, Integer.valueOf(1));
              _xblockexpression = name;
            }
            _xifexpression_1 = _xblockexpression;
          } else {
            String _xblockexpression_1 = null;
            {
              names.put(name, Integer.valueOf(((dup).intValue() + 1)));
              _xblockexpression_1 = ((name + ""_"") + dup);
            }
            _xifexpression_1 = _xblockexpression_1;
          }
          final String unique = _xifexpression_1;
          T _value = e.getValue();
          NamedSerializationContexts<T> _namedSerializationContexts = new NamedSerializationContexts<T>(unique, t, ctx, _value);
          result.add(_namedSerializationContexts);
        }
      }
    }
    return result;
  }"
4536178,none,"    public AnnotationRecorder() {
        super(Opcodes.ASM5);
    }"
6785745,none,"    @Override
    public APIRequestGetAppInstalledGroups requestFields (List<String> fields, boolean value) {
      for (String field : fields) {
        this.requestField(field, value);
      }
      return this;
    }"
7698738,none,"	boolean testnext(int c) {
		if (t.token == c) {
			next();
			return true;
		} else
			return false;
	}"
4440109,none,"  private IdentificationCardScan createScan (final String customerIdentifier, final String cardNumber) throws Exception {
    final IdentificationCardScan scan = ScanGenerator.createRandomScan(null);

    this.postIdentificationCardScan(customerIdentifier, cardNumber, scan);

    return scan;
  }"
8429775,none,"    public void setContentTypeHeader(Boolean contentTypeHeader) {
        this.contentTypeHeader = contentTypeHeader;
    }"
4496060,none,"        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return ""minorType"";
                case 2: return ""mode"";
                case 3: return ""width"";
                case 4: return ""precision"";
                case 5: return ""scale"";
                case 6: return ""timeZone"";
                case 7: return ""subType"";
                default: return null;
            }
        }"
4185249,none,"    @Override
    public String toString()
    {
        return ""("" + left + "","" + right + "")"";
    }"
6073975,none,"        @Override
        public int length() {
            return 2;
        }"
7279934,none,"                    public ImageArguments crop(CropRegion value) {
                        if (value != null) {
                            startArgument(""crop"");
                            _queryBuilder.append(value.toString());
                        }
                        return this;
                    }"
6228656,none,"	@Test
	public void test_contains_Point_BottomConcavePentagonTangentPoints() {
		assertFalse(""This point is outside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(-1, 4)));
		assertTrue(""This point is inside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(1, 4)));
		assertTrue(""This point is inside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(5, 4)));
		assertFalse(""This point is outside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(9, 4)));
	}"
4944991,none,"    public Password(String value) {
        this.value = value;
    }"
7231995,none,"    @Implementation(minSdk = JELLY_BEAN_MR1)
    @SuppressWarnings(""robolectric.ShadowReturnTypeMismatch"")
    protected static boolean setLocationProviderEnabledForUser(
        ContentResolver cr, String provider, boolean enabled, int uid) {
      return updateEnabledProviders(cr, provider, enabled);
    }"
9331036,none,"    public MethodInfo getFailedCompile() {
        return new MethodInfo(lastFailedMethod.stringValue(),
                              (int) lastFailedType.longValue(),
                              -1);
    }"
7581323,none,"	@Override
	public HandlerStrategies.Builder localeContextResolver(LocaleContextResolver localeContextResolver) {
		Assert.notNull(localeContextResolver, ""LocaleContextResolver must not be null"");
		this.localeContextResolver = localeContextResolver;
		return this;
	}"
6340833,none,"  @Override
  @Pure
  public int hashCode() {
    return 31 * 1 + ((this.threads== null) ? 0 : Arrays.deepHashCode(this.threads));
  }"
5855387,none,"    void setPerUserTestWhileIdle(final Map<String, Boolean> userDefaultTestWhileIdle) {
        assertInitializationAllowed();
        if (perUserTestWhileIdle == null) {
            perUserTestWhileIdle = createMap();
        } else {
            perUserTestWhileIdle.clear();
        }
        perUserTestWhileIdle.putAll(userDefaultTestWhileIdle);
    }"
8967998,none,"  private void asJson(OutputStream out, Map<String, Object> data)
      throws HiveException
      {
    try {
      new ObjectMapper().writeValue(out, data);
    } catch (IOException e) {
      throw new HiveException(""Unable to convert to json"", e);
    }
      }"
7592195,none,"  @CliCommand(value = ""!g"",
      help = ""Passes a command directly through to the Felix shell infrastructure."")
  public void shell(
      @CliOption(
          key = """",
          mandatory = false,
          specifiedDefaultValue = ""help"",
          unspecifiedDefaultValue = ""help"",
          help = ""The command to pass to Felix (WARNING: no validation or security checks are performed).""
              + ""Default: `help`."") final String commandLine) throws Exception {

    perform(commandLine);
  }"
7416545,none,"	public static EvictionActionType valueOfIgnoreCase(final String name) {

		for (EvictionActionType evictionActionType : values()) {
			if (evictionActionType.name().equalsIgnoreCase(name)) {
				return evictionActionType;
			}
		}

		return null;
	}"
9097530,none,"    protected Assign(boolean direct) {
        this.direct = direct;
    }"
4266432,none,"    public Integer getThreshold() {
        return threshold;
    }"
6017172,none,"    private ModelAndView getUserApprovalPageResponse(Map<String, Object> model,
                                                     AuthorizationRequest authorizationRequest, Authentication principal) {
        logger.debug(""Loading user approval page: "" + userApprovalPage);
        model.putAll(userApprovalHandler.getUserApprovalRequest(authorizationRequest, principal));
        return new ModelAndView(userApprovalPage, model);
    }"
4932887,none,"    public Map< String, String > listLanguages(PageContext pageContext)
    {
        Map< String, String > resultMap = new LinkedHashMap<>();
        String clientLanguage = ((HttpServletRequest) pageContext.getRequest()).getLocale().toString();

        List< String > entries = ClassUtil.classpathEntriesUnder( DIRECTORY );
        for( String name : entries ) {
            if ( name.equals( I18NRESOURCE_EN ) ||
                    (name.startsWith( I18NRESOURCE_PREFIX ) && name.endsWith( I18NRESOURCE_SUFFIX ) ) )
            {
                if (name.equals( I18NRESOURCE_EN )) {
                    name = I18NRESOURCE_EN_ID;
                }    else {
                    name = name.substring(I18NRESOURCE_PREFIX.length(), name.lastIndexOf(I18NRESOURCE_SUFFIX));
                }
                Locale locale = new Locale(name.substring(0, 2), ((name.indexOf(""_"") == -1) ? """" : name.substring(3, 5)));
                String defaultLanguage = """";
                if (clientLanguage.startsWith(name))
                {
                    defaultLanguage = LocaleSupport.getLocalizedMessage(pageContext, I18NDEFAULT_LOCALE);
                }
                resultMap.put(name, locale.getDisplayName(locale) + "" "" + defaultLanguage);
            }
        }

        return resultMap;
    }"
8276759,none,"    private Mono<ModSeq> tryUpdateModSeq(CassandraId mailboxId, ModSeq modSeq) {
        ModSeq nextModSeq = modSeq.next();
        return cassandraAsyncExecutor.executeReturnApplied(
            update.bind()
                .setUUID(MAILBOX_ID, mailboxId.asUuid())
                .setLong(NEXT_MODSEQ, nextModSeq.getValue())
                .setLong(MOD_SEQ_CONDITION, modSeq.getValue()))
            .flatMap(success -> successToModSeq(nextModSeq, success));
    }"
4028364,none,"    @Override
    public Sampler deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
      JsonNode node = jp.getCodec().readTree(jp);
      String type = node.get(""type"").asText();
      switch (type) {
        case ""uniform"":
          {
            double lowerBound = node.get(""lower"").asDouble();
            double upperBound = node.get(""upper"").asDouble();
            checkArgument(
                lowerBound >= 0,
                ""The lower bound of uniform distribution should be a non-negative number, ""
                    + ""but found %s."",
                lowerBound);
            return fromRealDistribution(new UniformRealDistribution(lowerBound, upperBound));
          }
        case ""exp"":
          {
            double mean = node.get(""mean"").asDouble();
            return fromRealDistribution(new ExponentialDistribution(mean));
          }
        case ""normal"":
          {
            double mean = node.get(""mean"").asDouble();
            double stddev = node.get(""stddev"").asDouble();
            checkArgument(
                mean >= 0,
                ""The mean of normal distribution should be a non-negative number, but found %s."",
                mean);
            return fromRealDistribution(new NormalDistribution(mean, stddev));
          }
        case ""const"":
          {
            double constant = node.get(""const"").asDouble();
            checkArgument(
                constant >= 0,
                ""The value of constant distribution should be a non-negative number, but found %s."",
                constant);
            return fromRealDistribution(new ConstantRealDistribution(constant));
          }
        case ""zipf"":
          {
            double param = node.get(""param"").asDouble();
            final double multiplier =
                node.has(""multiplier"") ? node.get(""multiplier"").asDouble() : 1.0;
            checkArgument(
                param > 1,
                ""The parameter of the Zipf distribution should be > 1, but found %s."",
                param);
            checkArgument(
                multiplier >= 0,
                ""The multiplier of the Zipf distribution should be >= 0, but found %s."",
                multiplier);
            final ZipfDistribution dist = new ZipfDistribution(100, param);
            return scaledSampler(fromIntegerDistribution(dist), multiplier);
          }
        default:
          {
            throw new IllegalArgumentException(""Unknown distribution type: "" + type);
          }
      }
    }"
7842162,none,"  protected void createClientServerScenarion_SingleConnection(ArrayList commonAttributes,
      int localMaxMemoryServer1, int localMaxMemoryServer2, int localMaxMemoryServer3) {
    createCacheInClientServer();
    Integer port1 = (Integer) server1.invoke(() -> PRClientServerTestBase
        .createCacheServer(commonAttributes, new Integer(localMaxMemoryServer1)));
    server2.invoke(() -> PRClientServerTestBase.createCacheServer(commonAttributes,
        new Integer(localMaxMemoryServer2)));
    serverPort1 = port1;
    client.invoke(() -> PRClientServerTestBase.createCacheClient_SingleConnection(
        NetworkUtils.getServerHostName(server1.getHost()), port1));
  }"
8857568,none,"  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_value = true && (isSetValue());
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_envPathOrder = true && (isSetEnvPathOrder());
    list.add(present_envPathOrder);
    if (present_envPathOrder)
      list.add(envPathOrder);

    return list.hashCode();
  }"
9263532,none,"    @Test
    public void run2() throws Throwable {
        runTest(""test"", 2);
    }"
7763232,none,"  public StorageAdapter getAdapter()
  {
    return adapter;
  }"
5470089,none,"    @Override
    public ListenableFuture<Void> recover(QueueManagingVirtualHost<?> virtualHost)
    {
        EventLogger eventLogger = virtualHost.getEventLogger();
        MessageStore store = virtualHost.getMessageStore();
        MessageStore.MessageStoreReader storeReader = store.newMessageStoreReader();
        MessageStoreLogSubject logSubject = new MessageStoreLogSubject(virtualHost.getName(), store.getClass().getSimpleName());

        Map<Queue<?>, Integer> queueRecoveries = new TreeMap<>();
        Map<Long, ServerMessage<?>> recoveredMessages = new HashMap<>();
        Map<Long, StoredMessage<?>> unusedMessages = new TreeMap<>();
        Map<UUID, Integer> unknownQueuesWithMessages = new HashMap<>();
        Map<Queue<?>, Integer> queuesWithUnknownMessages = new HashMap<>();

        eventLogger.message(logSubject, MessageStoreMessages.RECOVERY_START());

        storeReader.visitMessages(new MessageVisitor(recoveredMessages, unusedMessages));

        eventLogger.message(logSubject, TransactionLogMessages.RECOVERY_START(null, false));
        try
        {
            storeReader.visitMessageInstances(new MessageInstanceVisitor(virtualHost,
                                                                         store,
                                                                         queueRecoveries,
                                                                         recoveredMessages,
                                                                         unusedMessages,
                                                                         unknownQueuesWithMessages,
                                                                         queuesWithUnknownMessages));
        }
        finally
        {
            if (!unknownQueuesWithMessages.isEmpty())
            {
                unknownQueuesWithMessages.forEach((queueId, count) -> {
                    LOGGER.info(""Discarded {} entry(s) associated with queue id '{}' as a queue with this ""
                                 + ""id does not appear in the configuration."",
                                 count, queueId);
                });
            }
            if (!queuesWithUnknownMessages.isEmpty())
            {
                queuesWithUnknownMessages.forEach((queue, count) -> {
                    LOGGER.info(""Discarded {} entry(s) associated with queue '{}' as the referenced message ""
                                 + ""does not exist."",
                                 count, queue.getName());
                });
            }
        }

        for(Map.Entry<Queue<?>, Integer> entry : queueRecoveries.entrySet())
        {
            Queue<?> queue = entry.getKey();
            Integer deliveredCount = entry.getValue();
            eventLogger.message(logSubject, TransactionLogMessages.RECOVERED(deliveredCount, queue.getName()));
            eventLogger.message(logSubject, TransactionLogMessages.RECOVERY_COMPLETE(queue.getName(), true));
            queue.completeRecovery();
        }

        for (Queue<?> q : virtualHost.getChildren(Queue.class))
        {
            if (!queueRecoveries.containsKey(q))
            {
                q.completeRecovery();
            }
        }

        storeReader.visitDistributedTransactions(new DistributedTransactionVisitor(virtualHost,
                                                                                   eventLogger,
                                                                                   logSubject, recoveredMessages, unusedMessages));

        for(StoredMessage<?> m : unusedMessages.values())
        {
            LOGGER.debug(""Message id '{}' is orphaned, removing"", m.getMessageNumber());
            m.remove();
        }

        if (unusedMessages.size() > 0)
        {
            LOGGER.info(""Discarded {} orphaned message(s)."", unusedMessages.size());
        }

        eventLogger.message(logSubject, TransactionLogMessages.RECOVERY_COMPLETE(null, false));

        eventLogger.message(logSubject,
                             MessageStoreMessages.RECOVERED(recoveredMessages.size() - unusedMessages.size()));
        eventLogger.message(logSubject, MessageStoreMessages.RECOVERY_COMPLETE());

        return Futures.immediateFuture(null);
    }"
7049236,none,"  private boolean optimizeForGoal(ClusterModel clusterModel,
                                  Goal goal,
                                  GoalViolations goalViolations,
                                  Set<Integer> excludedBrokersForLeadership,
                                  Set<Integer> excludedBrokersForReplicaMove)
      throws KafkaCruiseControlException {
    if (clusterModel.topics().isEmpty()) {
      LOG.info(""Skipping goal violation detection because the cluster model does not have any topic."");
      return false;
    }
    Map<TopicPartition, List<Integer>> initReplicaDistribution = clusterModel.getReplicaDistribution();
    Map<TopicPartition, Integer> initLeaderDistribution = clusterModel.getLeaderDistribution();
    try {
      goal.optimize(clusterModel, new HashSet<>(), new OptimizationOptions(excludedTopics(clusterModel),
                                                                           excludedBrokersForLeadership,
                                                                           excludedBrokersForReplicaMove));
    } catch (OptimizationFailureException ofe) {
      // An OptimizationFailureException indicates (1) a hard goal violation that cannot be fixed typically due to
      // lack of physical hardware (e.g. insufficient number of racks to satisfy rack awareness, insufficient number
      // of brokers to satisfy Replica Capacity Goal, or insufficient number of resources to satisfy resource
      // capacity goals), or (2) a failure to move offline replicas away from dead brokers/disks.
      goalViolations.addViolation(goal.name(), false);
      return true;
    }
    Set<ExecutionProposal> proposals = AnalyzerUtils.getDiff(initReplicaDistribution, initLeaderDistribution, clusterModel);
    LOG.trace(""{} generated {} proposals"", goal.name(), proposals.size());
    if (!proposals.isEmpty()) {
      // A goal violation that can be optimized by applying the generated proposals.
      goalViolations.addViolation(goal.name(), true);
      return true;
    } else {
      // The goal is already satisfied.
      return false;
    }
  }"
8246323,none,"    private void setResponse(CachedSourceResponse response) throws IOException {
        this.response = response;
        if (this.expires != 0) {
            try {
                this.cache.store(this.cacheKey, this.response);
            } catch (ProcessingException e) {
                throw new CascadingIOException(""Failure storing response."", e);
            }
        }
    }"
5200336,none,"    public SftpErrorStatusDataHandler getErrorStatusDataHandler() {
        return errorStatusDataHandler;
    }"
5761917,none,"	@Override 
	public boolean equals(Object that) {
		if( !(that instanceof PlanningCoCodingGroup) )
			return false;
		
		PlanningCoCodingGroup thatgrp = (PlanningCoCodingGroup) that;
		return Arrays.equals(_colIndexes, thatgrp._colIndexes);
	}"
8765693,none,"  public static RMNode newNodeInfo(String rackName, String hostName,
                              final ResourceOption resourceOption, int port) {
    final NodeId nodeId = newNodeID(hostName, port);
    final String nodeAddr = hostName + "":"" + port;
    final String httpAddress = hostName;
    
    return new FakeRMNodeImpl(nodeId, nodeAddr, httpAddress,
        resourceOption, rackName, ""Me good"",
        port, hostName, null);
  }"
8240678,none,"    public void initialize(final Attribute[] attributes, final ElementProcessor parent) throws IOException {
        super.initialize(attributes, parent);
        // default value (when <gmr:Cell> has no ValueType attribute)
        int cellType = CellType.CELL_TYPE_FORMULA;
        try {
            cellType = getCellType();
        } catch (NullPointerException ignored) {
        }
        _cell = getSheet().getRow(getRow()).createCell(getColumn(), cellType);
    }"
3869246,none,"    private void fillLocalToolBar(IToolBarManager toolBarManager) {
        toolBarManager.add(refreshAction);
        toolBarManager.add(focusDialogActionToolbar);
        toolBarManager.add(new Separator());
        toolBarManager.add(historyAction);
        toolBarManager.add(forwardAction);
    }"
5311043,none,"    private void appendXmlComparison1(SQLBuffer buf, String op,
            FilterValue lhs, FilterValue rhs) {
        boolean castrhs = false;
        Class<?> rc = Filters.wrap(rhs.getType());
        int type = 0;
        if (rhs.isConstant()) {
            type = getJDBCType(JavaTypes.getTypeCode(rc), false);
            castrhs = true;
        }

        appendXmlExists(buf, lhs);

        buf.append("" "").append(op).append("" "");

        buf.append(""$"");
        if (castrhs)
            buf.append(""Parm"");
        else
            rhs.appendTo(buf);

        buf.append(""]' PASSING "");
        appendXmlVar(buf, lhs);
        buf.append("", "");

        if (castrhs)
            appendCast(buf, rhs, type);
        else
            rhs.appendTo(buf);

        buf.append("" AS \"""");
        if (castrhs)
            buf.append(""Parm"");
        else
            rhs.appendTo(buf);
        buf.append(""\"")"");
    }"
7245995,none,"    public void notifyActivated() {
        resetResults();
        
        resetter = Lookup.getDefault().lookup(ObjectsResetter.class);
        resetter.controller = this;
        
        if (getSession().inProgress() && !currentMode.currentSettingsValid()) {
            final String oldMode = currentMode.getName();
            final String newMode = allClassesMode.getName();
            setMode(allClassesMode);
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    ProfilerDialogs.displayInfo(Bundle.MethodsFeature_modeReset(
                                                oldMode, newMode));
                }
            });
        }
    }"
8697369,none,"    public ModelMenuCondition(ModelMenuItem modelMenuItem, Element conditionElement) {
        this.passStyleExdr = FlexibleStringExpander.getInstance(conditionElement.getAttribute(""pass-style""));
        this.failStyleExdr = FlexibleStringExpander.getInstance(conditionElement.getAttribute(""disabled-style""));
        this.condition = AbstractModelCondition.DEFAULT_CONDITION_FACTORY.newInstance(modelMenuItem, conditionElement);
    }"
7353142,none,"    public _MonthlyDOWRecurrence getMonthlyDOWRecurrence()
    {
        return this.monthlyDOWRecurrence;
    }"
6257330,none,"    @Override
    public Object convertValue(final ActionFields e, final String value) {
        if (STATUS.equals(e)) {
            return convertStatusValue(value);
        }
        return value;
    }"
6981479,none,"  @Override
  public ProjectConfig loadConfiguration(String configFilename) throws InvalidProject {
    return parse(projectConfigs.get(configFilename));
  }"
3701417,none,"    public final long getUlong56() {
        if (position + 6 >= origin + limit) throw new IllegalArgumentException(""limit excceed: ""
                                                                               + (position - origin + 6));

        byte[] buf = buffer;
        return ((long) (0xff & buf[position++])) | ((long) (0xff & buf[position++]) << 8)
               | ((long) (0xff & buf[position++]) << 16) | ((long) (0xff & buf[position++]) << 24)
               | ((long) (0xff & buf[position++]) << 32) | ((long) (0xff & buf[position++]) << 40)
               | ((long) (0xff & buf[position++]) << 48);
    }"
4106345,none,"  private FrameworkMethod getParametersMethod(TestClass testClass)
      throws Exception {
    List<FrameworkMethod> methods = testClass
        .getAnnotatedMethods(Parameterized.Parameters.class);
    for (FrameworkMethod each : methods) {
      int modifiers = each.getMethod().getModifiers();
      if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))
        return each;
    }

    throw new Exception(""No public static parameters method on class ""
        + testClass.getName());
  }"
7622719,none,"	public static String[][] suggestArgumentNamesWithProposals(IJavaProject project, IMethodBinding binding) {
		int nParams = binding.getParameterTypes().length;
		if (nParams > 0) {
			try {
				IMethod method = (IMethod) binding.getMethodDeclaration().getJavaElement();
				if (method != null) {
					String[] parameterNames = method.getParameterNames();
					if (parameterNames.length == nParams) {
						return suggestArgumentNamesWithProposals(project, parameterNames);
					}
				}
			}
			catch (JavaModelException e) {
				// ignore
			}
		}
		String[][] names = new String[nParams][];
		for (int i = 0; i < names.length; i++) {
			names[i] = new String[] { ""arg"" + i }; //$NON-NLS-1$
		}
		return names;
	}"
6610964,none,"    public final void mFullStop() throws RecognitionException {
        try {
            int _type = FullStop;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalTypesLexer.g:183:10: ( '.' )
            // InternalTypesLexer.g:183:12: '.'
            {
            match('.'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
8914575,none,"  public LeadLagInfo getLlInfo() {
    return llInfo;
  }"
6328915,none,"    public String getUserName() {
        return userName;
    }"
6734039,none,"    @Override
    public APIRequestGetAdCreatives requestField (String field, boolean value) {
      this.requestFieldInternal(field, value);
      return this;
    }"
8908782,none,"    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
      return fields;
    }"
7889326,none,"    @Override
    public <T> Optional<T> createOptional(ValueTypeInfo<T> innerType) throws IOException {
      if (stream.readBoolean()) {
        return Optional.of(innerType.createNotNull(this));
      }
      return Optional.empty();
    }"
7458584,none,"        @Override
        public void remove() {
            throw new UnsupportedOperationException();
        }"
8902996,none,"  private SparkSkewJoinProcFactory() {
    // prevent instantiation
  }"
9197046,none,"	public static boolean isValidReferenceForCompoundElement( Module module,
			DesignElement element )
	{
		ElementRefValue refValue = (ElementRefValue) element.getLocalProperty(
				module, IDesignElementModel.EXTENDS_PROP );
		if ( refValue == null )
			return true;

		if ( element.getDefn( ).isContainer( ) && !refValue.isResolved( ) )
			return false;

		// if any ancestor of this element loses extended element, return false

		DesignElement parent = element.getExtendsElement( );
		while ( parent != null )
		{
			if ( !isValidReferenceForCompoundElement( parent.getRoot( ), parent ) )
				return false;
			parent = parent.getExtendsElement( );
		}

		return true;
	}"
7009087,none,"  private RequestHandler(
      @Nullable Class<C> component,
      Provider<? extends RequestComponentBuilder<C>> requestComponentBuilderProvider,
      RequestAuthenticator requestAuthenticator) {
    // If the component class isn't explicitly provided, infer it from the class's own typing.
    // This is safe only for use by subclasses of RequestHandler where the generic parameter is
    // preserved at runtime, so only expose that option via the protected constructor.
    this.router = Router.create(
        component != null ? component : new TypeInstantiator<C>(getClass()){}.getExactType());
    this.requestComponentBuilderProvider = checkNotNull(requestComponentBuilderProvider);
    this.requestAuthenticator = checkNotNull(requestAuthenticator);
  }"
9466197,none,"  @Override
  public int compareInputOrderTo(SchedulableEntity other) {
    if (other instanceof SchedulerApplicationAttempt) {
      return getApplicationId().compareTo(
        ((SchedulerApplicationAttempt)other).getApplicationId());
    }
    return 1;//let other types go before this, if any
  }"
8352018,none,"	void m63(C36 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
4415593,none,"        @SuppressWarnings(""unchecked"")
        @Override
        public void write(T data) throws IOException {
            Class<?> actualCls = entityCls != Object.class ? entityCls : data.getClass();
            if (writer == null) {
                writer = (MessageBodyWriter<T>)providers.getMessageBodyWriter(actualCls, actualCls, anns, mt);
                if (writer == null) {
                    throw new InternalServerErrorException();
                }
            }
            writer.writeTo(data, actualCls, actualCls, anns, mt, headers, os);
        }"
7214745,none,"    private void init(Class<?> interfaceClass, Object interfaceInstance) {
        /**
         * The interface this server implements.
         */
        this.interfaceInstance = interfaceInstance;
        this.serviceDescription = new ServiceDescription(interfaceClass);
    }"
7085469,none,"        @Override
        public V computeIfAbsent(K key,
                Function<? super K, ? extends V> mappingFunction) {
            throw new UnsupportedOperationException();
        }"
6925834,none,"  public void setPositionExt(GphotoPosition positionExt) {
    if (positionExt == null) {
      removeExtension(GphotoPosition.class);
    } else {
      setExtension(positionExt);
    }
  }"
4500366,none,"  @Override
  public void configure(Context context) {
    this.headerName = context.getString(CONFIG_MULTIPLEX_HEADER_NAME,
        DEFAULT_MULTIPLEX_HEADER);

    Map<String, Channel> channelNameMap = getChannelNameMap();

    defaultChannels = getChannelListFromNames(
        context.getString(CONFIG_DEFAULT_CHANNEL), channelNameMap);

    Map<String, String> mapConfig =
        context.getSubProperties(CONFIG_PREFIX_MAPPING);

    channelMapping = new HashMap<String, List<Channel>>();

    for (String headerValue : mapConfig.keySet()) {
      List<Channel> configuredChannels = getChannelListFromNames(
          mapConfig.get(headerValue),
          channelNameMap);

      //This should not go to default channel(s)
      //because this seems to be a bad way to configure.
      if (configuredChannels.size() == 0) {
        throw new FlumeException(""No channel configured for when ""
            + ""header value is: "" + headerValue);
      }

      if (channelMapping.put(headerValue, configuredChannels) != null) {
        throw new FlumeException(""Selector channel configured twice"");
      }
    }
    //If no mapping is configured, it is ok.
    //All events will go to the default channel(s).
    Map<String, String> optionalChannelsMapping =
        context.getSubProperties(CONFIG_PREFIX_OPTIONAL + ""."");

    optionalChannels = new HashMap<String, List<Channel>>();
    for (String hdr : optionalChannelsMapping.keySet()) {
      List<Channel> confChannels = getChannelListFromNames(
              optionalChannelsMapping.get(hdr), channelNameMap);
      if (confChannels.isEmpty()) {
        confChannels = EMPTY_LIST;
      }
      //Remove channels from optional channels, which are already
      //configured to be required channels.

      List<Channel> reqdChannels = channelMapping.get(hdr);
      //Check if there are required channels, else defaults to default channels
      if (reqdChannels == null || reqdChannels.isEmpty()) {
        reqdChannels = defaultChannels;
      }
      for (Channel c : reqdChannels) {
        if (confChannels.contains(c)) {
          confChannels.remove(c);
        }
      }

      if (optionalChannels.put(hdr, confChannels) != null) {
        throw new FlumeException(""Selector channel configured twice"");
      }
    }

  }"
7273013,none,"    private String dumpStack(ThreadInfo ti) {
        StringBuilder buffer = new StringBuilder();
        buffer.append(""*** Thread stack dump:\n""); // NOI18N

        for (int i = ti.stackTopIdx; i >= 0; i--) {
            DebugInfoCollector collector = new DebugInfoCollector();
            TimedCPUCCTNode frame = ti.stack[i];
            RuntimeCCTNodeProcessor.process(frame, collector);
            buffer.append(collector.getInfo(frame)).append('\n'); // NOI18N
        }

        return buffer.toString();
    }"
7577692,none,"	private void processInterfaces(ConfigurationClass configClass, SourceClass sourceClass) throws IOException {
		for (SourceClass ifc : sourceClass.getInterfaces()) {
			Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(ifc);
			for (MethodMetadata methodMetadata : beanMethods) {
				if (!methodMetadata.isAbstract()) {
					// A default method or other concrete method on a Java 8+ interface...
					configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));
				}
			}
			processInterfaces(configClass, ifc);
		}
	}"
4195038,none,"    public boolean matchesEndpoints(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints)
    {
        // Use strict equality here, as worst thing that can happen is we generate one more stream
        return this.endpoints.equals(endpoints) && this.transEndpoints.equals(transEndpoints);
    }"
3983972,none,"    @Override
    public void activate()
        throws ActivationException
    {
        activation.activate( applicationModel.newActivatorsInstance(), layerInstances );
    }"
7757865,none,"  private boolean isMoreToReadBeforeReadingRecord(
      final SequenceOffsetType recordSequenceNumber,
      final SequenceOffsetType endSequenceNumber
  )
  {
    final int compareToEnd = createSequenceNumber(recordSequenceNumber)
        .compareTo(createSequenceNumber(endSequenceNumber));

    return isEndOffsetExclusive() ? compareToEnd < 0 : compareToEnd <= 0;
  }"
7513758,none,"    public static boolean isVirtualStackSlot(Value value) {
        assert value != null;
        return value instanceof VirtualStackSlot;
    }"
4568919,none,"    public boolean readFont(FontFileReader in, String header, String name) throws IOException {
        initializeFont(in);
        /*
         * Check if TrueType collection, and that the name
         * exists in the collection
         */
        if (!checkTTC(header, name)) {
            if (name == null) {
                throw new IllegalArgumentException(
                    ""For TrueType collection you must specify which font ""
                    + ""to select (-ttcname)"");
            } else {
                throw new IOException(
                    ""Name does not exist in the TrueType collection: "" + name);
            }
        }

        readDirTabs();
        readFontHeader();
        getNumGlyphs();
        if (log.isDebugEnabled()) {
            log.debug(""Number of glyphs in font: "" + numberOfGlyphs);
        }
        readHorizontalHeader();
        readHorizontalMetrics();
        initAnsiWidths();
        readPostScript();
        readOS2();
        determineAscDesc();

        readName();
        boolean pcltFound = readPCLT();
        // Read cmap table and fill in ansiwidths
        boolean valid = readCMAP();
        if (!valid) {
            return false;
        }

        // Create cmaps for bfentries
        createCMaps();
        updateBBoxAndOffset();

        if (useKerning) {
            readKerning();
        }
        handleCharacterSpacing(in);

        guessVerticalMetricsFromGlyphBBox();
        return true;
    }"
4595799,none,"  public void clear() {
    size = 0;
  }"
9290877,none,"    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (x.item == null)
                    return index;
            }
        } else {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (o.equals(x.item))
                    return index;
            }
        }
        return -1;
    }"
4447157,none,"    public void mergeFrom(Input input, RunQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.resultsMode = QueryResultsMode.valueOf(input.readEnum());
                    break;
                case 2:
                    message.type = QueryType.valueOf(input.readEnum());
                    break;
                case 3:
                    message.plan = input.readString();
                    break;
                case 4:
                    if(message.fragments == null)
                        message.fragments = new ArrayList<PlanFragment>();
                    message.fragments.add(input.mergeObject(null, PlanFragment.getSchema()));
                    break;

                case 5:
                    message.preparedStatementHandle = input.mergeObject(message.preparedStatementHandle, PreparedStatementHandle.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }"
5647618,none,"    final void startFollowing(final List<Relation> following) throws InternalDataStoreException {
        for (int i = following.size(); --i >= 0;) {
            if (following.get(i) == this) {
                throw new InternalDataStoreException(Errors.format(Errors.Keys.CircularReference));
            }
        }
        following.add(this);
    }"
6266221,none,"	@Test
	public void checkAlternativeConstructor() {

		// Local Declarations
		MasterDetailsPair mDetailsP;
		DataComponent dComponent;
		String MasterType1 = ""TypeOne!"";
		// Setup DataComponent
		dComponent = new DataComponent();
		dComponent.setName(MasterType1);
		IEntry entry = new StringEntry();
		// Add entry to dComponent
		dComponent.addEntry(entry);

		// Call Alternative Constructor
		mDetailsP = new MasterDetailsPair(MasterType1, dComponent);

		// Check values. Should be typeone and equal to the declared
		// dataComponent
		assertEquals(MasterType1, mDetailsP.getMaster());
		assertTrue(dComponent.equals(mDetailsP.getDetails()));

		// Try to pass null to the constructor - sets values appropriately
		mDetailsP = new MasterDetailsPair(null, dComponent); // null master
		assertNull(mDetailsP.getMaster());
		assertTrue(dComponent.equals(mDetailsP.getDetails()));

		// DataComponent null
		mDetailsP = new MasterDetailsPair(MasterType1, null);
		assertEquals(MasterType1, mDetailsP.getMaster());
		assertNull(mDetailsP.getDetails());

		// Both null
		mDetailsP = new MasterDetailsPair(null, null);
		assertNull(mDetailsP.getMaster());
		assertNull(mDetailsP.getDetails());

	}"
7584763,none,"	@Override
	public Transaction createTransaction(@Nullable String name, int timeout) throws NotSupportedException, SystemException {
		if (timeout >= 0) {
			this.transactionManager.setTransactionTimeout(timeout);
		}
		this.transactionManager.begin();
		return new ManagedTransactionAdapter(this.transactionManager);
	}"
4906479,none,"        @Override
        public int nextDoc() throws IOException {
            if (docNo == NO_MORE_DOCS) {
                return docNo;
            }

            if (firstTime) {
                firstTime = false;
                // get first doc of context scorer
                int docId = contextScorer.nextDoc();
                if (docId != NO_MORE_DOCS) {
                    contextNo = docId;
                }
            }
            // move to next candidate
            do {
                docNo++;
            } while (reader.isDeleted(docNo) && docNo < reader.maxDoc());

            // check with contextScorer
            while (contextNo != -1 && contextNo == docNo) {
                docNo++;
                int docId = contextScorer.nextDoc();
                contextNo = docId == NO_MORE_DOCS ? -1 : docId;
            }
            if (docNo >= reader.maxDoc()) {
                docNo = NO_MORE_DOCS;
            }
            return docNo;
        }"
4074807,none,"    public Mutable<ILogicalOperator> getRootRef() {
        return rootRef;
    }"
7539853,none,"	public static int callSetAndGetInt(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {
		thiz.setInt(obj, thiz.getInt(obj) + 1);
		return thiz.getInt(obj);
	}"
8264635,none,"	public IGrammarAwareElementType getExtendsNsURIEObject_EObjectKeyword_2_0_0ElementType() {
		return ExtendsNsURIEObject_EObjectKeyword_2_0_0_ELEMENT_TYPE;
	}"
4901851,none,"        @Override
        public Validator childNodeChanged(String name, NodeState before, NodeState after) throws CommitFailedException {
            Tree beforeTree = (parentBefore == null) ? null : parentBefore.getChild(name);
            Tree afterTree = parentAfter.getChild(name);

            if (isTokenTree(beforeTree) || isTokenTree(afterTree)) {
                validateTokenTree(afterTree);
            } else if (isTokensParent(beforeTree) || isTokensParent(afterTree)) {
                validateTokensParent(afterTree);
            }

            return new VisibleValidator(new TokenValidator(beforeTree, afterTree, commitInfo), true, true);
        }"
4113404,none,"    @SuppressWarnings(""deprecation"")
    private static Maybe<Calendar> parseCalendarDefaultParse(String input) {
        try {
            long ms = Date.parse(input);
            if (ms>=new Date(1999, 12, 25).getTime() && ms <= new Date(2200, 1, 2).getTime()) {
                // accept default date parse for this century and next
                GregorianCalendar c = new GregorianCalendar();
                c.setTimeInMillis(ms);
                return Maybe.of((Calendar)c);
            }
        } catch (Exception e) {
            Exceptions.propagateIfFatal(e);
        }
        return Maybe.absent();
    }"
6340126,none,"  @Pure
  @NonNull
  public Position getPosition() {
    return this.position;
  }"
8909910,none,"  @Override
  public void recordAllocBytes(long bytesUsed, long bytesAllocated) {
    incrCounter(LlapIOCounters.ALLOCATED_USED_BYTES, bytesUsed);
    incrCounter(LlapIOCounters.ALLOCATED_BYTES, bytesAllocated);
  }"
8961619,none,"  @Override
  public String serialize(EventMessage message) {
    String messageAsString = MessageSerializer.super.serialize(message);
    try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
      GZIPOutputStream gout = new GZIPOutputStream(baos);
      gout.write(messageAsString.getBytes(StandardCharsets.UTF_8));
      gout.close();
      byte[] compressed = baos.toByteArray();
      return new String(Base64.getEncoder().encode(compressed), StandardCharsets.UTF_8);
    } catch (IOException e) {
      LOG.error(""could not use gzip output stream"", e);
      LOG.debug(""message "" + messageAsString);
      throw new RuntimeException(""could not use the gzip output Stream"", e);
    }
  }"
3879070,none,"    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }"
7373719,none,"    private void notifyConflict() {
        final Shell parentShell = ShellUtils.getWorkbenchShell();

        UIHelpers.runOnUIThread(true, new Runnable() {
            @Override
            public void run() {
                MessageDialog.openWarning(
                    parentShell,
                    Messages.getString(""EclipseConnectionConflictHandler.ConnectionExistsDialogTitle""), //$NON-NLS-1$
                    Messages.getString(""EclipseConnectionConflictHandler.ConnectionExistsDialogText"")); //$NON-NLS-1$
            }
        });
    }"
9013810,none,"  public FieldAnalysisRequest setFieldTypes(List<String> fieldTypes) {
    this.fieldTypes = fieldTypes;
    return this;
  }"
8281103,none,"        public String getUsername() {
            return username;
        }"
8030709,none,"	protected IType[] getAllSuperTypes(IType type) throws JavaModelException {
		/*
		 * https://stackoverflow.com/questions/49611587/developing-a-eclipse-how-to-get-all-inherited-methods-from-a-icompilationunit
		 */
		ITypeHierarchy th = type.newTypeHierarchy(new NullProgressMonitor());
		IType[] superTypes = th.getAllSuperclasses(type);
		return superTypes;
	}"
5591314,none,"    @Test
    public void testHtml() throws Exception
    {
        HSSFWorkbook workbook;
        try {
            workbook = ExcelToHtmlUtils.loadXls( child );
        } catch ( Exception exc ) {
            // unable to parse file -- not ExcelToFoConverter fault
            return;
        }

        ExcelToHtmlConverter excelToHtmlConverter = new ExcelToHtmlConverter(
                XMLHelper.getDocumentBuilderFactory().newDocumentBuilder().newDocument() );
        excelToHtmlConverter.processWorkbook( workbook );

        StringWriter stringWriter = new StringWriter();

        Transformer transformer = TransformerFactory.newInstance()
                .newTransformer();
        transformer.setOutputProperty( OutputKeys.ENCODING, ""utf-8"" );
        transformer.setOutputProperty( OutputKeys.INDENT, ""no"" );
        transformer.setOutputProperty( OutputKeys.METHOD, ""html"" );
        transformer.transform(
                new DOMSource( excelToHtmlConverter.getDocument() ),
                new StreamResult( stringWriter ) );

        assertNotNull(stringWriter.toString());
    }"
4132362,none,"  public int compareTypePrecedence(RelDataType type1, RelDataType type2) {
    assert containsType(type1) : type1;
    assert containsType(type2) : type2;

    int p1 =
        getListPosition(
            type1.getSqlTypeName(),
            typeNames);
    int p2 =
        getListPosition(
            type2.getSqlTypeName(),
            typeNames);
    return p2 - p1;
  }"
7954017,none,"	protected void addNodeToCluster(final String name, final Set<NodeDescriptor> cluster) {
		final NodeDescriptor v = mapNameNode.get(name);
		cluster.add(v);
		v.setCluster(cluster);
	}"
4927730,none,"    public GraphVisualizer() {
        model = new CachingStatCalculator(""Graph"");
        graph = new Graph(model);
        init();
    }"
6235739,none,"	@Test
	public void test_getSize() {
		forRectangles(new IAction() {
			@Override
			public void action(Rectangle rect, Point tl, Point br) {
				assertEquals(new Dimension(br.x - tl.x, br.y - tl.y),
						rect.getSize());
			}
		});
	}"
5828765,none,"    public Map<String, Object> getPropertyMapping(String property, String itemType) {
        Map<String, Map<String, Object>> mappings = knownMappings.get(itemType);
        Map<String, Object> result = getPropertyMapping(property, mappings);
        if (result == null) {
            mappings = getPropertiesMapping(itemType);
            knownMappings.put(itemType, mappings);
            result = getPropertyMapping(property, mappings);
        }
        return result;
    }"
5759451,none,"  @VisibleForTesting
  public static Optional<Tablespace> removeTablespaceForTest(String name) {
    Tablespace existing = null;
    synchronized (SPACES_URIS_MAP) {
      URI uri = SPACES_URIS_MAP.remove(name);
      if (uri != null) {
        existing = TABLE_SPACES.remove(uri);
      }
    }
    return Optional.ofNullable(existing);
  }"
8026786,none,		public RuleCall getInitExpressionExpressionParserRuleCall_4_0() { return cInitExpressionExpressionParserRuleCall_4_0; }
7196750,none,"        public Builder connection(Connection connection) {
            this.connection = connection;
            this.__explicitlySet__.add(""connection"");
            return this;
        }"
4092105,none,"    public List<Long> getOrderedLogFileIds() {
        File fileLogDir = new File(logDir);
        String[] logFileNames = null;
        List<Long> logFileIds = null;
        if (!fileLogDir.exists()) {
            LOGGER.log(Level.INFO, ""log dir "" + logDir + "" doesn't exist.  returning empty list"");
            return Collections.emptyList();
        }
        if (!fileLogDir.isDirectory()) {
            throw new IllegalStateException(""log dir "" + logDir + "" exists but it is not a directory"");
        }
        logFileNames = fileLogDir.list((dir, name) -> name.startsWith(logFilePrefix));
        if (logFileNames == null) {
            throw new IllegalStateException(""listing of log dir ("" + logDir + "") files returned null. ""
                    + ""Either an IO error occurred or the dir was just deleted by another process/thread"");
        }
        if (logFileNames.length == 0) {
            LOGGER.log(Level.INFO, ""the log dir ("" + logDir + "") is empty. returning empty list"");
            return Collections.emptyList();
        }
        logFileIds = new ArrayList<>();
        for (String fileName : logFileNames) {
            logFileIds.add(Long.parseLong(fileName.substring(logFilePrefix.length() + 1)));
        }
        logFileIds.sort(Long::compareTo);
        return logFileIds;
    }"
9449118,none,"        @Override
        public Void visitAnnotation(Annotation_element_value ev, Boolean resolveIndices) {
            print((char) ev.tag);
            AnnotationWriter.this.write(ev.annotation_value, resolveIndices);
            return null;
        }"
3753086,none,"    @Override
    public boolean visit(MySqlShowDatabasePartitionStatusStatement x) {
        return true;
    }"
6464959,none,"	@Override
	public void reportClass(CheckError error, J9ClassPointer clazz, String prefix)
	{
		String prefixString = prefix == null ? """" : prefix;
		
		if(!shouldReport(error)) {
			return;
		}		
		
		out.println(String.format(""  <gc check (%d): %sClass %x>"", error._errorNumber, prefixString, clazz.getAddress()));
	}"
6192126,none,"  @Override
  public void onSelectionChanged(PreviewNode selectedNode) {
    Either<ResourceChange, TextEdit> data = selectedNode.getData();
    if (data != null && data.isLeft()) {
      view.showDiff(null);
      return;
    }

    List<TextEdit> edits = collectTextEditsForSelectedNode(selectedNode);

    updateContentInCompareWidget(selectedNode, edits);
  }"
4837876,none,"    @Override
    public void process(final ProcessClassContext processClassContext) {
        removeIgnoredMethods(processClassContext.getCls(), processClassContext);
    }"
3709545,none,"    public static com.android.aapt.Resources.Source parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }"
8904378,none,"  public void setDelegationToken(String delegationToken) {
    this.delegationToken = delegationToken;
  }"
4576061,none,"    public void bind(PropertyList pList) throws FOPException {
        super.bind(pList);
        alignmentAdjust = pList.get(PR_ALIGNMENT_ADJUST).getLength();
        alignmentBaseline = pList.get(PR_ALIGNMENT_BASELINE).getEnum();
        baselineShift = pList.get(PR_BASELINE_SHIFT).getLength();
        dominantBaseline = pList.get(PR_DOMINANT_BASELINE).getEnum();
        leaderAlignment = pList.get(PR_LEADER_ALIGNMENT).getEnum();
        leaderLength = pList.get(PR_LEADER_LENGTH).getLengthRange();
        leaderPattern = pList.get(PR_LEADER_PATTERN).getEnum();
        leaderPatternWidth = pList.get(PR_LEADER_PATTERN_WIDTH).getLength();
        // use default rule thickness as a default
        ruleThickness = getPropertyMakerFor(PR_RULE_THICKNESS).make(pList).getLength();
        switch(leaderPattern) {
        case EN_SPACE:
            // use Space
            break;
        case EN_RULE:
            // the following properties only apply
            // for leader-pattern = ""rule""
            ruleStyle = pList.get(PR_RULE_STYLE).getEnum();
            // use specified rule thickness to override default (established above)
            ruleThickness = pList.get(PR_RULE_THICKNESS).getLength();
            break;
        case EN_DOTS:
            break;
        case EN_USECONTENT:
            // use inline layout manager to create inline areas
            // add the inline parent multiple times until leader full
            break;
        default:
            throw new RuntimeException(""Invalid leader pattern: "" + leaderPattern);
        }
        // letterSpacing = pList.get(PR_LETTER_SPACING);
        // textShadow = pList.get(PR_TEXT_SHADOW);
    }"
8009118,none,"		public TimerAnyTimeoutType_template() {
		}"
4919453,none,"    private JPanel createPortPanel() {
        portField = new JTextField(HttpMirrorControl.DEFAULT_PORT_S, 8);
        portField.setName(HttpMirrorControl.PORT);

        JLabel label = new JLabel(JMeterUtils.getResString(""port"")); // $NON-NLS-1$
        label.setLabelFor(portField);

        maxPoolSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE), 8);
        maxPoolSizeField.setName(HttpMirrorControl.MAX_POOL_SIZE);

        JLabel mpsLabel = new JLabel(JMeterUtils.getResString(""httpmirror_max_pool_size"")); // $NON-NLS-1$
        mpsLabel.setLabelFor(maxPoolSizeField);

        maxQueueSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_QUEUE_SIZE), 8);
        maxQueueSizeField.setName(HttpMirrorControl.MAX_QUEUE_SIZE);

        JLabel mqsLabel = new JLabel(JMeterUtils.getResString(""httpmirror_max_queue_size"")); // $NON-NLS-1$
        mqsLabel.setLabelFor(maxQueueSizeField);

        HorizontalPanel panel = new HorizontalPanel();
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""httpmirror_settings""))); // $NON-NLS-1$
        
        panel.add(label);
        panel.add(portField);

        panel.add(mpsLabel);
        panel.add(maxPoolSizeField);

        panel.add(mqsLabel);
        panel.add(maxQueueSizeField);
        
        panel.add(Box.createHorizontalStrut(10));

        return panel;
    }"
8841762,none,"      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSre()) {
          struct.sre.write(oprot);
        }
      }"
5784280,none,"    public InputInitializerCallback(InitializerWrapper initializer,
        EventHandler eventHandler, TezVertexID vertexID) {
      this.initializer = initializer;
      this.eventHandler = eventHandler;
      this.vertexID = vertexID;
    }"
9312050,none,"    private static Void checkPermission() {
        SecurityManager sm = System.getSecurityManager();
        if (sm != null)
            sm.checkPermission(new RuntimePermission(""selectorProvider""));
        return null;
    }"
7115420,none,"  public Iterable<VariableElement> getImplicitPostfixParams(TypeElement type) {
    if (ElementUtil.isEnum(type)) {
      return implicitEnumParams;
    }
    return Collections.emptyList();
  }"
3849158,none,"  public void setViewEntity(ViewEntity view) {
    this.view = view;
  }"
6623370,none,"    private ByteArrayInputStream getInputStream(final byte[] bytes) {
        return new ByteArrayInputStream(bytes);
    }"
4496686,none,"    @SuppressWarnings(""unchecked"")
    public SinkProcessorConfiguration getConfiguration(String name)
        throws ConfigurationException {
      Class<? extends SinkProcessorConfiguration> clazz;
      SinkProcessorConfiguration instance = null;
      try {
        if (processorClassName != null) {
          clazz =
              (Class<? extends SinkProcessorConfiguration>) Class
                  .forName(processorClassName);
          instance = clazz.getConstructor(String.class).newInstance(name);

        } else {
          return new SinkProcessorConfiguration(name);
        }
      } catch (ClassNotFoundException e) {
        // Could not find the configuration stub, do basic validation
        instance = new SinkProcessorConfiguration(name);
        // Let the caller know that this was created because of this exception.
        instance.setNotFoundConfigClass();
      } catch (Exception e) {
        throw new ConfigurationException(
            ""Could not instantiate configuration!"", e);
      }
      return instance;
    }"
8783754,none,"  @Override
  public final short getFsPermissionShort() {
    return referred.getFsPermissionShort();
  }"
8402603,none,"    private void tryConfigureBulkRequests() throws JSchException {
        Integer bulkRequests = endpoint.getConfiguration().getBulkRequests();

        if (bulkRequests != null) {
            LOG.trace(""configuring channel to use up to {} bulk request(s)"", bulkRequests);

            channel.setBulkRequests(bulkRequests);
        }
    }"
5456180,none,"    private void checkPostedFormData() 
    {
        if (getMethod().equals(""POST""))
        {
            String contentType = getContentType();
            if (contentType == null || contentType.equals(""application/x-www-form-urlencoded""))
            {
                throw new IllegalStateException(""User request HTTP POST data is of type ""
                                                + ""application/x-www-form-urlencoded. ""
                                                + ""This data has been already processed ""
                                                + ""by the portlet-container and is available ""
                                                + ""as request parameters."");
            }
        }
    }"
7046440,none,"    private boolean sampleLoadingFinished(Map<TopicPartition, Long> endOffsets) {
      for (Map.Entry<TopicPartition, Long> entry : endOffsets.entrySet()) {
        long position = _consumer.position(entry.getKey());
        if (position < entry.getValue()) {
          LOG.debug(""Partition {} is still lagging. Current position: {}, LEO: {}"", entry.getKey(),
                    position, entry.getValue());
          return false;
        }
      }
      return true;
    }"
8939140,none,"    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }"
8180004,none,"    @Override
    public long size() {
        return 0;
    }"
6840403,none,"  public TestHttpServletRequest(String queryString) {
    this.queryString = queryString;
    this.content = new byte[0];
    this.contentType = null;
    this.characterEncoding = null;
    decodeParams();
  }"
7056433,none,"  void getHashes(List<Integer> searchHashes, int bitShift)
  {
    // We don't need to include 0 because that's always assumed in look ups. If we do return 0, that
    // means this agent isn't sure what it needs, but the inverse is acceptable because that just
    // means the airing doesn't know what it matches and it will be tested on all of the agents.
    searchHashes.clear();

    if (title != null)
    {
      searchHashes.add((title.ignoreCaseHash >>> bitShift));
    }

    if (person != null)
    {
      addHash(person.ignoreCaseHash, searchHashes, bitShift);
    }

    if (category != null)
    {
      addHash(category.ignoreCaseHash, searchHashes, bitShift);
    }

    if (subCategory != null)
    {
      addHash(subCategory.ignoreCaseHash, searchHashes, bitShift);
    }

    if (chanName.length() > 0)
    {
      addHash(chanName.hashCode(), searchHashes, bitShift);
    }

    if (chanNames != null && chanNames.length > 0)
    {
      for (String chanName : chanNames)
      {
        addHash(chanName.hashCode(), searchHashes, bitShift);
      }
    }

    if (network != null)
    {
      addHash(network.ignoreCaseHash, searchHashes, bitShift);
    }

    if (rated != null)
    {
      addHash(rated.ignoreCaseHash, searchHashes, bitShift);
    }

    if (year != null)
    {
      addHash(year.ignoreCaseHash, searchHashes, bitShift);
    }

    if (pr != null)
    {
      addHash(pr.ignoreCaseHash, searchHashes, bitShift);
    }

    // This will ensure that we do a full search since 0 means at least one of our items doesn't
    // have a ""valid"" hash.
    if (searchHashes.contains(0))
      searchHashes.clear();
  }"
7783504,none,"	public FilteredHeaderItem(HeaderItem wrapped, String filterName)
	{
		this.wrapped = wrapped;
		this.filterName = filterName;
	}"
8461674,none,"    @Override
    public String toString() {
        return ""JCachePolicy{""
                + ""keyExpression="" + keyExpression
                + "", enabled="" + enabled
                + '}';
    }"
7907703,none,"  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pythonTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parseTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(processingTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(actionGraphTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rulekeyTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(buildTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(installTimeMs);

    return hashCode;
  }"
7254402,none,"    public static String fixLibsDirPath(final String libsDirPath, final String args, boolean createTmp) {
        if (createTmp) {
            try {
                File tmpFile = File.createTempFile(BINARIES_TMP_PREFIX, BINARIES_TMP_EXT);
                String tmpPath = tmpFile.getAbsolutePath();
                tmpFile.delete();
                Runtime.getRuntime().exec(new String[]{""/bin/ln"",""-s"",libsDirPath,tmpPath});    // NOI18N
                new File(tmpPath).deleteOnExit();
                return args.replace(libsDirPath,tmpPath);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        } else {
            return args.replaceAll(""agentpath:(.*?)=(.*?),(.*)"", ""agentpath:\""$1\""=\""$2\"",$3"");
        }
    }"
8737414,none,"  @Override
  public void close() {
    bandwidthGaugeUpdater.close();
  }"
3877056,none,"  private static void listZookeeper(ServerContext context) throws Exception {
    System.out.println(""Listing volumes referenced in zookeeper"");
    TreeSet<String> volumes = new TreeSet<>();

    volumes.add(getTableURI(MetadataTableUtil.getRootTabletDir(context)));
    ArrayList<LogEntry> result = new ArrayList<>();
    MetadataTableUtil.getRootLogEntries(context, result);
    for (LogEntry logEntry : result) {
      getLogURIs(volumes, logEntry);
    }

    for (String volume : volumes)
      System.out.println(""\tVolume : "" + volume);

  }"
8904487,none,"    @Override
    public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,
        Object... nodeOutputs) throws SemanticException {

      MapJoinWalkerCtx ctx = (MapJoinWalkerCtx) procCtx;
      AbstractMapJoinOperator<? extends MapJoinDesc> mapJoin = ctx.getCurrMapJoinOp();
      List<AbstractMapJoinOperator<? extends MapJoinDesc>> listRejectedMapJoins = ctx
          .getListRejectedMapJoins();

      // the mapjoin has already been handled
      if ((listRejectedMapJoins != null) && (listRejectedMapJoins.contains(mapJoin))) {
        return null;
      }
      addNoReducerMapJoinToCtx(ctx, mapJoin);
      return null;
    }"
4038375,none,"    public ShutdownAllCommand(Args args) {
        super(args, ""?all=true"");
    }"
4909319,none,"    @Override
    public ConcurrentMap<K, V> asMap() {
        return new ConcurrentMap<K, V>() {

            @Override
            public int size() {
                long size = CacheLIRS.this.size();
                return (int) Math.min(size, Integer.MAX_VALUE);
            }

            @Override
            public boolean isEmpty() {
                return CacheLIRS.this.size() == 0;
            }

            @Override
            public boolean containsKey(Object key) {
                return CacheLIRS.this.containsKey(key);
            }

            @Override
            public boolean containsValue(Object value) {
                return CacheLIRS.this.containsValue(value);
            }

            @SuppressWarnings(""unchecked"")
            @Override
            public V get(Object key) {
                return CacheLIRS.this.peek((K) key);
            }

            @Override
            public V put(K key, V value) {
                return CacheLIRS.this.put(key, value, sizeOf(key, value));
            }

            @Override
            public V remove(Object key) {
                @SuppressWarnings(""unchecked"")
                V old = CacheLIRS.this.getUnchecked((K) key);
                CacheLIRS.this.invalidate(key);
                return old;
            }

            @Override
            public void putAll(Map<? extends K, ? extends V> m) {
                for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {
                    put(e.getKey(), e.getValue());
                }                
            }

            @Override
            public void clear() {
                CacheLIRS.this.clear();
            }

            @Override
            public Set<K> keySet() {
                return CacheLIRS.this.keySet();
            }

            @Override
            public Collection<V> values() {
                return CacheLIRS.this.values();
            }

            @Override
            public Set<java.util.Map.Entry<K, V>> entrySet() {
                return CacheLIRS.this.entrySet();
            }

            @Override
            public V putIfAbsent(K key, V value) {
                return CacheLIRS.this.putIfAbsent(key, value);
            }

            @Override
            public boolean remove(Object key, Object value) {
                return CacheLIRS.this.remove(key, value);
            }

            @Override
            public boolean replace(K key, V oldValue, V newValue) {
                return CacheLIRS.this.replace(key, oldValue, newValue);
            }

            @Override
            public V replace(K key, V value) {
                return CacheLIRS.this.replace(key, value);
            }
            
        };
    }"
3988323,none,"    void updateEntity( UnitOfWork current )
    {
        try
        {
            entity = current.get( entity );
        }
        catch( NoSuchEntityException e )
        {
            // Entity was deleted
            entity = null;
        }
    }"
7357164,none,"    public void sourceControlChanged(final boolean tfvc) {
        getSourceControlListener().onSourceControlChanged(tfvc);
    }"
4571455,none,"    public float computeTableUnit(PercentBaseContext percentBaseContext, int contentAreaIPD) {

        int sumCols = 0;
        float factors = 0;
        float unit = 0;

        /* calculate the total width (specified absolute/percentages),
         * and work out the total number of factors to use to distribute
         * the remaining space (if any)
         */
        for (Object colWidth1 : colWidths) {
            Length colWidth = (Length) colWidth1;
            if (colWidth != null) {
                sumCols += colWidth.getValue(percentBaseContext);
                if (colWidth instanceof RelativeNumericProperty) {
                    factors += ((RelativeNumericProperty) colWidth).getTableUnits();
                } else if (colWidth instanceof TableColLength) {
                    factors += ((TableColLength) colWidth).getTableUnits();
                }
            }
        }

        /* distribute the remaining space over the accumulated
         * factors (if any)
         */
        if (factors > 0) {
            if (sumCols < contentAreaIPD) {
                unit = (contentAreaIPD - sumCols) / factors;
            } else {
                log.warn(""No space remaining to distribute over columns."");
            }
        }

        return unit;
    }"
4275268,none,"        double getRemB() {
            return finalRemB;
        }"
8017975,none,"	@Override
	/** {@inheritDoc} */
	public SubtypeConstraint intersection(final SubtypeConstraint other) {
		final StringSubtypeTreeElement o = (StringSubtypeTreeElement) other;
		if (o instanceof StringSetConstraint) {
			final StringSetConstraint ssc = (StringSetConstraint) o;
			if (ssc.constraintType == constraintType) {
				return new StringSetConstraint(stringType, constraintType,
						constraint.intersection(((StringSetConstraint) o).constraint));
			}
		}

		final StringSetOperation returnValue = new StringSetOperation(stringType, OperationType.INTERSECTION, this, o);
		return returnValue.evaluate();
	}"
5423009,none,"    private ClearCacheResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              unfreedBytes_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }"
5278260,none,"    protected void refreshInternal(Collection objs, OpCallbacks call) {
    	if (objs == null || objs.isEmpty())
    		return;
        List<Exception> exceps = null;
        try {
            // collect instances that need a refresh
            Collection<OpenJPAStateManager> load = null;
            StateManagerImpl sm;
            Object obj;
            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {
                obj = itr.next();
                if (obj == null)
                    continue;

                try {
                    sm = getStateManagerImpl(obj, true);
                    if ((processArgument(OpCallbacks.OP_REFRESH, obj, sm, call)
                        & OpCallbacks.ACT_RUN) == 0)
                        continue;

                    if (sm != null) {
                        if (sm.isDetached())
                            throw newDetachedException(obj, ""refresh"");
                        else if (sm.beforeRefresh(true)) {
                        	if (load == null)
                        		load = new ArrayList<>(objs.size());
                            load.add(sm);
                        }
                        int level = _fc.getReadLockLevel();
                        int timeout = _fc.getLockTimeout();
                        _lm.refreshLock(sm, level, timeout, null);
                        sm.readLocked(level, level);
                    } else if (assertPersistenceCapable(obj).pcIsDetached()
                        == Boolean.TRUE)
                        throw newDetachedException(obj, ""refresh"");
                } catch (OpenJPAException ke) {
                    exceps = add(exceps, ke);
                }
            }

            // refresh all
            if (load != null) {
                Collection<Object> failed = _store.loadAll(load, null,
                    StoreManager.FORCE_LOAD_REFRESH, _fc, null);
                if (failed != null && !failed.isEmpty())
                    exceps = add(exceps, newObjectNotFoundException(failed));

                // perform post-refresh transitions and make sure all fetch
                // group fields are loaded
                for (Iterator<OpenJPAStateManager> itr = load.iterator(); itr.hasNext();) {
                    sm = (StateManagerImpl) itr.next();
                    if (failed != null && failed.contains(sm.getId()))
                        continue;

                    try {
                        sm.afterRefresh();
                        sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null,
                            false);
                    } catch (OpenJPAException ke) {
                        exceps = add(exceps, ke);
                    }
                }
            }

            // now invoke postRefresh on all the instances
            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {
                try {
                    sm = getStateManagerImpl(itr.next(), true);
                    if (sm != null && !sm.isDetached())
                        fireLifecycleEvent(sm.getManagedInstance(), null,
                            sm.getMetaData(), LifecycleEvent.AFTER_REFRESH);
                } catch (OpenJPAException ke) {
                    exceps = add(exceps, ke);
                }
            }
        } catch (OpenJPAException ke) {
            throw ke;
        } catch (RuntimeException re) {
            throw new GeneralException(re);
        }
        throwNestedExceptions(exceps, false);
    }"
5858827,none,"    @Override
    public void init()
    {
        super.init();
        this.introspector = new Introspector(this.log);
    }"
6492213,none,"	public IRIFunction(ValueExpr arg) {
		super(arg);
	}"
8031777,none,"	public boolean isMinExclusive() {
		return minExclusive;
	}"
3699227,none,"    public String getClassName() {
        return className;
    }"
5138043,none,"    public static EarModule newEarModule( Artifact artifact, JavaEEVersion javaEEVersion, String defaultLibBundleDir,
                                          Boolean includeInApplicationXml,
                                          ArtifactTypeMappingService typeMappingService )
        throws UnknownArtifactTypeException
    {
        // Get the standard artifact type based on default config and user-defined mapping(s)
        final String artifactType;
        try
        {
            artifactType = typeMappingService.getStandardType( artifact.getType() );
        }
        catch ( UnknownArtifactTypeException e )
        {
            throw new UnknownArtifactTypeException( e.getMessage() + "" for "" + artifact.getArtifactId() );
        }

        if ( ""jar"".equals( artifactType ) )
        {
            return new JarModule( artifact, defaultLibBundleDir, includeInApplicationXml );
        }
        else if ( ""ejb"".equals( artifactType ) )
        {
            return new EjbModule( artifact );
        }
        else if ( ""par"".equals( artifactType ) )
        {
            return new ParModule( artifact );
        }
        else if ( ""ejb-client"".equals( artifactType ) )
        {
            // Somewhat weird way to tackle the problem described in MEAR-85
            if ( javaEEVersion.le( JavaEEVersion.ONE_DOT_FOUR ) )
            {
                return new EjbClientModule( artifact, null );
            }
            else
            {
                return new EjbClientModule( artifact, defaultLibBundleDir );
            }
        }
        else if ( ""app-client"".equals( artifactType ) )
        {
            return new AppClientModule( artifact );
        }
        else if ( ""rar"".equals( artifactType ) )
        {
            return new RarModule( artifact );
        }
        else if ( ""war"".equals( artifactType ) )
        {
            return new WebModule( artifact );
        }
        else if ( ""sar"".equals( artifactType ) )
        {
            return new SarModule( artifact );
        }
        else if ( ""wsr"".equals( artifactType ) )
        {
            return new WsrModule( artifact );
        }
        else if ( ""har"".equals( artifactType ) )
        {
            return new HarModule( artifact );
        }
        else
        {
            throw new IllegalStateException( ""Could not handle artifact type["" + artifactType + ""]"" );
        }
    }"
6842606,none,"  @SuppressWarnings(""unchecked"")
  public <T> T remove(SyntheticAttributeKey<T> k) {
    if (immutable) {
      throw new UnsupportedOperationException();
    }
    return (T) remove((Object) k);
  }"
7023035,none,"  public OperationStats(final Operation operation, final long operations, final long bytes, final long latencies,
                        final Map<Integer, Long> statusCodes, long timestampStart, long timestampFinish) {
    this.operation = operation;
    this.operations = operations;
    this.bytes = bytes;
    this.latencies = latencies;
    this.statusCodes = ImmutableSortedMap.copyOf(statusCodes);
    if (this.operations > 0) {
      double average = (double) this.latencies / this.operations;
      this.averageLatency = Math.round(average * 100.00) / 100.00;
    }
    this.runtime = ((double) (timestampFinish - timestampStart)) / TimeUnit.SECONDS.toMillis(1);
  }"
5693176,none,"    public Decorator getDecorator(HttpServletRequest req, Page page) {
        if (""none"".equals(req.getAttribute(""decorator""))) {
            return null;
        }

        return super.getDecorator(req, page);
    }"
5952032,none,"    private Invocation next() {
        if (interceptors.hasNext()) {
            final Interceptor interceptor = interceptors.next();
            final Object nextInstance = interceptor.getInstance();
            final Method nextMethod = interceptor.getMethod();

            if (nextMethod.getParameterTypes().length == 1 && nextMethod.getParameterTypes()[0] == InvocationContext.class) {
                return new InterceptorInvocation(nextInstance, nextMethod, this);
            } else {
                return new LifecycleInvocation(nextInstance, nextMethod, this, parameters);
            }
        } else if (method != null) {
            //EJB 3.1, it is allowed that timeout method does not have parameter Timer.class,
            //However, while invoking the timeout method, the timer value is passed, as it is also required by InnvocationContext.getTimer() method
            final Object[] methodParameters;
            if (operation.equals(Operation.TIMEOUT) && method.getParameterTypes().length == 0) {
                methodParameters = new Object[0];
            } else {
                methodParameters = parameters;
            }
            return new BeanInvocation(target, method, methodParameters);
        } else {
            return new NoOpInvocation();
        }
    }"
7204508,none,"    public static UpdateWaasPolicyRequest interceptRequest(UpdateWaasPolicyRequest request) {

        return request;
    }"
7518556,none,"    public static boolean isDeprecated(TypeMirror baseType) {
        if (baseType instanceof DeclaredType) {
            return isDeprecated((TypeElement) ((DeclaredType) baseType).asElement());
        }
        return false;
    }"
5752009,none,"  public void visit(SQLBuilderContext context, LogicalNode node, Stack<LogicalNode> stack) {
    stack.push(node);

    switch (node.getType()) {
    case SCAN:
      visitScan(context, (ScanNode) node, stack);
      break;

    case GROUP_BY:
      visitGroupBy(context, (GroupbyNode) node, stack);
      break;

    case SELECTION:
      visitFilter(context, (SelectionNode) node, stack);
      break;

    case PROJECTION:
      visitProjection(context, (ProjectionNode) node, stack);
      break;

    case TABLE_SUBQUERY:
      visitDerivedSubquery(context, (TableSubQueryNode) node, stack);
      break;

    default:
      throw new TajoRuntimeException(new UnsupportedException(""plan node '"" + node.getType().name() + ""'""));
    }

    stack.pop();
  }"
6094004,none,"	public void copy(VisualizationResource otherResource) {

		// if resource is null, return
		if (otherResource == null) {
			return;
		}

		// copy from super class
		super.copy(otherResource);

		// Copy current values
		// These files are not cloned
		this.file = otherResource.file;
		this.path = otherResource.path;

		// Iteratively clone the entries in properties
		// These items are cloned
		this.properties.clear();
		for (int i = 0; i < otherResource.properties.size(); i++) {
			this.properties.add((VizEntry) otherResource.getProperties().get(i)
					.clone());
		}

		// Copy picture
		this.isPicture = otherResource.isPicture;

		// Copy everything else we need
		fileSetTitle = otherResource.fileSetTitle;
		host = otherResource.host;
		childrenResources.clear();
		childrenResources = (ArrayList<IVizResource>) otherResource.childrenResources
				.clone();
		fileSet = Arrays.copyOf(otherResource.fileSet,
				otherResource.fileSet.length);

	}"
8292656,none,"        public Builder username(String username) {
            Preconditions.checkState(!this.username.isPresent());

            this.username = Optional.of(username);
            return this;
        }"
8212082,none,"    @RequestMapping(""/ping"")
    @ResponseBody
    public String ping() {
        return ""pong"";
    }"
8333175,none,"	private void doAggressiveInner(LazyClassGen gen) {
		// agressively generate the inner interface if any
		// Note: we do so because of the bug #75442 that leads to have this interface implemented by all classes and not
		// only those matched by the per clause, which fails under LTW since the very first class
		// gets weaved and impl this interface that is still not defined.
		if (!hasGeneratedInner) {
			if (kind == PerClause.PEROBJECT) {// redundant test - see constructor, but safer
				// inner class
				UnresolvedType interfaceTypeX = AjcMemberMaker.perObjectInterfaceType(aspectType);
				LazyClassGen interfaceGen = new LazyClassGen(interfaceTypeX.getName(), ""java.lang.Object"", null,
						Constants.ACC_INTERFACE + Constants.ACC_PUBLIC + Constants.ACC_ABSTRACT, new String[0], getWorld());
				interfaceGen.addMethodGen(makeMethodGen(interfaceGen, AjcMemberMaker.perObjectInterfaceGet(aspectType)));
				interfaceGen.addMethodGen(makeMethodGen(interfaceGen, AjcMemberMaker.perObjectInterfaceSet(aspectType)));
				// not really an inner class of it but that does not matter, we pass back to the LTW
				gen.addGeneratedInner(interfaceGen);
			}
			hasGeneratedInner = true;
		}
	}"
7808358,none,"  public static long compute8(long x) {
    x ^= x << 13;
    x ^= x >>> 7;
    x ^= (x << 17);
    return x;
  }"
4212572,none,"    public static Class<?> getPropertyEditorClass(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return PropertyUtilsBean.getInstance().getPropertyEditorClass(bean, name);

    }"
7454470,none,"    <T> T lookup(Class<T> serviceClass, boolean wrapExceptions) {
        engine.checkState();
        if (cache.supportsService(serviceClass)) {
            try {
                ensureCreated();
            } catch (Throwable t) {
                if (wrapExceptions) {
                    throw PolyglotImpl.wrapGuestException(engine, t);
                } else {
                    throw t;
                }
            }
            return INSTRUMENT.getInstrumentationHandlerService(engine.instrumentationHandler, this, serviceClass);
        } else {
            return null;
        }
    }"
8536673,none,"    public String getDisplayText() {
        return displayText;
    }"
7197581,none,"    @Override
    public java.util.concurrent.Future<UpdateStackResponse> updateStack(
            final UpdateStackRequest request,
            final com.oracle.bmc.responses.AsyncHandler<UpdateStackRequest, UpdateStackResponse>
                    handler) {
        LOG.trace(""Called async updateStack"");
        final UpdateStackRequest interceptedRequest =
                UpdateStackConverter.interceptRequest(request);
        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =
                UpdateStackConverter.fromRequest(client, interceptedRequest);
        final com.google.common.base.Function<javax.ws.rs.core.Response, UpdateStackResponse>
                transformer = UpdateStackConverter.fromResponse();

        com.oracle.bmc.responses.AsyncHandler<UpdateStackRequest, UpdateStackResponse>
                handlerToUse = handler;
        if (handler != null
                && this.authenticationDetailsProvider
                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            handlerToUse =
                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<
                            UpdateStackRequest, UpdateStackResponse>(
                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                                    this.authenticationDetailsProvider,
                            handler) {
                        @Override
                        public void retryCall() {
                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>
                                    onSuccess =
                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                                    this, transformer, interceptedRequest);
                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                            this, interceptedRequest);
                            client.put(
                                    ib,
                                    interceptedRequest.getUpdateStackDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    };
        }

        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                handlerToUse, transformer, interceptedRequest);
        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                handlerToUse, interceptedRequest);

        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =
                client.put(
                        ib,
                        interceptedRequest.getUpdateStackDetails(),
                        interceptedRequest,
                        onSuccess,
                        onError);

        if (this.authenticationDetailsProvider
                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<
                    javax.ws.rs.core.Response, UpdateStackResponse>(
                    responseFuture,
                    transformer,
                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                            this.authenticationDetailsProvider,
                    new com.google.common.base.Supplier<
                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {
                        @Override
                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {
                            return client.put(
                                    ib,
                                    interceptedRequest.getUpdateStackDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    });
        } else {
            return new com.oracle.bmc.util.internal.TransformingFuture<>(
                    responseFuture, transformer);
        }
    }"
7211250,none,"  private V1SelfSubjectAccessReview prepareSelfSubjectAccessReview(
      Operation operation,
      Resource resource,
      String resourceName,
      Scope scope,
      String namespaceName) {
    LOGGER.entering();
    V1SelfSubjectAccessReviewSpec subjectAccessReviewSpec = new V1SelfSubjectAccessReviewSpec();

    subjectAccessReviewSpec.setResourceAttributes(
        prepareResourceAttributes(operation, resource, resourceName, scope, namespaceName));

    V1SelfSubjectAccessReview subjectAccessReview = new V1SelfSubjectAccessReview();
    subjectAccessReview.setApiVersion(""authorization.k8s.io/v1"");
    subjectAccessReview.setKind(""SelfSubjectAccessReview"");
    subjectAccessReview.setMetadata(new V1ObjectMeta());
    subjectAccessReview.setSpec(subjectAccessReviewSpec);
    LOGGER.exiting(subjectAccessReview);
    return subjectAccessReview;
  }"
6972046,none,"  final TestSuite createSubsetSuite(
      final FeatureSpecificTestSuiteBuilder<
              ?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>
          parentBuilder,
      final Bound from,
      final Bound to) {
    final TestSortedSetGenerator<E> delegate =
        (TestSortedSetGenerator<E>) parentBuilder.getSubjectGenerator().getInnerGenerator();

    List<Feature<?>> features = new ArrayList<>();
    features.addAll(parentBuilder.getFeatures());
    features.remove(CollectionFeature.ALLOWS_NULL_VALUES);
    features.add(CollectionFeature.SUBSET_VIEW);

    return newBuilderUsing(delegate, to, from)
        .named(parentBuilder.getName() + "" subSet "" + from + ""-"" + to)
        .withFeatures(features)
        .suppressing(parentBuilder.getSuppressedTests())
        .createTestSuite();
  }"
7797001,none,"  @Override
  public String composeName(String name, String prefix) throws NamingException {
    checkIsDestroyed();
    return composeName(nameParser.parse(name), nameParser.parse(prefix)).toString();
  }"
4468174,none,"    public Collector setIncomingMinorFragmentList(List<Integer> incomingMinorFragment)
    {
        this.incomingMinorFragment = incomingMinorFragment;
        return this;
    }"
3918920,none,"    public void removeDependentService(
        CachingServiceReference<?> serviceReference) {

        _dependentServices.remove(serviceReference);
    }"
4693914,none,"  public JobContext getJobContext(String resourceName) {
    if (_contextMap.containsKey(resourceName) && _contextMap.get(resourceName) != null) {
      return new JobContext(_contextMap.get(resourceName));
    }
    return null;
  }"
8904609,none,"  protected void adjustArraySize(int newSize) {
    if (keyStart == null || keyStart.length < newSize) {
      keyStart = new int[newSize];
      keyLength = new int[newSize];
      valueStart = new int[newSize];
      valueLength = new int[newSize];
      keyInited = new boolean[newSize];
      keyIsNull = new boolean[newSize];
      valueInited = new boolean[newSize];
      valueIsNull = new boolean[newSize];
      keyObjects = new LazyBinaryPrimitive<?, ?>[newSize];
      valueObjects = new LazyBinaryObject[newSize];
    }
  }"
8082183,none,"    public final void rule__XBasicForLoopExpression__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug462047Lang.g:9593:1: ( ( ')' ) )
            // InternalBug462047Lang.g:9594:1: ( ')' )
            {
            // InternalBug462047Lang.g:9594:1: ( ')' )
            // InternalBug462047Lang.g:9595:2: ')'
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8()); 
            }
            match(input,56,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
8985872,none,"  @Override
  public void append(PointValue pointValue) throws IOException {
    assert closed == false : ""Point writer is already closed"";
    BytesRef packedValue = pointValue.packedValue();
    assert packedValue.length == packedBytesLength  : ""[packedValue] must have length ["" + packedBytesLength + ""] but was ["" + packedValue.length + ""]"";
    out.writeBytes(packedValue.bytes, packedValue.offset, packedValue.length);
    BytesRef docIDBytes = pointValue.docIDBytes();
    assert docIDBytes.length == Integer.BYTES  : ""[docIDBytes] must have length ["" + Integer.BYTES + ""] but was ["" + docIDBytes.length + ""]"";
    out.writeBytes(docIDBytes.bytes, docIDBytes.offset, docIDBytes.length);
    count++;
    assert expectedCount == 0 || count <= expectedCount : ""expectedCount="" + expectedCount + "" vs count="" + count;
  }"
9296213,none,"    @Override
    public ArrayData copy() {
        final UndefinedArrayFilter copy = new UndefinedArrayFilter(underlying.copy());
        copy.getUndefined().copy(undefined);
        return copy;
    }"
6857899,none,"  public static String generateSub(final ITranslationEnvironment environment, final long offset,
      final OperandSize size, final String operand1, final String operand2,
      final List<ReilInstruction> instructions) throws IllegalArgumentException {
    Preconditions.checkNotNull(environment, ""Error: Argument environment can't be null"");
    Preconditions.checkNotNull(size, ""Error: Argument size can't be null"");
    Preconditions.checkNotNull(operand1, ""Error: Argument operand1 can't be null"");
    Preconditions.checkNotNull(operand2, ""Error: Argument operand2 can't be null"");

    final OperandSize resultSize = TranslationHelpers.getNextSize(size);

    final String msbMask = String.valueOf(TranslationHelpers.getMsbMask(size));
    final String shiftMsbLsb = String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));
    final String carryMask = String.valueOf(getCarryMask(size));
    final String shiftCarryLsb = String.valueOf(-size.getBitSize());
    final String truncateMask = String.valueOf(TranslationHelpers.getAllBitsMask(size));

    final String maskedOp1 = environment.getNextVariableString();
    final String maskedOp2 = environment.getNextVariableString();
    final String subResult = environment.getNextVariableString();
    final String msbResult = environment.getNextVariableString();
    final String msbSameBefore = environment.getNextVariableString();
    final String msbHasChanged = environment.getNextVariableString();
    final String tempOf = environment.getNextVariableString();
    final String tempCf = environment.getNextVariableString();
    final String truncatedResult = environment.getNextVariableString();

    // Isolate the MSBs of the two operands
    instructions.add(ReilHelpers.createAnd(offset, size, operand1, size, msbMask, size, maskedOp1));
    instructions.add(ReilHelpers.createAnd(offset + 1, size, operand2, size, msbMask, size,
        maskedOp2));

    // Perform the subtraction
    instructions.add(ReilHelpers.createSub(offset + 2, size, operand1, size, operand2, resultSize,
        subResult));

    // Isolate the MSB of the result and put it into the Sign Flag
    instructions.add(ReilHelpers.createAnd(offset + 3, resultSize, subResult, resultSize, msbMask,
        size, msbResult));
    instructions.add(ReilHelpers.createBsh(offset + 4, size, msbResult, size, shiftMsbLsb,
        OperandSize.BYTE, SIGN_FLAG));

    // Find out if the MSB of the two operands were different and whether the MSB of the first
    // operand changed
    instructions.add(ReilHelpers.createXor(offset + 5, size, maskedOp1, size, maskedOp2, size,
        msbSameBefore));
    instructions.add(ReilHelpers.createXor(offset + 6, size, maskedOp1, size, msbResult, size,
        msbHasChanged));
    instructions.add(ReilHelpers.createAnd(offset + 7, size, msbSameBefore, size, msbHasChanged,
        size, tempOf));

    // Write the result into the Overflow Flag
    instructions.add(ReilHelpers.createBsh(offset + 8, size, tempOf, size, shiftMsbLsb,
        OperandSize.BYTE, OVERFLOW_FLAG));

    // Update the Carry Flag
    instructions.add(ReilHelpers.createAnd(offset + 9, resultSize, subResult, resultSize,
        carryMask, resultSize, tempCf));
    instructions.add(ReilHelpers.createBsh(offset + 10, resultSize, tempCf, resultSize,
        shiftCarryLsb, OperandSize.BYTE, CARRY_FLAG));

    // Truncate the result to fit into the target
    instructions.add(ReilHelpers.createAnd(offset + 11, resultSize, subResult, resultSize,
        truncateMask, size, truncatedResult));

    // Update the Zero Flag
    instructions.add(ReilHelpers.createBisz(offset + 12, size, truncatedResult, OperandSize.BYTE,
        ZERO_FLAG));

    return truncatedResult;
  }"
6624087,none,"  public static void main(String[] args) {

    Application.launch(args);
  }"
6167933,none,"  public static final JsPromiseError create(final Throwable e) {
    if (e == null) {
      return create();
    } else {
      return createFromThrowable(e);
    }
  }"
6888310,none,"    @Override
    public Void visitInvokeDynamic(ConstantPool.CONSTANT_InvokeDynamic_info info, CPEntries p) {
        return null;
    }"
8230227,none,"    public void ignorableWhitespace(char ch[], int start, int len)
    throws SAXException {
        this.log (""ignorableWhitespace"", new String(ch,start,len));
        if (super.contentHandler!=null) {
            super.contentHandler.ignorableWhitespace(ch,start,len);
        }
    }"
5145744,none,"    public String getStdErr()
    {
        StringBuilder str = new StringBuilder();
        for ( String line : stderr )
        {
            str.append( line );
        }
        return str.toString();
    }"
8087833,none,"	private static void handleMarkerAddition(final  IMarker marker, final String type) {
		final IResource resource = marker.getResource();
		final int lineNumber = marker.getAttribute(IMarker.LINE_NUMBER, -1);
		final int offset = marker.getAttribute(IMarker.CHAR_START, -1);
		final int endoffset = marker.getAttribute(IMarker.CHAR_END, -1);
		final long markerId = marker.getId();

		Map<IResource, List<InternalMarker>> typeSpecificMarkers;

		synchronized (MARKERS) {
			if (MARKERS.containsKey(type)) {
				typeSpecificMarkers = MARKERS.get(type);
			} else {
				typeSpecificMarkers = new HashMap<IResource, List<InternalMarker>>();
				MARKERS.put(type, typeSpecificMarkers);
			}

			List<InternalMarker> fileSpecificMarkers;
			if (typeSpecificMarkers.containsKey(resource)) {
				fileSpecificMarkers = typeSpecificMarkers.get(resource);
			} else {
				fileSpecificMarkers = new ArrayList<InternalMarker>();
				typeSpecificMarkers.put(resource, fileSpecificMarkers);
			}

			boolean found = false;
			for (int i = 0; !found && i < fileSpecificMarkers.size(); i++) {
				if (fileSpecificMarkers.get(i).markerID == markerId) {
					found = true;
				}
			}

			if (!found) {
				final InternalMarker temp = new InternalMarker();
				temp.row = lineNumber;
				temp.offset = offset;
				temp.endoffset = endoffset;
				temp.markerID = markerId;
				fileSpecificMarkers.add(temp);
			}

			markUsed(type, resource, markerId);
		}
	}"
6939776,none,"  private void verifyAllParameters() {
    for (String parameter : parameterValueMap.keySet()) {
      verifyParameter(parameter);
    }
  }"
8548537,none,"    @Override
    public int hashCode() {
        return new HashCodeBuilder()
                .appendSuper(super.hashCode())
                .append(_syncType)
                .append(_nuageVspCmsId)
                .append(_success)
                .toHashCode();
    }"
4617521,none,"    public static double multiply(int op1, float op2) {
        if (instance.int_multiply) {
            return multiplySlow(op1, op2);
        } else {
            return ((double) op1) * ((double) op2);
        }
    }"
7523131,none,"	@Override
	public void beforeStep(StepExecution stepExecution) {

	}"
3924383,none,"  public ScanOptions() {
  }"
9474336,none,"    @Override
    public synchronized int read() throws IOException {
      int data = blockInputStream.read();
      return data;
    }"
9194605,none,"		public ColumnDefn( ResultSetColumnHandle rsHandle, ColumnHintHandle colHintHandle )
		{
			this.rsColumnHandle = rsHandle;
			this.columnHintHandle = colHintHandle;
		}"
6048776,none,"	@Override
	public DataNode setBend_angle_x(IDataset bend_angle_x) {
		return setDataset(NX_BEND_ANGLE_X, bend_angle_x);
	}"
8334605,none,"	void m1(C7 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
6624215,none,"  @Override
  public void start(Stage stage) {

    try {

      // create splitPane pane and JavaFX app scene
      SplitPane splitPane = new SplitPane();
      splitPane.setOrientation(Orientation.VERTICAL);
      Scene fxScene = new Scene(splitPane);

      // set title, size, and add JavaFX scene to stage
      stage.setTitle(""Feature Layer Rendering Mode Map Sample"");
      stage.setWidth(800);
      stage.setHeight(700);
      stage.setScene(fxScene);
      stage.show();

      // create a map (top) and set it to render all features in static rendering mode
      ArcGISMap mapTop = new ArcGISMap();
      mapTop.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);
      mapTop.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);
      mapTop.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);

      // create a map (bottom) and set it to render all features in dynamic rendering mode
      ArcGISMap mapBottom = new ArcGISMap();
      mapBottom.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);
      mapBottom.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);
      mapBottom.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);

      // creating top map view
      mapViewTop = new MapView();
      mapViewTop.setMap(mapTop);
      splitPane.getItems().add(mapViewTop);
      // creating bottom map view
      mapViewBottom = new MapView();
      mapViewBottom.setMap(mapBottom);
      splitPane.getItems().add(mapViewBottom);

      // create service feature table using a point, polyline, and polygon service
      ServiceFeatureTable pointServiceFeatureTable = new ServiceFeatureTable(""http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/0"");
      ServiceFeatureTable polylineServiceFeatureTable = new ServiceFeatureTable(""http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/8"");
      ServiceFeatureTable polygonServiceFeatureTable = new ServiceFeatureTable(""http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/9"");

      // create feature layer from service feature tables
      FeatureLayer pointFeatureLayer = new FeatureLayer(pointServiceFeatureTable);
      FeatureLayer polylineFeatureLayer = new FeatureLayer(polylineServiceFeatureTable);
      FeatureLayer polygonFeatureLayer = new FeatureLayer(polygonServiceFeatureTable);

      // add each layer to top and bottom map
      mapTop.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer, polylineFeatureLayer, polygonFeatureLayer));
      mapBottom.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer.copy(), polylineFeatureLayer.copy(), polygonFeatureLayer.copy()));

      // viewpoint locations for map view to zoom in and out to
      Viewpoint zoomOutPoint = new Viewpoint(new Point(-118.37, 34.46, SpatialReferences.getWgs84()), 650000, 0);
      Viewpoint zoomInPoint = new Viewpoint(new Point(-118.45, 34.395, SpatialReferences.getWgs84()), 50000, 90);
      mapViewTop.setViewpoint(zoomOutPoint);
      mapViewBottom.setViewpoint(zoomOutPoint);

      //loop an animation into and out from the zoom in point (5 seconds each) with a 2 second gap between zooming
      timeline = new Timeline();
      timeline.setCycleCount(Animation.INDEFINITE);
      timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(7), event -> zoomTo(zoomInPoint)));
      timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(14), event -> zoomTo(zoomOutPoint)));
      timeline.play();

    } catch (Exception e) {
      // on any error, display the stack trace.
      e.printStackTrace();
    }
  }"
4057674,none,"    public static void serializeFrameSize(ByteBuffer outputFrame, int numberOfMinFrame) {
        serializeFrameSize(outputFrame, 0, numberOfMinFrame);
    }"
6893083,none,"    public Content getTagletOutput(Doc holder, TagletWriter writer) {
        throw new IllegalArgumentException(""Method not supported in taglet "" + getName() + ""."");
    }"
5593437,none,"    public static void main(String[] args) throws IOException {
        try (XSSFWorkbook wb = new XSSFWorkbook()) {
            XSSFSheet sheet = wb.createSheet(""linechart"");
            final int NUM_OF_ROWS = 3;
            final int NUM_OF_COLUMNS = 10;

            // Create a row and put some cells in it. Rows are 0 based.
            Row row;
            Cell cell;
            for (int rowIndex = 0; rowIndex < NUM_OF_ROWS; rowIndex++) {
                row = sheet.createRow((short) rowIndex);
                for (int colIndex = 0; colIndex < NUM_OF_COLUMNS; colIndex++) {
                    cell = row.createCell((short) colIndex);
                    cell.setCellValue(colIndex * (rowIndex + 1.0));
                }
            }

            XSSFDrawing drawing = sheet.createDrawingPatriarch();
            XSSFClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 0, 5, 10, 15);

            XSSFChart chart = drawing.createChart(anchor);
            XDDFChartLegend legend = chart.getOrAddLegend();
            legend.setPosition(LegendPosition.TOP_RIGHT);

            // Use a category axis for the bottom axis.
            XDDFCategoryAxis bottomAxis = chart.createCategoryAxis(AxisPosition.BOTTOM);
            bottomAxis.setTitle(""x""); // https://stackoverflow.com/questions/32010765
            XDDFValueAxis leftAxis = chart.createValueAxis(AxisPosition.LEFT);
            leftAxis.setTitle(""f(x)"");
            leftAxis.setCrosses(AxisCrosses.AUTO_ZERO);

            XDDFDataSource<Double> xs = XDDFDataSourcesFactory.fromNumericCellRange(sheet, new CellRangeAddress(0, 0, 0, NUM_OF_COLUMNS - 1));
            XDDFNumericalDataSource<Double> ys1 = XDDFDataSourcesFactory.fromNumericCellRange(sheet, new CellRangeAddress(1, 1, 0, NUM_OF_COLUMNS - 1));
            XDDFNumericalDataSource<Double> ys2 = XDDFDataSourcesFactory.fromNumericCellRange(sheet, new CellRangeAddress(2, 2, 0, NUM_OF_COLUMNS - 1));

            XDDFLineChartData data = (XDDFLineChartData) chart.createData(ChartTypes.LINE, bottomAxis, leftAxis);
            XDDFLineChartData.Series series1 = (XDDFLineChartData.Series) data.addSeries(xs, ys1);
            series1.setTitle(""2x"", null); // https://stackoverflow.com/questions/21855842
            series1.setSmooth(false); // https://stackoverflow.com/questions/29014848
            series1.setMarkerStyle(MarkerStyle.STAR); // https://stackoverflow.com/questions/39636138
            XDDFLineChartData.Series series2 = (XDDFLineChartData.Series) data.addSeries(xs, ys2);
            series2.setTitle(""3x"", null);
            series2.setSmooth(true);
            series2.setMarkerSize((short) 6);
            series2.setMarkerStyle(MarkerStyle.TRIANGLE); // https://stackoverflow.com/questions/39636138
            chart.plot(data);

            // if your series have missing values like https://stackoverflow.com/questions/29014848
            // chart.displayBlanksAs(DisplayBlanks.GAP);

            // https://stackoverflow.com/questions/24676460
            solidLineSeries(data, 0, PresetColor.CHARTREUSE);
            solidLineSeries(data, 1, PresetColor.TURQUOISE);

            // Write the output to a file
            try (FileOutputStream fileOut = new FileOutputStream(""ooxml-line-chart.xlsx"")) {
                wb.write(fileOut);
            }
        }
    }"
6515344,none,"    @Override
    public boolean removeInstallableUnits(Collection<IInstallableUnit> installableUnits) {
        throw new UnsupportedOperationException();
    }"
8039539,none,"	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}"
6195890,none,"  @Override
  protected void configure() {
    bind(FactoryDao.class).to(JpaFactoryDao.class);
    bind(RemoveFactoriesBeforeUserRemovedEventSubscriber.class).asEagerSingleton();
  }"
5161273,none,"    public StorageResponseGTScatter(GTScanRequest scanRequest, IPartitionStreamer partitionStreamer,
            StorageContext context) {
        this.info = scanRequest.getInfo();
        this.partitionStreamer = partitionStreamer;
        this.blocks = partitionStreamer.asByteArrayIterator();
        this.columns = scanRequest.getColumns();
        this.groupByDims = scanRequest.getAggrGroupBy();
        this.needSorted = (context.getFinalPushDownLimit() != Integer.MAX_VALUE) || context.isStreamAggregateEnabled();
    }"
7907062,none,"  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BUILD_SLAVE_STATUS:
      return getBuildSlaveStatus();

    }
    throw new java.lang.IllegalStateException();
  }"
7716650,none,"    public static ClusterConfig parse(String file) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(file));
        lines = Linq.map(lines, ClusterConfig::removeComment);
        String contents = String.join("" "", lines);
        ClusterConfig result = IJson.gsonInstance.fromJson(contents, ClusterConfig.class);
        result.validate();
        return result;
    }"
7207869,none,"        public Builder backendName(String backendName) {
            this.backendName = backendName;
            this.__explicitlySet__.add(""backendName"");
            return this;
        }"
5972104,none,"    public static void copyDirectory(final File srcDir, final File destDir) throws IOException {
        if (srcDir == null) {
            throw new NullPointerException(""Source must not be null"");
        }
        if (destDir == null) {
            throw new NullPointerException(""Destination must not be null"");
        }
        if (!srcDir.exists()) {
            throw new FileNotFoundException(""Source '"" + srcDir + ""' does not exist"");
        }
        if (!srcDir.isDirectory()) {
            throw new IOException(""Source '"" + srcDir + ""' exists but is not a directory"");
        }
        if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {
            throw new IOException(""Source '"" + srcDir + ""' and destination '"" + destDir + ""' are the same"");
        }

        // Cater for destination being directory within the source directory (see IO-141)
        List<String> exclusionList = null;
        if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {
            final File[] srcFiles = srcDir.listFiles();
            if (srcFiles != null && srcFiles.length > 0) {
                exclusionList = new ArrayList<>(srcFiles.length);
                for (final File srcFile : srcFiles) {
                    final File copiedFile = new File(destDir, srcFile.getName());
                    exclusionList.add(copiedFile.getCanonicalPath());
                }
            }
        }
        doCopyDirectory(srcDir, destDir, exclusionList);
    }"
7291569,none,"	public boolean test(Object receiver, String property, Object[] args,
			Object expectedValue) {
		if (property.equals(IS_GRAILS_APP)) {
			debug(""isGrailsApp? ""+receiver.getClass() +"" = ""+receiver);
			IProject project = toProject(receiver);
			debug(""adapted to IProject = ""+project);
			boolean result = project!=null && GrailsNature.isGrailsAppProject(project);
			debug(""isGrailsApp? => ""+result);
			return result;
		} 
		return false;
	}"
6431408,none,    public UInteger getNodeClassMask() { return nodeClassMask; }
6057624,none,"        @Override
        protected UnresolvedPlaceholderException doBuild(final DittoHeaders dittoHeaders,
                @Nullable final String message,
                @Nullable final String description,
                @Nullable final Throwable cause,
                @Nullable final URI href) {
            return new UnresolvedPlaceholderException(dittoHeaders, message, description, cause, href);
        }"
5883695,none,"    @Override
    public Set<String> getCounterNames() throws Exception {
        Set<String> names = new TreeSet<String>( CASE_INSENSITIVE_ORDER );
        Set<String> nameSet = cast( getDictionaryAsSet( getApplicationRef(), Schema.DICTIONARY_COUNTERS ) );
        names.addAll( nameSet );
        return names;
    }"
5396847,none,"    public String getQueryString() {
        return delegate.getClass().getName() + "" doesn't support getQueryString() method: '"" + delegate.toString() + ""'"";
    }"
4246529,none,"    protected String getTableStatus( Statement sStatement )
        throws SQLException
    {
        ResultSet statusResultSet = sStatement.executeQuery( ""show table status"" );
        StringBuilder statusString = new StringBuilder();
        int numColumns = statusResultSet.getMetaData().getColumnCount();
        while ( statusResultSet.next() )
        {
            statusString.append( ""\n"" );
            for ( int i = 1; i <= numColumns; i++ )
            {
                statusString.append( statusResultSet.getMetaData().getColumnLabel( i ) + "" [""
                    + statusResultSet.getString( i ) + ""]  |  "" );
            }
        }
        return statusString.toString();
    }"
8684961,none,"        public ProductPromoUseInfo(String productPromoId, String productPromoCodeId, BigDecimal totalDiscountAmount, BigDecimal quantityLeftInActions, Map<ShoppingCartItem,BigDecimal> usageInfoMap) {
            this.productPromoId = productPromoId;
            this.productPromoCodeId = productPromoCodeId;
            this.totalDiscountAmount = totalDiscountAmount;
            this.quantityLeftInActions = quantityLeftInActions;
            this.usageInfoMap = usageInfoMap;
        }"
4910241,none,"        private long numChildNodes(Node node) throws RepositoryException {
            NodeIterator iterator = node.getNodes();
            if (iterator.getSize() >= 0) {
                return iterator.getSize();
            } else {
                int num = 0;
                while (iterator.hasNext() && num < BUCKET_SIZE) {
                    iterator.nextNode();
                    num++;
                }
                return num;
            }
        }"
8326667,none,"		@Override
		public Object visit(AnnotationPointcut node, Object data) {
			hasDynamicContent = true;
			return null;
		}"
7294182,none,"    private String gspFolderName() {
        String name = unit.getElementName();
        int dotIndex = name.indexOf(""."");
        if (dotIndex > 0) {
            name = Character.toLowerCase(name.charAt(0)) + name.substring(1, dotIndex);
            return name;
        } else {
            return name;
        }
    }"
6933417,none,"  @Override
  protected void consumeAttributes(AttributeHelper helper) throws ParseException
      {
    total = helper.consumeInteger(TOTAL, false);
    value = helper.consumeBoolean(null, false);
  }"
7032959,none,"  public int getDVDTotalTitles()
  {
    if (bdp != null)
      return bdp.getNumTitles();
    return 0;
  }"
6179494,none,"  public SearchResultEntry(String filePath, List<OffsetData> data) {
    this.filePath = filePath;
    this.data = data;
  }"
7445434,none,"        public LoadDataOp(AllocatableValue result, DataPointerConstant data) {
            super(TYPE);
            this.result = result;
            this.data = data;
        }"
9127614,none,"	@Override
	public boolean mkdirs( )
	{
		return file.mkdirs( );
	}"
9446238,none,"    public byte[] getBytes(int columnIndex) throws SQLException {
        // sanity check.
        checkIndex(columnIndex);
        // make sure the cursor is on a valid row
        checkCursor();

        if (isBinary(RowSetMD.getColumnType(columnIndex)) == false) {
            throw new SQLException(resBundle.handleGetObject(""cachedrowsetimpl.dtypemismt"").toString());
        }

        return (byte[])(getCurrentRow().getColumnObject(columnIndex));
    }"
6108863,none,"    @Override
    public MutableList<V> toSortedList()
    {
        return this.getMutableMap().toSortedList();
    }"
5586619,none,"  @Override
  public InputStream getInputStream() throws IOException {
    return new FileInputStream(file);
  }"
5605416,none,"    @Override
    public IMXMLEventSpecifierNode getEventSpecifierNode(String name)
    {
        return eventNodeMap != null ? eventNodeMap.get(name) : null;
    }"
7284429,none,"    @Override
    public final void connect(Repository source, ProxyInfoProvider proxyInfoProvider) throws ConnectionException,
            AuthenticationException {
        connect(source, null, proxyInfoProvider);
    }"
9292929,none,"        public Image createImageFromFile(final String file, final double width, final double height) {
            final long image = nativeCreateNSImageFromFileContents(file);
            nativeSetNSImageSize(image, width, height);
            return createImage(image, width, height);
        }"
4083880,none,"    @Override
    public IBinaryHashFunction createBinaryHashFunction() {

        return new IBinaryHashFunction() {

            @Override
            public int hash(byte[] bytes, int offset, int length) {
                return IntegerPointable.getInteger(bytes, offset + 4);
            }
        };
    }"
7568142,none,"	@Override
	protected boolean includeOperation(Method method, String beanKey) {
		PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method);
		return (pd != null && hasManagedAttribute(method)) || hasManagedOperation(method);
	}"
4322779,none,"    @Override
    public void close() throws StandardException
    {
        super.close( constants.underMerge() );
    }"
9295088,none,"    private static long openProcessToken(int access) {
        try {
            return OpenProcessToken(GetCurrentProcess(), access);
        } catch (WindowsException x) {
            return 0L;
        }
    }"
3725378,none,"        @Override
        protected List<ClassStructure> initialValue() {
            final List<ClassStructure> annotationTypeClassStructures = new ArrayList<ClassStructure>();
            accept(new ClassVisitor(ASM7) {

                @Override
                public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
                    if (visible) {
                        final ClassStructure annotationTypeClassStructure = newInstance(Type.getType(desc).getClassName());
                        if (null != annotationTypeClassStructure) {
                            annotationTypeClassStructures.add(annotationTypeClassStructure);
                        }
                    }
                    return super.visitAnnotation(desc, visible);
                }

            });
            return annotationTypeClassStructures;
        }"
8595846,none,"  public static void encrypt(OutputStream out, byte[] src, int offset,
      int length, Encryptor e) throws IOException {
    OutputStream cout = e.createEncryptionStream(out);
    try {
      cout.write(src, offset, length);
    } finally {
      cout.close();
    }
  }"
5818834,none,"    @Override
    GraphSONMapper.Builder configureBuilder(final GraphSONMapper.Builder builder) {
        // already set to 1.0 in AbstractGraphSONMessageSerializerV1d0
        return builder.addCustomModule(new GremlinServerModule())
                .typeInfo(TypeInfo.NO_TYPES);
    }"
5665524,none,"    @Override
    protected boolean containsAllNamedAxes(final String[] axisNames) {
        if (axisNames != null) {
next:       for (final String name : axisNames) {
                for (final CoordinateAxis axis : netcdfCS.getCoordinateAxes()) {
                    if (name.equalsIgnoreCase(axis.getShortName())) {
                        continue next;
                    }
                }
                return false;
            }
        }
        return true;
    }"
3780834,none,"  @Override
  public final void writeToStream(DataOutputStream output) throws IOException {
    output.writeUTF(uri.toString());
    output.writeBoolean(isRemoveAction);
    output.writeInt(data.length);
    output.write(data);
    output.writeInt(keys.size());
    for (int i = 0; i < keys.size(); i++) {
      writeKey(output, keys.get(i));
    }
  }"
8219824,none,"    public final void mKW_Import() throws RecognitionException {
        try {
            int _type = KW_Import;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            {
            match(""import""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
9119349,none,"	public Point computeSize( int wHint, int hHint, boolean changed )
	{
		checkWidget( );
		Point e = getTotalSize( image, text );
		if ( wHint == SWT.DEFAULT )
		{
			e.x += leftMargin + rightMargin;
		}
		else
		{
			e.x = wHint;
		}
		if ( hHint == SWT.DEFAULT )
		{
			e.y += topMargin + bottomMargin;
		}
		else
		{
			e.y = hHint;
		}
		return e;
	}"
8497990,none,"    protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc) {
        if (dc.getNetworkType() != NetworkType.Advanced) {
            throw new CloudRuntimeException(""Zone "" + dc + "" is not advanced."");
        }

        if (dc.isSecurityGroupEnabled()) {
            List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId());
            if (CollectionUtils.isEmpty(networks)) {
                throw new CloudRuntimeException(""Can not found security enabled network in SG Zone "" + dc);
            }

            return networks.get(0);
        }
        else {
            TrafficType defaultTrafficType = TrafficType.Public;
            List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);

            // api should never allow this situation to happen
            if (defaultNetworks.size() != 1) {
                throw new CloudRuntimeException(""Found "" + defaultNetworks.size() + "" networks of type "" + defaultTrafficType + "" when expect to find 1"");
            }

            return defaultNetworks.get(0);
        }
    }"
7278060,none,"  public JPAExpandItemWrapper(final ExpandItem item, final JPAEntityType jpaEntityType) {
    super();
    this.item = item;
    this.jpaEntityType = jpaEntityType;
  }"
5953028,none,"    public void process(List<CloudTrailEvent> events) {
        int i = 0;
        for (CloudTrailEvent event : events) {
            validateEvent(event);
            logger.info(String.format(""Process event %d : %s"", i++, event.getEventData()));
        }
    }"
5907719,none,"    public Type typeCheck(SymbolTable stable) throws TypeCheckError {
	if (argumentCount() > 0) {
	    argument().typeCheck(stable);
	}
	return _type = Type.Real;
    }"
6701931,none,"  boolean isInFullImpressionRange() {
    final int allEdgesVisible = FLAG_LEFT_EDGE_VISIBLE
        | FLAG_TOP_EDGE_VISIBLE
        | FLAG_RIGHT_EDGE_VISIBLE
        | FLAG_BOTTOM_EDGE_VISIBLE;

    return (mFlags & allEdgesVisible) == allEdgesVisible;
  }"
5845283,none,"    private static void orderFragments(Set<WebXml> orderedFragments,
            Set<WebXml> unordered) {
        Set<WebXml> addedThisRound = new HashSet<>();
        Set<WebXml> addedLastRound = new HashSet<>();
        while (unordered.size() > 0) {
            Iterator<WebXml> source = unordered.iterator();
            while (source.hasNext()) {
                WebXml fragment = source.next();
                for (WebXml toRemove : addedLastRound) {
                    fragment.getAfterOrdering().remove(toRemove.getName());
                }
                if (fragment.getAfterOrdering().isEmpty()) {
                    addedThisRound.add(fragment);
                    orderedFragments.add(fragment);
                    source.remove();
                }
            }
            if (addedThisRound.size() == 0) {
                // Circular
                throw new IllegalArgumentException(
                        sm.getString(""webXml.mergeConflictOrder""));
            }
            addedLastRound.clear();
            addedLastRound.addAll(addedThisRound);
            addedThisRound.clear();
        }
    }"
7215246,none,"    @Override public String toString() {
        return ""AMQChannel("" + _connection + "","" + _channelNumber + "")"";
    }"
6530870,none,"    @Override
    public void setState(State state) {
        if (isAcceptedState(acceptedDataTypes, state)) {
            super.setState(state);
        } else {
            logSetTypeError(state);
        }
    }"
8049248,none,"	protected void sequence_Fragment1_FragmentCaller(ISerializationContext context, FragmentCallerType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1));
			if (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL));
			if (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFragmentCallerAccess().getVal1IDTerminalRuleCall_1_0(), semanticObject.getVal1());
		feeder.accept(grammarAccess.getFragment1Access().getFragValIDTerminalRuleCall_0(), semanticObject.getFragVal());
		feeder.accept(grammarAccess.getFragmentCallerAccess().getValIDTerminalRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}"
7385364,none,"		private int readOrder(AnnotationMetadata annotationMetadata) {
			Map<String, Object> attributes = annotationMetadata
					.getAnnotationAttributes(Order.class.getName());
			Integer order = (attributes != null) ? (Integer) attributes.get(""value"")
					: null;
			return (order != null) ? order : Ordered.LOWEST_PRECEDENCE;
		}"
5210111,none,"    private Group parseGroup(final Element element) {
        final Group.Builder builder = new Group.Builder()
                .identifier(element.getAttribute(IDENTIFIER_ATTR))
                .name(element.getAttribute(NAME_ATTR));

        NodeList groupUsers = element.getElementsByTagName(GROUP_USER_ELEMENT);
        for (int i=0; i < groupUsers.getLength(); i++) {
            Element groupUserNode = (Element) groupUsers.item(i);
            builder.addUser(groupUserNode.getAttribute(IDENTIFIER_ATTR));
        }

        return builder.build();
    }"
7588956,none,"	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException {
		this.requestContext = requestContext;
		this.path = path;
		this.htmlEscape = htmlEscape;

		// determine name of the object and property
		String beanName;
		int dotPos = path.indexOf('.');
		if (dotPos == -1) {
			// property not set, only the object itself
			beanName = path;
			this.expression = null;
		}
		else {
			beanName = path.substring(0, dotPos);
			this.expression = path.substring(dotPos + 1);
		}

		this.errors = requestContext.getErrors(beanName, false);

		if (this.errors != null) {
			// Usual case: A BindingResult is available as request attribute.
			// Can determine error codes and messages for the given expression.
			// Can use a custom PropertyEditor, as registered by a form controller.
			if (this.expression != null) {
				if (""*"".equals(this.expression)) {
					this.objectErrors = this.errors.getAllErrors();
				}
				else if (this.expression.endsWith(""*"")) {
					this.objectErrors = this.errors.getFieldErrors(this.expression);
				}
				else {
					this.objectErrors = this.errors.getFieldErrors(this.expression);
					this.value = this.errors.getFieldValue(this.expression);
					this.valueType = this.errors.getFieldType(this.expression);
					if (this.errors instanceof BindingResult) {
						this.bindingResult = (BindingResult) this.errors;
						this.actualValue = this.bindingResult.getRawFieldValue(this.expression);
						this.editor = this.bindingResult.findEditor(this.expression, null);
					}
					else {
						this.actualValue = this.value;
					}
				}
			}
			else {
				this.objectErrors = this.errors.getGlobalErrors();
			}
			this.errorCodes = initErrorCodes(this.objectErrors);
		}

		else {
			// No BindingResult available as request attribute:
			// Probably forwarded directly to a form view.
			// Let's do the best we can: extract a plain target if appropriate.
			Object target = requestContext.getModelObject(beanName);
			if (target == null) {
				throw new IllegalStateException(""Neither BindingResult nor plain target object for bean name '"" +
						beanName + ""' available as request attribute"");
			}
			if (this.expression != null && !""*"".equals(this.expression) && !this.expression.endsWith(""*"")) {
				BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(target);
				this.value = bw.getPropertyValue(this.expression);
				this.valueType = bw.getPropertyType(this.expression);
				this.actualValue = this.value;
			}
			this.errorCodes = new String[0];
			this.errorMessages = new String[0];
		}

		if (htmlEscape && this.value instanceof String) {
			this.value = HtmlUtils.htmlEscape((String) this.value);
		}
	}"
8914719,none,"    public void unsetEnvironment_context() {
      this.environment_context = null;
    }"
7451069,none,"    @Override
    @Uninterruptible(reason = ""May be called from uninterruptible code."", mayBeInlined = true)
    public Pointer mapFile(PointerBase start, UnsignedWord nbytes, WordBase fileHandle, UnsignedWord offset, int access) {
        int flags = MAP_PRIVATE();
        if (start.isNonNull()) {
            flags |= MAP_FIXED();
        }
        int fd = (int) fileHandle.rawValue();
        Pointer result = mmap(start, nbytes, accessAsProt(access), flags, fd, offset.rawValue());
        return result.notEqual(MAP_FAILED()) ? result : WordFactory.nullPointer();
    }"
3803712,none,"    private void updateWindowState(List<Tuple> expired, List<Tuple> newEvents) {
        LOG.debug(""Update window state, {} expired, {} new events"", expired.size(), newEvents.size());
        Map<TaskStream, WindowState> state = new HashMap<>();
        updateState(state, expired, false);
        updateState(state, newEvents, true);
        updateStreamState(state);
    }"
6746974,none,"  public Object getFieldMostRecentImportStatus() {
    return mMostRecentImportStatus;
  }"
8748649,none,"  void setIncludePattern(Pattern includePattern) {
    this.includePattern = includePattern;
  }"
7108130,none,"        private int encode0(byte[] src, int off, int end, byte[] dst) {
            char[] base64 = isURL ? toBase64URL : toBase64;
            int sp = off;
            int slen = (end - off) / 3 * 3;
            int sl = off + slen;
            if (linemax > 0 && slen  > linemax / 4 * 3)
                slen = linemax / 4 * 3;
            int dp = 0;
            while (sp < sl) {
                int sl0 = Math.min(sp + slen, sl);
                for (int sp0 = sp, dp0 = dp ; sp0 < sl0; ) {
                    int bits = (src[sp0++] & 0xff) << 16 |
                               (src[sp0++] & 0xff) <<  8 |
                               (src[sp0++] & 0xff);
                    dst[dp0++] = (byte)base64[(bits >>> 18) & 0x3f];
                    dst[dp0++] = (byte)base64[(bits >>> 12) & 0x3f];
                    dst[dp0++] = (byte)base64[(bits >>> 6)  & 0x3f];
                    dst[dp0++] = (byte)base64[bits & 0x3f];
                }
                int dlen = (sl0 - sp) / 3 * 4;
                dp += dlen;
                sp = sl0;
                if (dlen == linemax && sp < end) {
                    for (byte b : newline){
                        dst[dp++] = b;
                    }
                }
            }
            if (sp < end) {               // 1 or 2 leftover bytes
                int b0 = src[sp++] & 0xff;
                dst[dp++] = (byte)base64[b0 >> 2];
                if (sp == end) {
                    dst[dp++] = (byte)base64[(b0 << 4) & 0x3f];
                    if (doPadding) {
                        dst[dp++] = '=';
                        dst[dp++] = '=';
                    }
                } else {
                    int b1 = src[sp++] & 0xff;
                    dst[dp++] = (byte)base64[(b0 << 4) & 0x3f | (b1 >> 4)];
                    dst[dp++] = (byte)base64[(b1 << 2) & 0x3f];
                    if (doPadding) {
                        dst[dp++] = '=';
                    }
                }
            }
            return dp;
        }"
4081252,none,"    @Override
    public ILSMIndex createInstance(INCServiceContext serviceCtx) throws HyracksDataException {
        IIOManager ioManager = serviceCtx.getIoManager();
        FileReference file = ioManager.resolve(path);
        List<IVirtualBufferCache> virtualBufferCaches = vbcProvider.getVirtualBufferCaches(serviceCtx, file);
        ioOpCallbackFactory.initialize(serviceCtx, this);
        return LSMRTreeUtils.createLSMTreeWithAntiMatterTuples(ioManager, virtualBufferCaches, file,
                storageManager.getBufferCache(serviceCtx), typeTraits, cmpFactories, btreeCmpFactories,
                valueProviderFactories, rtreePolicyType,
                mergePolicyFactory.createMergePolicy(mergePolicyProperties, serviceCtx),
                opTrackerProvider.getOperationTracker(serviceCtx, this), ioSchedulerProvider.getIoScheduler(serviceCtx),
                ioOpCallbackFactory, linearizeCmpFactory, rtreeFields, filterTypeTraits, filterCmpFactories,
                filterFields, durable, isPointMBR, metadataPageManagerFactory);
    }"
8573637,none,"  synchronized void remoteOperationDone(MasterProcedureEnv env, Throwable error) {
    if (this.isFinished()) {
      LOG.info(""This procedure {} is already finished, skip the rest processes"", this.getProcId());
      return;
    }
    if (event == null) {
      LOG.warn(""procedure event for {} is null, maybe the procedure is created when recovery"",
          getProcId());
      return;
    }
    complete(env, error);
    event.wake(env.getProcedureScheduler());
    event = null;
  }"
9489554,none,"    @Override
    public BUTTON<T> $lang(String value) {
      addAttr(""lang"", value);
      return this;
    }"
7702332,none,"  private void handleChainFromFilter(
      StreamTypeRecord streamType,
      MethodInvocationTree observableDotFilter,
      Tree filterMethodOrLambda,
      VisitorState state) {
    MethodInvocationTree outerCallInChain = observableDotFilter;
    if (outerCallInChain == null) {
      return;
    }
    // Traverse the observable call chain out through any pass-through methods
    do {
      outerCallInChain = observableOuterCallInChain.get(outerCallInChain);
      // Check for a map method (which might be a pass-through method or the first method after a
      // pass-through chain)
      MethodInvocationTree mapCallsite = observableOuterCallInChain.get(observableDotFilter);
      if (observableCallToInnerMethodOrLambda.containsKey(outerCallInChain)) {
        // Update mapToFilterMap
        Symbol.MethodSymbol mapMethod = ASTHelpers.getSymbol(outerCallInChain);
        if (streamType.isMapMethod(mapMethod)) {
          MaplikeToFilterInstanceRecord record =
              new MaplikeToFilterInstanceRecord(
                  streamType.getMaplikeMethodRecord(mapMethod), filterMethodOrLambda);
          mapToFilterMap.put(observableCallToInnerMethodOrLambda.get(outerCallInChain), record);
        }
      }
    } while (outerCallInChain != null
        && streamType.matchesType(ASTHelpers.getReceiverType(outerCallInChain), state)
        && streamType.isPassthroughMethod(ASTHelpers.getSymbol(outerCallInChain)));
  }"
6816458,none,"  private void checkBasicCall(CallBasicNode node, TemplateRegistry registry) {
    TemplateMetadata callee = registry.getBasicTemplateOrElement(node.getCalleeName());

    if (callee == null) {
      String extraErrorMessage =
          SoyErrors.getDidYouMeanMessage(
              registry.getBasicTemplateOrElementNames(), node.getCalleeName());
      errorReporter.report(
          node.getSourceLocation(),
          CALL_TO_UNDEFINED_TEMPLATE,
          node.getCalleeName(),
          extraErrorMessage);
    } else {
      SoyFileKind calleeKind = callee.getSoyFileKind();
      String callerFilePath = node.getSourceLocation().getFilePath();
      String calleeFilePath = callee.getSourceLocation().getFilePath();
      if (calleeKind == SoyFileKind.INDIRECT_DEP) {
        errorReporter.report(
            node.getSourceLocation(),
            CALL_TO_INDIRECT_DEPENDENCY,
            calleeFilePath);
      }
    }
  }"
9376700,none,"    public void Blit(SurfaceData src, SurfaceData dst,
                     Composite comp, Region clip,
                     int srcx, int srcy, int dstx, int dsty, int w, int h)
    {
        Raster srcRast = src.getRaster(srcx, srcy, w, h);
        IntegerComponentRaster icr = (IntegerComponentRaster) srcRast;
        int[] srcPix = icr.getDataStorage();

        WritableRaster dstRast =
            (WritableRaster) dst.getRaster(dstx, dsty, w, h);
        ColorModel dstCM = dst.getColorModel();

        Region roi = CustomComponent.getRegionOfInterest(src, dst, clip,
                                                         srcx, srcy,
                                                         dstx, dsty, w, h);
        SpanIterator si = roi.getSpanIterator();

        Object dstPix = null;

        int srcScan = icr.getScanlineStride();
        // assert(icr.getPixelStride() == 1);
        srcx -= dstx;
        srcy -= dsty;
        int[] span = new int[4];
        while (si.nextSpan(span)) {
            int rowoff = (icr.getDataOffset(0) +
                          (srcy + span[1]) * srcScan +
                          (srcx + span[0]));
            for (int y = span[1]; y < span[3]; y++) {
                int off = rowoff;
                for (int x = span[0]; x < span[2]; x++) {
                    dstPix = dstCM.getDataElements(srcPix[off++], dstPix);
                    dstRast.setDataElements(x, y, dstPix);
                }
                rowoff += srcScan;
            }
        }
        // REMIND: We need to do something to make sure that dstRast
        // is put back to the destination (as in the native Release
        // function)
        // src.releaseRaster(srcRast);  // NOP?
        // dst.releaseRaster(dstRast);
    }"
8322298,none,"	public void setProceedOnError(boolean b) {
		options.proceedOnError = b;
	}"
4462446,none,"  public void configure(OptionManager optionsManager) {
    assert (state == State.CONFIG);
    accuracy = optionsManager.getLong(ExecConstants.HLL_ACCURACY);
    // Now config complete - moving to MERGE state
    state = State.MERGE;
  }"
7404871,none,"    @Override
    public boolean visitObjectReference(final Pointer objRef, boolean compressed) {
        return visitObjectReferenceInline(objRef, 0, compressed);
    }"
3699521,none,"      @java.lang.Override
      public com.alibaba.otter.canal.protocol.CanalPacket.Unsub buildPartial() {
        com.alibaba.otter.canal.protocol.CanalPacket.Unsub result = new com.alibaba.otter.canal.protocol.CanalPacket.Unsub(this);
        result.destination_ = destination_;
        result.clientId_ = clientId_;
        result.filter_ = filter_;
        onBuilt();
        return result;
      }"
6519706,none,"  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((model == null) ? 0 : model.hashCode());
    result = prime * result + ((parent == null) ? 0 : parent.hashCode());
    result = prime * result + ((propertyValue == null) ? 0 : propertyValue.hashCode());
    return result;
  }"
5580164,none,"  @PostMapping(""fromAttribute"")
  public String fromAttribute(@RequestAttribute(""input"") String inputs,
      @RequestAttribute(value = ""input2"") String inputs2, @RequestAttribute(name = ""input3"") String inputs3) {
    return inputs + "","" + inputs2 + "","" + inputs3;
  }"
5580203,none,"  private void routeToBackend(RoutingContext context, Hcr hcr, String userId) {
    Map<String, String> pathParams = context.pathParams();
    String microserviceName = pathParams.get(""param0"");
    String pathVersion = pathParams.get(""param1"");
    String path = context.request().path().substring(prefix.length() + 1);

    EncryptEdgeInvocation edgeInvocation = new EncryptEdgeInvocation(new EncryptContext(hcr, userId));
    edgeInvocation.setVersionRule(versionMapper.getOrCreate(pathVersion).getVersionRule());

    edgeInvocation.init(microserviceName, context, path, httpServerFilters);
    edgeInvocation.edgeInvoke();
  }"
8548892,none,"    private boolean configureHA(final Long resourceId, final HAResource.ResourceType resourceType, final Boolean enable, final String haProvider) {
        return Transaction.execute(new TransactionCallback<Boolean>() {
            @Override
            public Boolean doInTransaction(TransactionStatus status) {
                HAConfigVO haConfig = (HAConfigVO) haConfigDao.findHAResource(resourceId, resourceType);
                if (haConfig == null) {
                    haConfig = new HAConfigVO();
                    if (haProvider != null) {
                        haConfig.setHaProvider(haProvider);
                    }
                    if (enable != null) {
                        haConfig.setEnabled(enable);
                        haConfig.setManagementServerId(ManagementServerNode.getManagementServerId());
                    }
                    haConfig.setResourceId(resourceId);
                    haConfig.setResourceType(resourceType);
                    if (Strings.isNullOrEmpty(haConfig.getHaProvider())) {
                        throw new ServerApiException(ApiErrorCode.PARAM_ERROR, ""HAProvider is not provided for the resource, failing configuration."");
                    }
                    if (haConfigDao.persist(haConfig) != null) {
                        return true;
                    }
                } else {
                    if (enable != null) {
                        haConfig.setEnabled(enable);
                    }
                    if (haProvider != null) {
                        haConfig.setHaProvider(haProvider);
                    }
                    if (Strings.isNullOrEmpty(haConfig.getHaProvider())) {
                        throw new ServerApiException(ApiErrorCode.PARAM_ERROR, ""HAProvider is not provided for the resource, failing configuration."");
                    }
                    return haConfigDao.update(haConfig.getId(), haConfig);
                }
                return false;
            }
        });
    }"
5498738,none,"    @RequestMapping(value = ""/producerConnection.query"", method = {RequestMethod.GET})
    @ResponseBody
    public Object producerConnection(@RequestParam String producerGroup, @RequestParam String topic) {
        ProducerConnection producerConnection = producerService.getProducerConnection(producerGroup, topic);
        producerConnection.setConnectionSet(ConnectionInfo.buildConnectionInfoHashSet(producerConnection.getConnectionSet()));
        return producerConnection;
    }"
3741534,none,"    public void execute(@Param(""dataMediaSourceId"") Long dataMediaSourceId, Context context) throws Exception {
        DataMediaSource dataMediaSource = dataMediaSourceService.findById(dataMediaSourceId);

        // dataSource
        List<DataMedia> dataMedias = dataMediaService.listByDataMediaSourceId(dataMediaSource.getId());
        context.put(""source"", dataMediaSource);
        context.put(""dataMedias"", dataMedias);
    }"
6613429,none,"  @Override
  protected void onDestroy() {
    super.onDestroy();
    mMapView.dispose();
  }"
7760290,none,"  public static long gzip(final ByteSource in, final ByteSink out, Predicate<Throwable> shouldRetry)
  {
    return StreamUtils.retryCopy(
        in,
        new ByteSink()
        {
          @Override
          public OutputStream openStream() throws IOException
          {
            return new GZIPOutputStream(out.openStream());
          }
        },
        shouldRetry,
        DEFAULT_RETRY_COUNT
    );
  }"
7502933,none,"    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }"
6775552,none,"    @Override
    public APIRequestCreateMockup requestFields (List<String> fields, boolean value) {
      for (String field : fields) {
        this.requestField(field, value);
      }
      return this;
    }"
6303935,none,"    public void directUpgrade()
    {
        if (state != State.PREFACE)
            throw new IllegalStateException();
        prefaceParser.directUpgrade();
    }"
5488746,none,"    @Override
    public Content getMessageContent(final long messageId, final long limit, boolean returnJson, boolean decompressBeforeLimiting)
    {
        final MessageContentFinder messageFinder = new MessageContentFinder(messageId);
        visit(messageFinder);
        if (messageFinder.isFound())
        {
            return createMessageContent(messageFinder.getMessageReference(), returnJson, limit, decompressBeforeLimiting);
        }
        else
        {
            return null;
        }
    }"
4501314,none,"    protected MetaDataReader(File logFile, int logFileID) throws IOException {
      this.logFile = logFile;
      metaDataFile = Serialization.getMetaDataFile(logFile);
      this.logFileID = logFileID;
    }"
5793952,none,"    private String getMetadataFullAffiliations(List<Author> authorList) {
        List<Affiliation> unique = new ArrayList<Affiliation>();
        StringBuilder metAffils = new StringBuilder();

        for (Author a : authorList) {
            for (Affiliation af : a.getAffiliations()) {
                if (!unique.contains(af)) {
                    unique.add(af);
                }
            }
        }
        metAffils.append(""["");
        for (Affiliation af : unique) {
            metAffils.append(af.toString());
            metAffils.append("","");
        }
        metAffils.append(metAffils.deleteCharAt(metAffils.length() - 1));
        metAffils.append(""]"");
        return metAffils.toString();
    }"
6888470,none,"    public TypeElementCatalog(Iterable<TypeElement> typeElements, Configuration config) {
        this(config);
        for (TypeElement typeElement : typeElements) {
            addTypeElement(typeElement);
        }
    }"
8118314,none,"	@Override
	public void configure(Binder binder) {
		properties = tryBindProperties(binder, ""org/eclipse/xtext/grammarinheritance/BaseInheritanceTestLanguage.properties"");
		super.configure(binder);
	}"
8863382,none,"    public void read(org.apache.thrift.protocol.TProtocol iprot, TCancelOperationResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }"
8332252,none,"	void m64(C0 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
5625012,none,"        @Override
        public void startElement(final String uri, final String localName, final String qname, final Attributes attributes) throws SAXException
        {
            // Verify and initialize the context stack at root element.
            if (contextStack.size() == 0)
            {
                if (!qname.equals(rootElement))
                {
                    throw new SAXConfigurationException(
                            new ConfigurationException.IncorrectElement(rootElement, qname, this.source, locator.getLineNumber()),
                            locator);
                }                
                String all = attributes.getValue(""includeAllClasses"");
                if (""true"".equals(all))
                    allClasses = true;
                contextStack.push(qname);
                return;
            }
            else
            {
                if (qname.equals(""classEntry""))
                {
                    String path = attributes.getValue(""path"");
                    includedClasses.add(path);
                }
                else if (qname.equals(""namespaceManifestEntry""))
                {
                    String manifest = attributes.getValue(""manifest"");
                    String namespace = attributes.getValue(""namespace"");
                    fbArgs.add(""-namespace"");
                    fbArgs.add(namespace);
                    String mf = contextPath + ""/"" + manifest;
                    File f = new File(mf);
                    if (!f.exists())
                    {
                        mf = contextPath + ""/src/"" + manifest;
                    }
                    fbArgs.add(mf);
                    fbArgs.add(""-include-namespaces"");
                    fbArgs.add(namespace);                    
                }
            }
        }"
4392544,none,"    public RMConfiguration getConfiguration() {
        return configuration;
    }"
5177811,none,"    private FunctionDesc findAggrFuncFromCubeDesc(FunctionDesc aggrFunc) {
        for (MeasureDesc measure : cubeDesc.getMeasures()) {
            if (measure.getFunction().equals(aggrFunc))
                return measure.getFunction();
        }
        return aggrFunc;
    }"
5801932,none,"    public static Asset2 toAsset2(final Asset asset)
    {
        if (asset instanceof Asset2)
            return (Asset2) asset;

        return new Asset2()
        {
            /** Returns false. */
            public boolean isInvariant()
            {
                return false;
            }

            public Resource getResource()
            {
                return asset.getResource();
            }

            public String toClientURL()
            {
                return asset.toClientURL();
            }

            @Override
            public String toString()
            {
                return asset.toString();
            }
        };
    }"
4460754,none,"      public org.apache.drill.exec.proto.BitControl.PlanFragment.Builder addFragmentBuilder() {
        return getFragmentFieldBuilder().addBuilder(
            org.apache.drill.exec.proto.BitControl.PlanFragment.getDefaultInstance());
      }"
3753095,none,"        public void addValue(Object value) {
            this.values.add(value);
        }"
8917167,none,"  public int getParamCount(HplsqlParser.Expr_func_paramsContext ctx) {
    if (ctx == null) {
      return 0;
    }
    return ctx.func_param().size();
  }"
7426271,none,"    @Override
    public String toString()
    {
        return description.toString();
    }"
6462072,none,"    private void buildNode515()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=14143""), new QualifiedName(0, ""InputArguments""), new LocalizedText(""en"", ""InputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=14143""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=14142""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=14143""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=14143""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=14142""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>FileHandle</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Position</ns2:Name><ns2:DataType><ns2:Identifier>i=9</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
6207209,none,"  private void initializePages() {
    initialCommandName = editedCommand.getName();

    pages.forEach(
        page -> {
          page.edit(editedCommand);
          page.setDirtyStateListener(
              () -> {
                updateDirtyState(isDirtyPage());
                view.setSaveEnabled(isDirtyPage());
              });
        });
  }"
9502340,none,"  public void removeFileBeingWritten(final long inodeId) {
    synchronized(filesBeingWritten) {
      filesBeingWritten.remove(inodeId);
      if (filesBeingWritten.isEmpty()) {
        lastLeaseRenewal = 0;
      }
    }
  }"
8213437,none,"	@RequestMapping(""/home"")
	public String home(Model model) {
		model.addAttribute(""name"", ""spring"");
		return ""home"";
	}"
4130189,none,"  public SqlNode getNode() {
    return overCall;
  }"
6462487,none,"    public static SignatureProcessor payloadSize ()
    {
        return new SignatureProcessor () {

            private long archiveSize;

            @Override
            public void init ( final long archiveSize )
            {
                this.archiveSize = archiveSize;
            }

            @Override
            public void feedHeader ( final ByteBuffer header )
            {
            }

            @Override
            public void feedPayloadData ( final ByteBuffer data )
            {
            }

            @Override
            public void finish ( final Header<RpmSignatureTag> signature )
            {
                signature.putSize ( this.archiveSize, RpmSignatureTag.PAYLOAD_SIZE, RpmSignatureTag.LONGARCHIVESIZE );
            }
        };
    }"
6713364,none,"  @Override
  public @Nullable EventHandler<InterceptTouchEvent> getInterceptTouchHandler() {
    return mInterceptTouchHandler;
  }"
6578382,none,"    public final void mT__66() throws RecognitionException {
        try {
            int _type = T__66;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalEntities.g:64:7: ( 'if' )
            // InternalEntities.g:64:9: 'if'
            {
            match(""if""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
5657989,none,"    protected void assertNotClosed() throws SQLConnectionClosedException {
        this.statement.assertNotClosed();

        if (this.isClosed) {
            throw new SQLConnectionClosedException(format(Level.WARNING, ""excp.closed_resultset"", this.sql, getFile().getName()), this.sql, getFile());
        }
    }"
4282143,none,"    @Override
    public String toString()
    {
        return ""CuratorEventImpl{"" +
            ""type="" + type +
            "", resultCode="" + resultCode +
            "", path='"" + path + '\'' +
            "", name='"" + name + '\'' +
            "", children="" + children +
            "", context="" + context +
            "", stat="" + stat +
            "", data="" + Arrays.toString(data) +
            "", watchedEvent="" + watchedEvent +
            "", aclList="" + aclList +
            "", opResults="" + opResults +
            '}';
    }"
7589426,none,"	public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {
		super(""Failed to convert value of type '"" + ClassUtils.getDescriptiveType(value) + ""'"" +
				(requiredType != null ? "" to required type '"" + ClassUtils.getQualifiedName(requiredType) + ""'"" : """"),
				cause);
		this.value = value;
		this.requiredType = requiredType;
	}"
8051170,none,"	private String getRawReturnType(JvmOperation singleOperation) {
		JvmTypeReference returnType = singleOperation.getReturnType();
		if (returnType == null)
			return null;
		JvmType rawType = returnType.getType();
		if (rawType == null) {
			return null;
		}
		return rawType.getQualifiedName();
	}"
7513487,none,"        LLVMNegateNode(LLVMAbstractCompareNode booleanExpression) {
            this.booleanExpression = booleanExpression;
        }"
6329944,none,"    @Override
    public void delete(KapuaId scopeId, KapuaId groupId) throws KapuaException {
        //
        // Argument validation
        ArgumentValidator.notNull(scopeId, ""scopeId"");
        ArgumentValidator.notNull(groupId, ""groupId"");

        //
        // Check Access
        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.delete, scopeId));

        //
        // Check existence
        if (find(scopeId, groupId) == null) {
            throw new KapuaEntityNotFoundException(Group.TYPE, groupId);
        }

        //
        // Do delete
        entityManagerSession.onTransactedAction(em -> GroupDAO.delete(em, scopeId, groupId));
    }"
6250253,none,"    public void displayWarning(final String message) {
        notificationMessage.showNotification(SPUIStyleDefinitions.SP_NOTIFICATION_WARNING_MESSAGE_STYLE, null, message,
                true);
    }"
5212058,none,"  @Override
  public void close() throws IOException {
    // This will flush any unsent documents.
    commit();
    // close the client
    if (client != null) {
      client.shutdown();
    }
  }"
5123754,none,"  @Override
  protected boolean noteNonscriptTag(String tagName, Map<String,String> attributes)
    throws ManifoldCFException
  {
    if (super.noteNonscriptTag(tagName,attributes))
      return true;
    if (tagName.equals(""meta""))
    {
      handler.noteMetaTag(attributes);
    }
    return false;
  }"
5774985,none,"    @Override
    public int countExecutions(final String taskKey) {
        return getService(ReportService.class).
                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(1).build()).getTotalCount();
    }"
8281849,none,"    private SimpleDateFormat createFormat(DateResolution dateResolution) {
        switch (dateResolution) {
        case Year:
            return new SimpleDateFormat(""yyyy"");
        case Month:
            return new SimpleDateFormat(""yyyyMM"");
        case Day:
            return new SimpleDateFormat(""yyyyMMdd"");
        case Hour:
            return new SimpleDateFormat(""yyyyMMddhh"");
        case Minute:
            return new SimpleDateFormat(""yyyyMMddhhmm"");
        case Second:
            return new SimpleDateFormat(""yyyyMMddhhmmss"");
        default:
            return new SimpleDateFormat(""yyyyMMddhhmmssSSS"");
        }
    }"
7574549,none,"	@Override
	public boolean matches(Class<?> clazz) {
		return (this.checkInherited ? AnnotatedElementUtils.hasAnnotation(clazz, this.annotationType) :
				clazz.isAnnotationPresent(this.annotationType));
	}"
6863460,none,"  private void colorLoops() {
    try {
      for (final INaviViewNode currentNode : getGraph().getNodes()) {
        if (currentNode.getParents().isEmpty()) {
          CLoopHighlighter.colorLoops(getGraph(), currentNode);
          break;
        }
      }
    } catch (final MalformedGraphException exception) {
      NaviLogger.warning(""Error: Graph is malformed, can not color loops"");
    }
  }"
4745033,none,"    @Override
    public SourceVersion getSupportedSourceVersion() {
        try {
            return SourceVersion.valueOf(""RELEASE_8""); // NOI18N
        } catch (IllegalArgumentException ex) {
            return SourceVersion.RELEASE_7;
        }
    }"
5354961,none,"    private Record transform(final Record record, final JoltTransform transform) {
        Map<String, Object> recordMap = (Map<String, Object>) DataTypeUtils.convertRecordFieldtoObject(record, RecordFieldType.RECORD.getRecordDataType(record.getSchema()));

        // JOLT expects arrays to be of type List where our Record code uses Object[].
        // Make another pass of the transformed objects to change Object[] to List.
        recordMap = (Map<String, Object>) normalizeJoltObjects(recordMap);
        final Object transformedObject = transform(transform, recordMap);

        // JOLT expects arrays to be of type List where our Record code uses Object[].
        // Make another pass of the transformed objects to change List to Object[].
        final Object normalizedRecordValues = normalizeRecordObjects(transformedObject);
        final Record updatedRecord = DataTypeUtils.toRecord(normalizedRecordValues, ""r"");
        return updatedRecord;
    }"
3701394,none,"    public final int getBeUint24(final int pos) {
        final int position = origin + pos;

        if (pos + 2 >= limit || pos < 0) throw new IllegalArgumentException(""limit excceed: ""
                                                                            + (pos < 0 ? pos : (pos + 2)));

        byte[] buf = buffer;
        return (0xff & buf[position + 2]) | ((0xff & buf[position + 1]) << 8) | ((0xff & buf[position]) << 16);
    }"
3823798,none,"   public TransactionDetail(Xid xid, Transaction tx, Long creation) {
      this.xid = xid;
      this.transaction = tx;
      this.creationTime = creation;
   }"
7754600,none,"    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        ApiError that = ApiError.class.cast(other);
        return Objects.equal(this.message, that.message) &&
                Objects.equal(this.details, that.details) &&
                Objects.equal(this.error, that.error);
    }"
4527162,none,"    @Transactional
    @Override
    public CommandProcessingResult processCommand(final JsonCommand command) {
        return this.depositAccountWritePlatformService.depositToRDAccount(command.entityId(), command);
    }"
5023689,none,"  public int compareTo(FactPartition o) {
    int colComp = this.partCol.compareTo(o.partCol);
    if (colComp == 0) {
      int partComp = 0;
      if (this.partSpec != null) {
        if (o.partSpec == null) {
          partComp = 1;
        } else {
          partComp = this.partSpec.compareTo(o.partSpec);
        }
      } else {
        if (o.partSpec != null) {
          partComp = -1;
        } else {
          partComp = 0;
        }
      }
      if (partComp == 0) {
        int upComp = 0;
        if (this.period != null && o.period != null) {
          upComp = this.period.compareTo(o.period);
        } else if (this.period == null && o.period == null) {
          upComp = 0;
        } else if (this.period == null) {
          upComp = -1;
        } else {
          upComp = 1;
        }
        if (upComp == 0) {
          if (this.containingPart != null) {
            if (o.containingPart == null) {
              return 1;
            }
            return this.containingPart.compareTo(o.containingPart);
          } else {
            if (o.containingPart != null) {
              return -1;
            } else {
              return 0;
            }
          }
        }
        return upComp;
      }
      return partComp;
    }
    return colComp;
  }"
5414004,none,"    private PDatum getParam(int index) throws SQLException {
        if (index <= 0 || index > params.length) {
            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND)
                .setMessage(""The index is "" + index + "". Must be between 1 and "" + params.length)
                .build().buildException();
        }
        PDatum param = params[index-1];
        
        if (param == EMPTY_DATUM) {
            //value at params[index-1] was never set.
            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND)
                .setMessage(""Parameter at index "" + index + "" is unbound"").build().buildException();
        }
        return param;
    }"
7074998,none,"  private <T> Task<Response<T>> createTask(final String name, final Request<T> request,
      final RequestContext requestContext, RequestConfig config) {
    LOGGER.debug(""createTask, name: '{}', config: {}"", name, config);
    if (_d2RequestTimeoutEnabled) {
      return createTaskWithD2Timeout(name, request, requestContext, config);
    } else {
      return createTaskWithTimeout(name, request, requestContext, config);
    }
  }"
5690795,none,"	public int delete(IdEntity object) throws CreateException {
		if (object == null) {
			throw new CreateException(""Cannot delete null object"");
		}
		return delete(object.getClass(), object.getId());
	}"
6487817,none,"	public UDATA add(UDATA parameter) {
		return new UDATA(this).add(parameter);
	}"
7996314,none,"	public void completeUnary_Source(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
	}"
5839532,none,"    public static String adjustRelativePath(String path) throws FileNotFoundException {
        // Empty or null path can't point to anything useful. The assumption is
        // that the value is deliberately empty / null so leave it that way.
        if (path == null || path.length() == 0) {
            return path;
        }
        String newPath = path;
        File f = new File(newPath);
        if ( !f.isAbsolute()) {
            newPath = System.getProperty(Constants.CATALINA_BASE_PROP) + File.separator + newPath;
            f = new File(newPath);
        }
        if (!f.exists()) {
            throw new FileNotFoundException(sm.getString(""sslHostConfig.fileNotFound"", newPath));
        }
        return newPath;
    }"
6341238,none,"  protected void writeVersion(final JsonWriter out, final Integer value) throws IOException {
    if ((value == null)) {
      final boolean previousSerializeNulls = out.getSerializeNulls();
      out.setSerializeNulls(true);
      out.nullValue();
      out.setSerializeNulls(previousSerializeNulls);
    } else {
      out.value(value);
    }
  }"
8521588,none,"    public UsageVMSnapshotVO(long id, long zoneId, long accountId, long domainId, long vmId, Long diskOfferingId, long size, Date created, Date processed) {
        this.zoneId = zoneId;
        this.accountId = accountId;
        this.domainId = domainId;
        this.diskOfferingId = diskOfferingId;
        this.id = id;
        this.size = size;
        this.created = created;
        this.vmId = vmId;
        this.processed = processed;
    }"
5845274,none,"    private <T extends ResourceBase> boolean mergeResourceMap(
            Map<String, T> fragmentResources, Map<String, T> mainResources,
            Map<String, T> tempResources, WebXml fragment) {
        for (T resource : fragmentResources.values()) {
            String resourceName = resource.getName();
            if (mainResources.containsKey(resourceName)) {
                mainResources.get(resourceName).getInjectionTargets().addAll(
                        resource.getInjectionTargets());
            } else {
                // Not defined in main web.xml
                T existingResource = tempResources.get(resourceName);
                if (existingResource != null) {
                    if (!existingResource.equals(resource)) {
                        log.error(sm.getString(
                                ""webXml.mergeConflictResource"",
                                resourceName,
                                fragment.getName(),
                                fragment.getURL()));
                        return false;
                    }
                } else {
                    tempResources.put(resourceName, resource);
                }
            }
        }
        return true;
    }"
8090357,none,"  public T caseNestedTypeTest(NestedTypeTest object)
  {
    return null;
  }"
7811951,none,"  @Override
  public void setIgnoreDepartedMembers(boolean ignore) {
    this.ignoreDepartedMembers = ignore;
    if (ignore) {
      setWaitOnExceptionFlag(true);
    }
  }"
8559249,none,"    private BackupCommand getCommand(String cmdStr) throws IOException {
      switch (cmdStr) {
        case SET_ADD_CMD:
          return BackupCommand.SET_ADD;
        case SET_REMOVE_CMD:
          return BackupCommand.SET_REMOVE;
        case SET_DELETE_CMD:
          return BackupCommand.SET_DELETE;
        case SET_DESCRIBE_CMD:
          return BackupCommand.SET_DESCRIBE;
        case SET_LIST_CMD:
          return BackupCommand.SET_LIST;
        default:
          System.out.println(""ERROR: Unknown command for 'set' :"" + cmdStr);
          printUsage();
          throw new IOException(INCORRECT_USAGE);
      }
    }"
7374308,none,"    public void setAlwaysSavePassword(final boolean alwaysSavePassword) {
        this.alwaysSavePassword = alwaysSavePassword;
    }"
4448520,none,"    @Override
    public void output() {
      if (work.obj != null) {
        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =
                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;

        try {
          byte[] ba = hll.getBytes();
          out.buffer = buffer.reallocIfNeeded(ba.length);
          out.start = 0;
          out.end = ba.length;
          out.buffer.setBytes(0, ba);
          out.isSet = 1;
        } catch (java.io.IOException e) {
          throw new org.apache.drill.common.exceptions.DrillRuntimeException(""Failed to get HyperLogLog output"", e);
        }
      } else {
        out.isSet = 0;
      }
    }"
7824232,none,"  public static DataPolicy fromString(String s) {
    String[] allowedValues =
        new String[] {""EMPTY"", ""NORMAL"", ""REPLICATE"", ""PERSISTENT_REPLICATE"", ""PARTITION"",
            ""PRELOADED"", ""PERSISTENT_PARTITION""};
    int valueIndex = -1;
    for (int i = 0; i < allowedValues.length; i++) {
      if (allowedValues[i].equals(s)) {
        valueIndex = i;
        break;
      }
    }

    if (valueIndex != -1)
      return VALUES[valueIndex];

    return null;
  }"
6165484,none,"  public boolean hasMatchingKey(Node model1, Node model2) {
    return keyProvider.getKey(model1).equals(keyProvider.getKey(model2));
  }"
6904479,none,"    private Object invoke(String methodName, Object returnValueIfNonExistent,
                          Class<?>[] paramTypes, Object[] params)
        throws DocletInvokeException {
            Method meth;
            try {
                meth = docletClass.getMethod(methodName, paramTypes);
            } catch (NoSuchMethodException exc) {
                if (returnValueIfNonExistent == null) {
                    messager.error(Messager.NOPOS, ""main.doclet_method_not_found"",
                                   docletClassName, methodName);
                    throw new DocletInvokeException();
                } else {
                    return returnValueIfNonExistent;
                }
            } catch (SecurityException exc) {
                messager.error(Messager.NOPOS, ""main.doclet_method_not_accessible"",
                               docletClassName, methodName);
                throw new DocletInvokeException();
            }
            if (!Modifier.isStatic(meth.getModifiers())) {
                messager.error(Messager.NOPOS, ""main.doclet_method_must_be_static"",
                               docletClassName, methodName);
                throw new DocletInvokeException();
            }
            ClassLoader savedCCL =
                Thread.currentThread().getContextClassLoader();
            try {
                if (appClassLoader != null) // will be null if doclet class provided via API
                    Thread.currentThread().setContextClassLoader(appClassLoader);
                return meth.invoke(null , params);
            } catch (IllegalArgumentException | NullPointerException exc) {
                messager.error(Messager.NOPOS, ""main.internal_error_exception_thrown"",
                               docletClassName, methodName, exc.toString());
                throw new DocletInvokeException();
            } catch (IllegalAccessException exc) {
                messager.error(Messager.NOPOS, ""main.doclet_method_not_accessible"",
                               docletClassName, methodName);
                throw new DocletInvokeException();
            }
            catch (InvocationTargetException exc) {
                Throwable err = exc.getTargetException();
                if (apiMode)
                    throw new ClientCodeException(err);
                if (err instanceof java.lang.OutOfMemoryError) {
                    messager.error(Messager.NOPOS, ""main.out.of.memory"");
                } else {
                    messager.error(Messager.NOPOS, ""main.exception_thrown"",
                               docletClassName, methodName, exc.toString());
                    exc.getTargetException().printStackTrace(System.err);
                }
                throw new DocletInvokeException();
            } finally {
                Thread.currentThread().setContextClassLoader(savedCCL);
            }
    }"
8314886,none,"		private boolean isChildOfOrEqualToAnyFolder(IResource resource) {
			for (int i= 0; i < fFolders.length; i++) {
				IFolder folder= fFolders[i];
				if (folder.equals(resource) || ParentChecker.isDescendantOf(resource, folder)) {
					return true;
				}
			}
			return false;
		}"
5799553,none,"        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
        {
            // args is null for no-arguments methods
            if (args == null)
            {
                String attributeName = method.getName();

                if (attributes.containsKey(attributeName)) { return attributes.get(attributeName); }
            }

            // TODO: Handling of equals() and hashCode() and toString(), plus other methods
            // inherited from Object

            throw new RuntimeException(String.format(""Annotation proxy for class %s does not handle method %s."",
                    annotationType.getName(), method));
        }"
9131375,none,"	public static final double computeWidth( IDisplayServer xs, Label la )
	{
		final ITextMetrics itm = xs.getTextMetrics( la );
		try
		{
			return computeWidth( itm, la );
		}
		finally
		{
			itm.dispose( );
		}
	}"
9484429,none,"  protected void updateStateAsync() {
    Thread thread = new Thread(new Runnable() {
      @Override
      public void run() {
        updateStateStore();
      }
    }, ""Router Heartbeat Async"");
    thread.setDaemon(true);
    thread.start();
  }"
8421755,none,"    public DefaultServiceDefinition(String id, String name, String host, int port) {
        this(id, name, host, port, Collections.emptyMap(), DEFAULT_SERVICE_HEALTH);
    }"
8579511,none,"  private static int putUint32(PositionedByteRange dst, int val) {
    dst.put((byte) (val >>> 24))
       .put((byte) (val >>> 16))
       .put((byte) (val >>> 8))
       .put((byte) val);
    return 4;
  }"
7172860,none,"    public <TValue> void addIfNotEmpty(String parameterName, List<TValue> values) {
        if (values != null && !values.isEmpty()) {
            put(parameterName, StringUtil.join("","", values)); //$NON-NLS-1$
        }
    }"
8660303,none,"    @Override public void restartNodes(Collection<UUID> ids) throws IgniteException {
        guard();

        try {
            ctx.grid().compute(forNodeIds(ids)).execute(IgniteKillTask.class, true);
        }
        finally {
            unguard();
        }
    }"
8690430,none,"    public static String getUserPasswordDefault() {
        return userPasswordDefault;
    }"
5775855,none,"    @Override
    public List<PlainSchema> findByKeyword(final String keyword) {
        TypedQuery<PlainSchema> query = entityManager().createQuery(
                ""SELECT e FROM "" + JPAPlainSchema.class.getSimpleName() + "" e""
                + "" WHERE e.id LIKE :keyword"", PlainSchema.class);
        query.setParameter(""keyword"", keyword);
        return query.getResultList();
    }"
4405841,none,"    public boolean equals( Object that )
    {
        // Quick test
        if ( this == that )
        {
            return true;
        }

        if ( that instanceof AclAttributeWrapper )
        {
            AclAttributeWrapper thatInstance = (AclAttributeWrapper)that;

            return aclAttribute.getName().equalsIgnoreCase( thatInstance.aclAttribute.getName() ) && 
                   ( aclAttribute.isAttributeType() && thatInstance.aclAttribute.isAttributeType() ||
                     ( ( aclAttribute.isObjectClass() || aclAttribute.isObjectClassNotAllowed() ) && 
                         ( thatInstance.aclAttribute.isObjectClass() || thatInstance.aclAttribute.isObjectClassNotAllowed() ) ) );
        }
        else
        {
            return false;
        }
    }"
5768014,none,"        @Override
        public Iterator<SAML2IdPTO> iterator(final long first, final long count) {
            List<SAML2IdPTO> list = restClient.list();
            Collections.sort(list, comparator);
            return list.subList((int) first, (int) first + (int) count).iterator();
        }"
6970865,none,"  @CanIgnoreReturnValue
  @Override
  public E remove(int index) {
    return delegate().remove(index);
  }"
8226389,none,"	@Override
	public String getDisplayName() {
		return AssignmentsTestLanguageLanguage.INSTANCE.getDisplayName();
	}"
6938240,none,"  public static GphotoId from(Long id) {
    return new GphotoId(id == null ? null : Long.toString(id));
  }"
8560556,none,"  @SuppressWarnings(""unchecked"")
  protected Map<byte[], List<Path>>[] handleBulkLoad(List<TableName> sTableList)
          throws IOException {
    Map<byte[], List<Path>>[] mapForSrc = new Map[sTableList.size()];
    List<String> activeFiles = new ArrayList<>();
    List<String> archiveFiles = new ArrayList<>();
    Pair<Map<TableName, Map<String, Map<String, List<Pair<String, Boolean>>>>>, List<byte[]>> pair =
            backupManager.readBulkloadRows(sTableList);
    Map<TableName, Map<String, Map<String, List<Pair<String, Boolean>>>>> map = pair.getFirst();
    FileSystem tgtFs;
    try {
      tgtFs = FileSystem.get(new URI(backupInfo.getBackupRootDir()), conf);
    } catch (URISyntaxException use) {
      throw new IOException(""Unable to get FileSystem"", use);
    }
    Path rootdir = FSUtils.getRootDir(conf);
    Path tgtRoot = new Path(new Path(backupInfo.getBackupRootDir()), backupId);

    for (Map.Entry<TableName, Map<String, Map<String, List<Pair<String, Boolean>>>>> tblEntry :
      map.entrySet()) {
      TableName srcTable = tblEntry.getKey();

      int srcIdx = getIndex(srcTable, sTableList);
      if (srcIdx < 0) {
        LOG.warn(""Couldn't find "" + srcTable + "" in source table List"");
        continue;
      }
      if (mapForSrc[srcIdx] == null) {
        mapForSrc[srcIdx] = new TreeMap<>(Bytes.BYTES_COMPARATOR);
      }
      Path tblDir = FSUtils.getTableDir(rootdir, srcTable);
      Path tgtTable = new Path(new Path(tgtRoot, srcTable.getNamespaceAsString()),
          srcTable.getQualifierAsString());
      for (Map.Entry<String,Map<String,List<Pair<String, Boolean>>>> regionEntry :
        tblEntry.getValue().entrySet()){
        String regionName = regionEntry.getKey();
        Path regionDir = new Path(tblDir, regionName);
        // map from family to List of hfiles
        for (Map.Entry<String,List<Pair<String, Boolean>>> famEntry :
          regionEntry.getValue().entrySet()) {
          String fam = famEntry.getKey();
          Path famDir = new Path(regionDir, fam);
          List<Path> files;
          if (!mapForSrc[srcIdx].containsKey(Bytes.toBytes(fam))) {
            files = new ArrayList<>();
            mapForSrc[srcIdx].put(Bytes.toBytes(fam), files);
          } else {
            files = mapForSrc[srcIdx].get(Bytes.toBytes(fam));
          }
          Path archiveDir = HFileArchiveUtil.getStoreArchivePath(conf, srcTable, regionName, fam);
          String tblName = srcTable.getQualifierAsString();
          Path tgtFam = new Path(new Path(tgtTable, regionName), fam);
          if (!tgtFs.mkdirs(tgtFam)) {
            throw new IOException(""couldn't create "" + tgtFam);
          }
          for (Pair<String, Boolean> fileWithState : famEntry.getValue()) {
            String file = fileWithState.getFirst();
            int idx = file.lastIndexOf(""/"");
            String filename = file;
            if (idx > 0) {
              filename = file.substring(idx+1);
            }
            Path p = new Path(famDir, filename);
            Path tgt = new Path(tgtFam, filename);
            Path archive = new Path(archiveDir, filename);
            if (fs.exists(p)) {
              if (LOG.isTraceEnabled()) {
                LOG.trace(""found bulk hfile "" + file + "" in "" + famDir + "" for "" + tblName);
              }
              if (LOG.isTraceEnabled()) {
                LOG.trace(""copying "" + p + "" to "" + tgt);
              }
              activeFiles.add(p.toString());
            } else if (fs.exists(archive)){
              LOG.debug(""copying archive "" + archive + "" to "" + tgt);
              archiveFiles.add(archive.toString());
            }
            files.add(tgt);
          }
        }
      }
    }

    copyBulkLoadedFiles(activeFiles, archiveFiles);
    backupManager.deleteBulkLoadedRows(pair.getSecond());
    return mapForSrc;
  }"
4059491,none,"    @Override
    public void saw(T element) {
      long thisElementIndex = nextElementIndex;
      nextElementIndex++;
      if (thisElementIndex == nextIndexToReport) {
        nextIndexToReport = nextElementIndex;
        report(element);
      }
    }"
5444150,none,"	public void setLocale(Locale locale)
	{
	    if (locale != null)
	    {
            responseContext.setLocale(locale);
	        if (canSetLocaleEncoding)
	        {
	            String encoding = getPortletWindow().getPortletDefinition().getApplication().getLocaleEncodingMappings().get(locale);
	            if (encoding != null)
	            {
	                setCharacterEncoding(encoding);
	                // allow repeated setLocale usage for characterEncoding
	                canSetLocaleEncoding = true;
	            }
	        }
	    }
	}"
6186813,none,"  @Override
  public void init(FilterConfig filterConfig) throws ServletException {}"
3799104,none,"    public static void rmpath(String path) {
        LOG.debug(""Removing path "" + path);
        boolean succ = (new File(path)).delete();
        if (!succ) {
            throw new RuntimeException(""Failed to delete "" + path);
        }
    }"
5506218,none,"    private byte[] headerEncode() {
        this.makeCustomHeaderToNet();
        if (SerializeType.ROCKETMQ == serializeTypeCurrentRPC) {
            return RocketMQSerializable.rocketMQProtocolEncode(this);
        } else {
            return RemotingSerializable.encode(this);
        }
    }"
7410586,none,"    @SVMToHotSpot(OnFailure)
    @Override
    public void onFailure(CompilableTruffleAST compilable, String reason, boolean bailout, boolean permanentBailout) {
        JObject hsCompilable = ((HSCompilableTruffleAST) compilable).getHandle();
        JNIEnv env = HotSpotToSVMScope.env();
        JString hsReason = createHSString(env, reason);
        callOnFailure(env, getHandle(), hsCompilable, hsReason, bailout, permanentBailout);
    }"
3877118,none,"  private void verifyRepository(RepositoryRequest request) throws AmbariException {
    URLStreamProvider usp = new URLStreamProvider(REPO_URL_CONNECT_TIMEOUT, REPO_URL_READ_TIMEOUT, null, null, null);
    usp.setSetupTruststoreForHttps(false);

    String repoName = request.getRepoName();
    if (StringUtils.isEmpty(repoName)) {
      throw new IllegalArgumentException(""repo_name is required to verify repository"");
    }

    String errorMessage = null;
    Exception e = null;

    String[] suffixes = configs.getRepoValidationSuffixes(request.getOsType());
    for (String suffix : suffixes) {
      String formatted_suffix = String.format(suffix, repoName);
      String spec = request.getBaseUrl().trim();

      // This logic is to identify if the end of baseurl has a slash ('/') and/or the beginning of suffix String (e.g. ""/repodata/repomd.xml"")
      // has a slash and they can form a good url.
      // e.g. ""http://baseurl.com/"" + ""/repodata/repomd.xml"" becomes ""http://baseurl.com/repodata/repomd.xml"" but not ""http://baseurl.com//repodata/repomd.xml""
      if (spec.charAt(spec.length() - 1) != '/' && formatted_suffix.charAt(0) != '/') {
        spec = spec + ""/"" + formatted_suffix;
      } else if (spec.charAt(spec.length() - 1) == '/' && formatted_suffix.charAt(0) == '/') {
        spec = spec + formatted_suffix.substring(1);
      } else {
        spec = spec + formatted_suffix;
      }

      // if spec contains ""file://"" then check local file system.
      final String FILE_SCHEME = ""file://"";
      if(spec.toLowerCase().startsWith(FILE_SCHEME)){
        String filePath = spec.substring(FILE_SCHEME.length());
        File f = new File(filePath);
        if(!f.exists()){
          errorMessage = ""Could not access base url . "" + spec + "" . "";
          e = new FileNotFoundException(errorMessage);
          break;
        }

      }else{
        try {
          IOUtils.readLines(usp.readFrom(spec));
        } catch (IOException ioe) {
          e = ioe;
          errorMessage = ""Could not access base url . "" + request.getBaseUrl() + "" . "";
          if (LOG.isDebugEnabled()) {
            errorMessage += ioe;
          } else {
            errorMessage += ioe.getMessage();
          }
          break;
        }
      }
    }

    if (e != null) {
      LOG.error(errorMessage);
      throw new IllegalArgumentException(errorMessage, e);
    }
  }"
7138422,none,"  public OptionsRequest(Map<String, String> headers,
                        List<HttpCookie> cookies,
                        Map<String, Object> queryParams,
                        Map<String, Class<?>> queryParamClasses,
                        ResourceSpec resourceSpec,
                        String baseUriTemplate,
                        Map<String, Object> pathKeys,
                        RestliRequestOptions requestOptions)
  {
    super(ResourceMethod.OPTIONS,
          null,
          headers,
          cookies,
          new OptionsResponseDecoder(),
          resourceSpec,
          queryParams,
          queryParamClasses,
          null,
          baseUriTemplate,
          pathKeys,
          requestOptions,
          null);
  }"
3851209,none,"  private ResourceInstance createConfigResource() {
    Map<Resource.Type, String> mapIds = new HashMap<>();
    mapIds.put(Resource.Type.RootService, RootService.AMBARI.name());
    mapIds.put(Resource.Type.RootServiceComponent, RootComponent.AMBARI_SERVER.name());

    return createResource(Resource.Type.RootServiceComponentConfiguration, mapIds);
  }"
8636644,none,"    public static String shortenDbName(String dbName, int desiredLength) {
        StringBuilder dbBuf = new StringBuilder(dbName);
        if (dbBuf.length() > desiredLength) {
            // remove one vowel at a time, starting at beginning
            for (int i = dbBuf.length() - 1; i > 0; i--) {
                // don't remove vowels that are at the beginning of the string (taken care of by the i > 0) or right after an underscore
                if (dbBuf.charAt(i - 1) == '_') {
                    continue;
                }

                char curChar = dbBuf.charAt(i);
                if (vowelBag.indexOf(curChar) > 0) {
                    dbBuf.deleteCharAt(i);
                }
            }
        }

        // remove all double underscores
        while (dbBuf.indexOf(""__"") > 0) {
            dbBuf.deleteCharAt(dbBuf.indexOf(""__""));
        }

        while (dbBuf.length() > desiredLength) {
            boolean removedChars = false;

            int usIndex = dbBuf.lastIndexOf(""_"");
            while (usIndex > 0 && dbBuf.length() > desiredLength) {
                // if this is the first word in the group, don't pull letters off unless it is 4 letters or more
                int prevUsIndex = dbBuf.lastIndexOf(""_"", usIndex - 1);
                if (prevUsIndex < 0 && usIndex < 4) {
                    break;
                }

                // don't remove characters to reduce the size two less than three characters between underscores
                if (prevUsIndex >= 0 && (usIndex - prevUsIndex) <= 4) {
                    usIndex = prevUsIndex;
                    continue;
                }

                // delete the second to last character instead of the last, better chance of being unique
                dbBuf.deleteCharAt(usIndex - 2);
                removedChars = true;
                if (usIndex > 2) {
                    usIndex = dbBuf.lastIndexOf(""_"", usIndex - 2);
                } else {
                    break;
                }
            }

            // now delete the char at the end of the string if necessary
            if (dbBuf.length() > desiredLength) {
                int removeIndex = dbBuf.length() - 1;
                int prevRemoveIndex = dbBuf.lastIndexOf(""_"", removeIndex - 1);
                // don't remove characters to reduce the size two less than two characters between underscores
                if (prevRemoveIndex < 0 || (removeIndex - prevRemoveIndex) >= 3) {
                    // delete the second to last character instead of the last, better chance of being unique
                    dbBuf.deleteCharAt(removeIndex - 1);
                    removedChars = true;
                }
            }

            // remove all double underscores
            while (dbBuf.indexOf(""__"") > 0) {
                dbBuf.deleteCharAt(dbBuf.indexOf(""__""));
                removedChars = true;
            }

            // if we didn't remove anything break out to avoid an infinite loop
            if (!removedChars) {
                break;
            }
        }

        // remove all double underscores
        while (dbBuf.indexOf(""__"") > 0) {
            dbBuf.deleteCharAt(dbBuf.indexOf(""__""));
        }

        while (dbBuf.length() > desiredLength) {
            // still not short enough, get more aggressive
            // don't remove the first segment, just remove the second over and over until we are short enough
            int firstUs = dbBuf.indexOf(""_"");
            if (firstUs > 0) {
                int nextUs = dbBuf.indexOf(""_"", firstUs + 1);
                if (nextUs > 0) {
                    //Debug.logInfo(""couldn't shorten enough normally, removing second segment from "" + dbBuf, module);
                    dbBuf.delete(firstUs, nextUs);
                }
            }
        }

        //Debug.logInfo(""Shortened "" + dbName + "" to "" + dbBuf.toString(), module);
        return dbBuf.toString();
    }"
4372641,none,"    public void clientCreated(Client client) {
        for (ClientLifeCycleListener listener : listeners) {
            listener.clientCreated(client);
        }
    }"
7284688,none,"	private void save(ObjectOutputStream out) throws IOException {
		out.writeInt(maxSize);
		out.writeInt(size());
		for (Entry entry : history) {
			out.writeObject(entry);
		}
	}"
4455712,none,"  @SuppressWarnings(""unused"")
  public void setTimestamp(String field, String value) {
    if (value != null) {
      //Convert the date string into a long
      long ts = 0;
      try {
        Date d = this.dateFormatter.parse(value);
        ts = d.getTime();
      } catch (Exception e) {
        //If the date formatter does not successfully create a date, the timestamp will fall back to zero
        //Do not throw exception
      }
      final TimeStampWriter tw = times.get(field);
      if (tw != null) {
        LOG.trace(""Parsed field: {}, as time: {}"", field, value);
        tw.writeTimeStamp(ts);
      } else {
        LOG.warn(""No 'timestamp' writer found for field: {}"", field);
      }
    }
  }"
5485720,none,"    @Override
    public String getTrustedCaDb()
    {
        return _trustedCaDb;
    }"
6010673,none,"    @Override
    @Value.Derived
    public Stacks stacks() {
        return new ReactorStacks(getConnectionContext(), getRootV2(), getTokenProvider());
    }"
5800930,none,"  @Override
  public int getSize() {
    return size;
  }"
7787982,none,"	public static Behavior findBehavior(Component component, Class<? extends Behavior> behaviorClass)
	{
		for (Behavior behavior : component.getBehaviors(behaviorClass))
		{
			return behavior;
		}
		return null;
	}"
9249980,none,"    @Override
    public int hashCode() {
        return isPresent ? Double.hashCode(value) : 0;
    }"
7586356,none,"	private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue) {
		if (returnValue != null) {
			return ClassUtils.isAssignableValue(type, returnValue);
		}
		else if (Object.class == type && void.class == method.getReturnType()) {
			return true;
		}
		else {
			return ClassUtils.isAssignable(type, method.getReturnType());
		}
	}"
6300889,none,"    protected void copyHeaders(WebSocketFrame copy)
    {
        finRsvOp = copy.finRsvOp;
        masked = copy.masked;
        mask = null;
        if (copy.mask != null)
            mask = Arrays.copyOf(copy.mask, copy.mask.length);
    }"
9127199,none,"	public EReference getRadarSeries_LineAttributes() {
		return (EReference) radarSeriesEClass.getEStructuralFeatures().get(1);
	}"
7542297,none,"	public CurrentLiveVersion(ReloadableType reloadableType, String versionstamp, byte[] newbytedata) {
		if (GlobalConfiguration.logging && log.isLoggable(Level.FINER)) {
			log.entering(""CurrentLiveVersion"", ""<init>"", "" new version of "" + reloadableType.getName()
					+ "" loaded, version stamp '""
					+ versionstamp + ""'"");
		}
		this.reloadableType = reloadableType;
		this.typeDescriptor = reloadableType.getTypeRegistry().getExtractor().extract(newbytedata, true);
		this.versionstamp = versionstamp;

		if (GlobalConfiguration.assertsMode) {
			if (!this.typeDescriptor.getName().equals(reloadableType.typedescriptor.getName())) {
				throw new IllegalStateException(""New version has wrong name.  Expected ""
						+ reloadableType.typedescriptor.getName()
						+ "" but was "" + typeDescriptor.getName());
			}
		}

		newbytedata = GlobalConfiguration.callsideRewritingOn ? MethodInvokerRewriter.rewrite(
				reloadableType.typeRegistry,
				newbytedata) : newbytedata;

		this.incrementalTypeDescriptor = new IncrementalTypeDescriptor(reloadableType.typedescriptor);
		this.incrementalTypeDescriptor.setLatestTypeDescriptor(this.typeDescriptor);

		// Executors for interfaces simply hold annotations
		this.executor = reloadableType.getTypeRegistry().executorBuilder.createFor(reloadableType, versionstamp,
				typeDescriptor,
				newbytedata);

		if (GlobalConfiguration.classesToDump != null
				&& GlobalConfiguration.classesToDump.contains(reloadableType.getSlashedName())) {
			Utils.dump(Utils.getExecutorName(reloadableType.getName(), versionstamp).replace('.', '/'), this.executor);
		}
		// DEFAULT METHODS - REMOVE THE IF
		if (!typeDescriptor.isInterface()) {
			this.dispatcherName = Utils.getDispatcherName(reloadableType.getName(), versionstamp);
			this.executorName = Utils.getExecutorName(reloadableType.getName(), versionstamp);
			this.dispatcher = DispatcherBuilder.createFor(reloadableType, incrementalTypeDescriptor, versionstamp);
		}
		reloadableType.typeRegistry.checkChildClassLoader(reloadableType);
		define();
	}"
4578782,none,"        public long outputCrossReferenceObject(OutputStream stream,
                TrailerDictionary trailerDictionary, int first, int last, int size) throws IOException {
            // Outputting the object streams should not have created new indirect objects
            assert objects.isEmpty();
            new CrossReferenceStream(PDFDocument.this, ++objectcount, trailerDictionary, position,
                    indirectObjectOffsets,
                    structureTreeObjectStreams.getCompressedObjectReferences())
                    .output(stream);
            return position;
        }"
6287167,none,"    @Deprecated
    public void setExecutor(Executor executor)
    {
        this.httpClient.setExecutor(executor);
    }"
8547408,none,"    public void setDomainId(Long domainId) {
        this.domainId = domainId;
    }"
3931329,none,"  public static ServersShuttingDown getServersShuttingDown() {
    ServersShuttingDown servers = new ServersShuttingDown();
    // Add new servers to the list
    for (String server : Monitor.getMmi().serversShuttingDown) {
      servers.addServerShuttingDown(new ServerShuttingDownInformation(server));
    }
    return servers;
  }"
9140119,none,"	public void addElementEvent( DesignElementHandle focus, NotificationEvent ev )
	{
		ModelEventInfo event = new ModelEventInfo( focus, ev );
		eventList.add( event );
	}"
3809437,none,"   @Override
   public int readInt() throws JMSException {
      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {
         ActiveMQRALogger.LOGGER.trace(""readInt()"");
      }

      return ((BytesMessage) message).readInt();
   }"
7538101,none,"    @Override
	public <T> List<T> search(Name base, String filter, int searchScope, ContextMapper<T> mapper) {
		return search(base, filter, searchScope, ALL_ATTRIBUTES, mapper);
	}"
7739565,none,"    @Override
    public void unexport() {
        super.unexport();
        exporterMap.remove(key);
    }"
7959714,none,"	public boolean operator_equals(final TitanOctetString_Element otherValue) {
		must_bound(""Unbound left operand of octetstring element comparison."");
		otherValue.must_bound(""Unbound right operand of octetstring comparison."");

		return str_val.get_nibble(nibble_pos) == otherValue.str_val.get_nibble(otherValue.nibble_pos);
	}"
5102180,none,"    @Override
    protected CloseableIteration<? extends BindingSet, QueryEvaluationException> evaluateInternal(TupleExpr tupleExpr, Dataset dataset, BindingSet bindings, boolean includeInferred) throws SailException {
        // Clone the tuple expression to allow for more aggressive optimizations
        tupleExpr = tupleExpr.clone();

        if (!(tupleExpr instanceof QueryRoot)) {
            // Add a dummy root node to the tuple expressions to allow the
            // optimizers to modify the actual root node
            tupleExpr = new QueryRoot(tupleExpr);
        }

        try {
            KiWiTripleSource tripleSource = new KiWiTripleSource(this,includeInferred);
            EvaluationStrategy strategy = new EvaluationStrategyImpl(tripleSource, dataset);

            new BindingAssigner().optimize(tupleExpr, dataset, bindings);
            new ConstantOptimizer(strategy).optimize(tupleExpr, dataset, bindings);
            new CompareOptimizer().optimize(tupleExpr, dataset, bindings);
            new ConjunctiveConstraintSplitter().optimize(tupleExpr, dataset, bindings);
            new DisjunctiveConstraintOptimizer().optimize(tupleExpr, dataset, bindings);
            new SameTermFilterOptimizer().optimize(tupleExpr, dataset, bindings);
            new QueryModelNormalizer().optimize(tupleExpr, dataset, bindings);
            new QueryJoinOptimizer(new KiWiEvaluationStatistics()).optimize(tupleExpr, dataset, bindings);
            new IterativeEvaluationOptimizer().optimize(tupleExpr, dataset, bindings);
            new FilterOptimizer().optimize(tupleExpr, dataset, bindings);
            new OrderLimitOptimizer().optimize(tupleExpr, dataset, bindings);

            return strategy.evaluate(tupleExpr, EmptyBindingSet.getInstance());

        } catch (QueryEvaluationException e) {
            throw new SailException(e);
        }
    }"
6493734,none,"	public String addVariableOnClasspath(String name, String value, boolean overwriteIfExists) {
		log.info(""Adding variable on Classpath: "" + name + ""="" + value);
		activateLibrariesTab();
		getLibraryTree().getItem(""Classpath"").select();
		return addVariableShared(name, value, overwriteIfExists);
	}"
7186496,none,"        public Builder invocationCallback(
                com.oracle.bmc.util.internal.Consumer<javax.ws.rs.client.Invocation.Builder>
                        invocationCallback) {
            this.invocationCallback = invocationCallback;
            return this;
        }"
9008466,none,"    @Override
    public Option[] getOptions() {
      return new Option[] {
          OptionBuilder
              .withArgName(""HOST"")
              .hasArg()
              .isRequired(false)
              .withDescription(""Address of the Zookeeper ensemble; defaults to: ""+ZK_HOST)
              .create(""zkHost""),
          OptionBuilder
              .withArgName(""CONFIG"")
              .hasArg()
              .isRequired(false)
              .withDescription(""Autoscaling config file, defaults to the one deployed in the cluster."")
              .withLongOpt(""config"")
              .create(""a""),
          OptionBuilder
              .withDescription(""Show calculated suggestions"")
              .withLongOpt(""suggestions"")
              .create(""s""),
          OptionBuilder
              .withDescription(""Show ClusterState (collections layout)"")
              .withLongOpt(""clusterState"")
              .create(""c""),
          OptionBuilder
              .withDescription(""Show calculated diagnostics"")
              .withLongOpt(""diagnostics"")
              .create(""d""),
          OptionBuilder
              .withDescription(""Show sorted nodes with diagnostics"")
              .withLongOpt(""sortedNodes"")
              .create(""n""),
          OptionBuilder
              .withDescription(""Redact node and collection names (original names will be consistently randomized)"")
              .withLongOpt(""redact"")
              .create(""r""),
          OptionBuilder
              .withDescription(""Show summarized collection & node statistics."")
              .create(""stats""),
          OptionBuilder
              .withDescription(""Turn on all options to get all available information."")
              .create(""all"")

      };
    }"
8052959,none,"		@Override
		public IScope getScope(EObject context, EReference reference) {
			if (reference == SequencertestPackage.Literals.NULL_CROSS_REF__REF)
				return new AbstractScope(IScope.NULLSCOPE, false) {

					@Override
					public Iterable<IEObjectDescription> getElements(EObject object) {
						return Collections.singletonList(getSingleElement(object));
					}

					@Override
					public IEObjectDescription getSingleElement(EObject object) {
						return EObjectDescription.create(""null"", null);
					}

					@Override
					protected Iterable<IEObjectDescription> getAllLocalElements() {
						throw new UnsupportedOperationException();
					}
				};
			return super.getScope(context, reference);
		}"
5836088,none,"    private String getUnquoted() {
        while (i < size) {
            parseLiteral();
            parseEL();
        }
        return result.toString();
    }"
5585565,none,"    public void testGetColumnWidthString() throws IOException {
        Workbook wb = new HSSFWorkbook();
        Sheet sheet = wb.createSheet(""sheet"");
        Row row = sheet.createRow(0);
        sheet.createRow(1);
        sheet.createRow(2);
        Cell cell = row.createCell(0);
        
        cell.setCellValue(""sometext"");
        
        assertTrue(""Having some width for rows with actual cells"", 
                SheetUtil.getColumnWidth(sheet, 0, true) > 0);
        assertEquals(""Not having any widht for rows with all empty cells"", 
                -1.0, SheetUtil.getColumnWidth(sheet, 0, true, 1, 2));
        
        wb.close();
    }"
3762849,none,"    public IdList(final List<String> member) {
        this.member = member;
    }"
7356682,none,"    @Override
    public NegotiateState initialize() throws NegotiateException {
        throw new RuntimeException(MESSAGE);
    }"
6994091,none,"  @Override
  protected String pendingToString() {
    ListenableFuture<? extends V> localInputFuture = delegateRef;
    ScheduledFuture<?> localTimer = timer;
    if (localInputFuture != null) {
      String message = ""inputFuture=["" + localInputFuture + ""]"";
      if (localTimer != null) {
        final long delay = localTimer.getDelay(TimeUnit.MILLISECONDS);
        // Negative delays look confusing in an error message
        if (delay > 0) {
          message += "", remaining delay=["" + delay + "" ms]"";
        }
      }
      return message;
    }
    return null;
  }"
9230800,none,"    void commandLoop() {
        try {
            while (processCommand()) {
                // condition is loop action
            }
        } catch (IOException ex) {
            // drop out of loop
        }
    }"
4486552,none,"    private String getMetaDataValue(MetaDataHit mdh) throws FilterException
    {
        for (int i = 0; i < iv_metaFieldNames.length; i++)
        {
            String mdVal = mdh.getMetaFieldValue(iv_metaFieldNames[i]);
            if (mdVal != null)
            {
                return mdVal;
            }
        }
        throw new FilterException(
            new Exception(""Unable to extract meta data from MetaDataHit object.""));
    }"
9238213,none,"        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final AnnotationDescription other = (AnnotationDescription) obj;
            if (!Objects.equals(this.annotationType, other.annotationType)) {
                return false;
            }
            if (!Objects.equals(this.values, other.values)) {
                return false;
            }
            return true;
        }"
5919914,none,"    private static final int twoDigit(CharSequence str, int index)
    {
        char ch1 = str.charAt(index);
        char ch2 = str.charAt(index + 1);
        if (!isDigit(ch1) || !isDigit(ch2))
            return 100; // not two digits
        return digitVal(ch1) * 10 + digitVal(ch2);
    }"
3913986,none,"      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }"
9201031,none,"	private Key[] getKeys( )
	{
		Key[] keys = new Key[]{
			PREF_RESOURCE
		};
		return keys;
	}"
7117242,none,"    public UnicodeSet(int... pairs) {
        if ((pairs.length & 1) != 0) {
            throw new IllegalArgumentException(""Must have even number of integers"");
        }
        list = new int[pairs.length + 1]; // don't allocate extra space, because it is likely that this is a fixed set.
        len = list.length;
        int last = -1; // used to ensure that the results are monotonically increasing.
        int i = 0;
        while (i < pairs.length) {
            // start of pair
            int start = pairs[i];
            if (last >= start) {
                throw new IllegalArgumentException(""Must be monotonically increasing."");
            }
            list[i++] = last = start;
            // end of pair
            int end = pairs[i] + 1;
            if (last >= end) {
                throw new IllegalArgumentException(""Must be monotonically increasing."");
            }
            list[i++] = last = end;
        }
        list[i] = HIGH; // terminate
    }"
8828539,none,"    public getAllGateways_args(
      org.apache.airavata.model.security.AuthzToken authzToken)
    {
      this();
      this.authzToken = authzToken;
    }"
6846111,none,"	@Override
	public void beginTask(String name, int totalWork) {
		monitor.beginTask(name, totalWork);
		fireMsgString(name);
	}"
8334754,none,"	public boolean equals(Object other) {
		if (!(other instanceof ThrowsPattern)) {
			return false;
		}
		ThrowsPattern o = (ThrowsPattern) other;
		boolean ret = o.required.equals(this.required) && o.forbidden.equals(this.forbidden);
		return ret;
	}"
9426716,none,"    public void set(Object obj, Object value)
        throws IllegalArgumentException, IllegalAccessException
    {
        ensureObj(obj);
        if (isFinal) {
            throwFinalFieldIllegalAccessException(value);
        }
        if (value == null) {
            throwSetIllegalArgumentException(value);
        }
        if (value instanceof Byte) {
            unsafe.putInt(obj, fieldOffset, ((Byte) value).byteValue());
            return;
        }
        if (value instanceof Short) {
            unsafe.putInt(obj, fieldOffset, ((Short) value).shortValue());
            return;
        }
        if (value instanceof Character) {
            unsafe.putInt(obj, fieldOffset, ((Character) value).charValue());
            return;
        }
        if (value instanceof Integer) {
            unsafe.putInt(obj, fieldOffset, ((Integer) value).intValue());
            return;
        }
        throwSetIllegalArgumentException(value);
    }"
7360627,none,"	@Override
	public ReactiveCassandraBatchOperations delete(Iterable<?> entities, WriteOptions options) {

		assertNotExecuted();

		Assert.notNull(entities, ""Entities must not be null"");
		Assert.notNull(options, ""WriteOptions must not be null"");

		this.batchMonos.add(Mono.just(doDelete(entities, options)));

		return this;
	}"
8025832,none,		@Override public ParserRule getRule() { return rule; }
7374084,none,"    public ProjectCloseListener(final ProjectRepositoryManager projectManager) {
        Check.notNull(projectManager, ""projectManager""); //$NON-NLS-1$

        this.projectManager = projectManager;
    }"
7205803,none,"    private boolean canRetryRequestIfRefreshableAuthTokenUsed(com.oracle.bmc.model.BmcException e) {
        if (e.getStatusCode() == 401
                && this.authenticationDetailsProvider
                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            ((com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                            this.authenticationDetailsProvider)
                    .refresh();
            return true;
        }
        return false;
    }"
8657644,none,"    @Override public void writeExternal(ObjectOutput out) throws IOException {
        jobId.writeExternal(out);
        out.writeLong(msgId);
        out.writeInt(reducer);
        out.writeInt(off);
        U.writeByteArray(out, buf);
    }"
6962878,none,"  @Override
  public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit)
      throws ExecutionException {
    checkNotNull(callable);
    checkNotNull(timeoutUnit);
    try {
      return callable.call();
    } catch (RuntimeException e) {
      throw new UncheckedExecutionException(e);
    } catch (Exception e) {
      throw new ExecutionException(e);
    } catch (Error e) {
      throw new ExecutionError(e);
    } catch (Throwable e) {
      // It's a non-Error, non-Exception Throwable. Such classes are usually intended to extend
      // Exception, so we'll treat it like an Exception.
      throw new ExecutionException(e);
    }
  }"
6899793,none,"    @Override @DefinedBy(Api.COMPILER)
    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
        CharBuffer cb = fileManager.getCachedContent(this);
        if (cb == null) {
            try (InputStream in = openInputStream()) {
                ByteBuffer bb = fileManager.makeByteBuffer(in);
                JavaFileObject prev = fileManager.log.useSource(this);
                try {
                    cb = fileManager.decode(bb, ignoreEncodingErrors);
                } finally {
                    fileManager.log.useSource(prev);
                }
                fileManager.recycleByteBuffer(bb);
                if (!ignoreEncodingErrors) {
                    fileManager.cache(this, cb);
                }
            }
        }
        return cb;
    }"
6315350,none,"    protected void modified(final Map<String, Object> properties) throws Exception {
        logger.debug(""Updating properties: {}"", properties);
        try {
            if (isRestartNeeded(properties)) {
                logger.info(""Need restart"");
                stop();
                start(properties);
            }

            // apply current routes

            applyRoutes(properties);
        } catch (Exception e) {
            logger.warn(""Problem updating component"", e);
            throw e;
        }
    }"
7026916,none,"  public Transmission(String connectionId, SocketChannel socketChannel, SelectionKey key, Time time,
      NetworkMetrics metrics) {
    this.connectionId = connectionId;
    this.socketChannel = socketChannel;
    this.key = key;
    this.time = time;
    this.metrics = metrics;
  }"
5389735,none,"    public static boolean isParent(final ClassLoader supposedParent, final ClassLoader supposedChild) {
        ClassLoader parent = supposedChild;
        while (parent != null) {
            if (parent == supposedParent) {
                return true;
            }
            parent = parent.getParent();
        }

        return false;
    }"
5476959,none,"    @Override
    public final String getType()
    {
        return ConfiguredObjectTypeRegistry.getType(_clazz);
    }"
8576209,none,"    public getNamespaceDescriptor_args() {
    }"
4600851,none,"    @Override
    public void postSuperstep() { }"
4689128,none,"  private void removeTaskFromJob(BSPJobID jobId, TaskInProgress tip) {
    synchronized (runningJobs) {
      RunningJob rjob = runningJobs.get(jobId);
      if (rjob == null) {
        LOG.warn(""Unknown job "" + jobId + "" being deleted."");
      } else {
        synchronized (rjob) {
          rjob.tasks.remove(tip);
        }
      }
    }
  }"
9000671,none,"  OrdsSegmentTermsEnumFrame pushFrame(FST.Arc<Output> arc, long fp, int length, long termOrd) throws IOException {
    final OrdsSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);
    f.arc = arc;
    // System.out.println(""pushFrame termOrd= "" + termOrd + "" fpOrig="" + f.fpOrig + "" fp="" + fp + "" nextEnt="" + f.nextEnt);
    if (f.fpOrig == fp && f.nextEnt != -1) {
      //if (DEBUG) System.out.println(""      push reused frame ord="" + f.ord + "" fp="" + f.fp + "" isFloor?="" + f.isFloor + "" hasTerms="" + f.hasTerms + "" pref="" + term + "" nextEnt="" + f.nextEnt + "" targetBeforeCurrentLength="" + targetBeforeCurrentLength + "" term.length="" + term.length + "" vs prefix="" + f.prefix);
      if (f.prefix > targetBeforeCurrentLength) {
        // System.out.println(""        do rewind!"");
        f.rewind();
      } else {
        // if (DEBUG) {
        // System.out.println(""        skip rewind!"");
        // }
      }
      assert length == f.prefix;
      assert termOrd == f.termOrdOrig;
    } else {
      f.nextEnt = -1;
      f.prefix = length;
      f.state.termBlockOrd = 0;
      f.termOrdOrig = termOrd;
      // System.out.println(""set termOrdOrig="" + termOrd);
      f.termOrd = termOrd;
      f.fpOrig = f.fp = fp;
      f.lastSubFP = -1;
      // if (DEBUG) {
      //   final int sav = term.length;
      //   term.length = length;
      //   System.out.println(""      push new frame ord="" + f.ord + "" fp="" + f.fp + "" hasTerms="" + f.hasTerms + "" isFloor="" + f.isFloor + "" pref="" + brToString(term));
      //   term.length = sav;
      // }
    }

    return f;
  }"
4258444,none,"    public FTPFile[] mlistDir(String pathname, FTPFileFilter filter) throws IOException
    {
        FTPListParseEngine engine = initiateMListParsing( pathname);
        return engine.getFiles(filter);
    }"
4739090,none,"    @Nonnull
    public static double[] set(@Nonnull double[] src, final int index, final double value) {
        if (index >= src.length) {
            src = Arrays.copyOf(src, src.length * 2);
        }
        src[index] = value;
        return src;
    }"
4322497,none,"	public Connection getConnection() {
		Connection conn = null;
		String jdbcurl = """";
		try {
			NsTest.logger.println(getThread_id()
					+ "" is getting a connection to the database..."");

			if (NsTest.embeddedMode) {
				jdbcurl = NsTest.embedDbURL + "";"" + NsTest.bootPwd;
			} else {
				if (NsTest.driver_type.equalsIgnoreCase(""DerbyClient""))
					jdbcurl = NsTest.clientDbURL + "";"" + NsTest.bootPwd;

			}
			NsTest.logger.println(""-->Thread "" + getThread_id()
					+ "" starting with url "" + jdbcurl + "" <--"");
			conn = DriverManager.getConnection(jdbcurl, NsTest.prop);
		} catch (Exception e) {
            e.printStackTrace( NsTest.logger );
			NsTest.logger.println(""FAIL: "" + getThread_id()
					+ "" could not get the database connection"");
			printException(""Failed getting database connection using ""
					+ jdbcurl, e);
		}
		// for statistical purposes, add one to the num of connections makde
		NsTest.addStats(NsTest.CONNECTIONS_MADE, 1);
		NsTest.logger.println(""Connection number: "" + NsTest.numConnections);
		return conn; // null if there was a problem, else a valid connection
	}"
4110816,none,"        @Override
        public Boolean handleAddCatalogItem(Object catalogItemBeingAdded) {
            return isEntitledToAddCatalogItem(context, catalogItemBeingAdded);
        }"
4671530,none,"		@Nonnull
		@Override
		public TypeSerializerSchemaCompatibility<T> setPreviousSerializerSnapshotForRestoredState(
				TypeSerializerSnapshot<T> previousSerializerSnapshot) {
			throw new UnsupportedOperationException(""The snapshot of the state's previous serializer has already been set; cannot reset."");
		}"
5508642,none,"    @Override
    public String toString() {
        return ""OffsetMovedEvent [consumerGroup="" + consumerGroup + "", messageQueue="" + messageQueue
            + "", offsetRequest="" + offsetRequest + "", offsetNew="" + offsetNew + ""]"";
    }"
5102890,none,"    protected Item parseItem(Element rssRoot, Element eItem) {
        Item item = super.parseItem(rssRoot,eItem);
        Element e = eItem.getChild(""description"", getRSSNamespace());
        if (e!=null) {
            item.setDescription(parseItemDescription(rssRoot,e));
        }
        Element ce = eItem.getChild(""encoded"", getContentNamespace());
        if (ce != null) {
            Content content = new Content();
            content.setType(Content.HTML);
            content.setValue(ce.getText());
            item.setContent(content);
        }
        return item;
    }"
7356984,none,"    private String formatQueryString(final String projectUri, final String[] args) {
        final StringBuffer result = new StringBuffer();

        if (projectUri != null) {
            if (isCompatibleMode) {
                result.append(""puri=""); //$NON-NLS-1$
                result.append(URLEncode.encode(projectUri.toString()));
            } else {
                final ArtifactID artifactID = new ArtifactID(projectUri);
                result.append(""pguid=""); //$NON-NLS-1$
                result.append(URLEncode.encode(artifactID.getToolSpecificID()));
            }
        } else if (!isCompatibleMode) {
            result.append(""pcguid=""); //$NON-NLS-1$
            result.append(URLEncode.encode(collectionId.toString()));
        }

        for (int i = 0; i < args.length - 1; i += 2) {
            final String name = args[i];
            final String value = args[i + 1];

            if (name != null) {
                if (result.length() > 0) {
                    result.append('&');
                }

                result.append(URLEncode.encode(name));
            }

            if (value != null) {
                if (name != null) {
                    result.append('=');
                } else if (result.length() > 0) {
                    result.append('&');
                }

                result.append(URLEncode.encode(value));
            }
        }

        return result.toString();
    }"
7093536,none,"        private void siftUp(int k, RunnableScheduledFuture<?> key) {
            while (k > 0) {
                int parent = (k - 1) >>> 1;
                RunnableScheduledFuture<?> e = queue[parent];
                if (key.compareTo(e) >= 0)
                    break;
                queue[k] = e;
                setIndex(e, k);
                k = parent;
            }
            queue[k] = key;
            setIndex(key, k);
        }"
5780746,none,"  @Private
  public static <T> T createClazzInstance(String className) throws TezReflectionException {
    Class<?> clazz = getClazz(className);
    @SuppressWarnings(""unchecked"")
    T instance = (T) getNewInstance(clazz);
    return instance;
  }"
3824920,none,"   @Override
   public void reset() {
      RepeatableIteratorWrapper<E> changedIterator = this.changedIterator;
      if (changedIterator != null) {
         currentIterator = changedIterator;
         changedIteratorFieldUpdater.compareAndSet(this, changedIterator, null);
      }
      currentIterator.reset();
   }"
3818939,none,"   public InMemoryDirectoryServiceFactory() {
      try {
         directoryService = new DefaultDirectoryService();
      } catch (Exception e) {
         throw new RuntimeException(e);
      }
      directoryService.setShutdownHookEnabled(false);
      partitionFactory = new AvlPartitionFactory();
   }"
6060474,none,"    @Override
    public void main(List<JCCompilationUnit> trees) {
        // complete the javac AST with a completed ceylon model
        timer.startTask(""prepareForTypeChecking"");
        prepareForTypeChecking(trees);
        timer.endTask();
        List<JCCompilationUnit> javaTrees = List.nil();
        List<JCCompilationUnit> ceylonTrees = List.nil();
        // split them in two sets: java and ceylon
        for(JCCompilationUnit tree : trees){
            if(tree instanceof CeylonCompilationUnit)
                ceylonTrees = ceylonTrees.prepend(tree);
            else
                javaTrees = javaTrees.prepend(tree);
        }
        timer.startTask(""Enter on Java trees"");
        boolean needsModelReset = isBootstrap;
        // enter java trees first to set up their ClassSymbol objects for ceylon trees to use during type-checking
        if(!javaTrees.isEmpty()){
            setupImportedPackagesForJavaTrees(javaTrees);
            hasJavaAndCeylonSources = true;
            needsModelReset = true;
        }
        // this is false if we're in an APT round where we did not generate the trees
        if(!compiler.isAddModuleTrees()){
            setupImportedPackagesForJavaTrees(ceylonTrees);
        }
        if(isBootstrap || hasJavaAndCeylonSources){
            super.main(trees);
        }
        // now we can type-check the Ceylon code
        List<JCCompilationUnit> packageInfo = completeCeylonTrees(trees);
        trees = trees.prependList(packageInfo);
        ceylonTrees = ceylonTrees.prependList(packageInfo);
        
        if(compiler.isHadRunTwiceException()){
            needsModelReset = true;
        }
        if(needsModelReset){
            // bootstrapping the language module is a bit more complex
            resetAndRunEnterAgain(trees);
        }else{
            timer.startTask(""Enter on Ceylon trees"");
            // and complete their new trees
            try {
                sourceLanguage.push(Language.CEYLON);
                super.main(ceylonTrees);
            } finally {
                sourceLanguage.pop();
            }
            timer.endTask();
        }
    }"
7209681,none,"  public Step deleteJobAsync(
      String name,
      String namespace,
      V1DeleteOptions deleteOptions,
      ResponseStep<V1Status> responseStep) {
    return createRequestAsync(
        responseStep, new RequestParams(""deleteJob"", namespace, name, deleteOptions), DELETE_JOB);
  }"
7454233,none,"    private static OptionClass getOptionClass(OptionDescriptor descriptor) {
        if (descriptor.getOptionKey() instanceof RuntimeOptionKey) {
            return OptionClass.VM;
        }
        return OptionClass.Compiler;
    }"
8963823,none,"    @Override
    public AggregateCall other(RelDataTypeFactory typeFactory, AggregateCall e) {
      return AggregateCall.create(
          new HiveSqlCountAggFunction(isDistinct, returnTypeInference, operandTypeInference, operandTypeChecker),
          false, ImmutableIntList.of(), -1,
          typeFactory.createTypeWithNullability(typeFactory.createSqlType(SqlTypeName.BIGINT), true), ""count"");
    }"
4276865,none,"    private T getPointFromLargestNumberCluster(final Collection<? extends Cluster<T>> clusters)
            throws ConvergenceException {

        int maxNumber = 0;
        Cluster<T> selected = null;
        for (final Cluster<T> cluster : clusters) {

            // get the number of points of the current cluster
            final int number = cluster.getPoints().size();

            // select the cluster with the largest number of points
            if (number > maxNumber) {
                maxNumber = number;
                selected = cluster;
            }

        }

        // did we find at least one non-empty cluster ?
        if (selected == null) {
            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
        }

        // extract a random point from the cluster
        final List<T> selectedPoints = selected.getPoints();
        return selectedPoints.remove(random.nextInt(selectedPoints.size()));

    }"
8201469,none,    public InternalXtendLexer() {;} 
4097968,none,"        public String getIndexName() {
            return indexName;
        }"
4291944,none,"    DependentBeanEntry(T instance, Bean<?> bean, CreationalContext<T> creationalContext)
    {
        this.instance = instance;
        this.bean = bean;
        this.creationalContext = creationalContext;
    }"
5743113,none,"    private void resizeInstructions() {
        byte[] b = code.data; // bytecode of the method
        int u, v, label; // indexes in b
        int i, j; // loop indexes
        /*
         * 1st step: As explained above, resizing an instruction may require to
         * resize another one, which may require to resize yet another one, and
         * so on. The first step of the algorithm consists in finding all the
         * instructions that need to be resized, without modifying the code.
         * This is done by the following ""fix point"" algorithm:
         * 
         * Parse the code to find the jump instructions whose offset will need
         * more than 2 bytes to be stored (the future offset is computed from
         * the current offset and from the number of bytes that will be inserted
         * or removed between the source and target instructions). For each such
         * instruction, adds an entry in (a copy of) the indexes and sizes
         * arrays (if this has not already been done in a previous iteration!).
         * 
         * If at least one entry has been added during the previous step, go
         * back to the beginning, otherwise stop.
         * 
         * In fact the real algorithm is complicated by the fact that the size
         * of TABLESWITCH and LOOKUPSWITCH instructions depends on their
         * position in the bytecode (because of padding). In order to ensure the
         * convergence of the algorithm, the number of bytes to be added or
         * removed from these instructions is over estimated during the previous
         * loop, and computed exactly only after the loop is finished (this
         * requires another pass to parse the bytecode of the method).
         */
        int[] allIndexes = new int[0]; // copy of indexes
        int[] allSizes = new int[0]; // copy of sizes
        boolean[] resize; // instructions to be resized
        int newOffset; // future offset of a jump instruction

        resize = new boolean[code.length];

        // 3 = loop again, 2 = loop ended, 1 = last pass, 0 = done
        int state = 3;
        do {
            if (state == 3) {
                state = 2;
            }
            u = 0;
            while (u < b.length) {
                int opcode = b[u] & 0xFF; // opcode of current instruction
                int insert = 0; // bytes to be added after this instruction

                switch (ClassWriter.TYPE[opcode]) {
                case ClassWriter.NOARG_INSN:
                case ClassWriter.IMPLVAR_INSN:
                    u += 1;
                    break;
                case ClassWriter.LABEL_INSN:
                    if (opcode > 201) {
                        // converts temporary opcodes 202 to 217, 218 and
                        // 219 to IFEQ ... JSR (inclusive), IFNULL and
                        // IFNONNULL
                        opcode = opcode < 218 ? opcode - 49 : opcode - 20;
                        label = u + readUnsignedShort(b, u + 1);
                    } else {
                        label = u + readShort(b, u + 1);
                    }
                    newOffset = getNewOffset(allIndexes, allSizes, u, label);
                    if (newOffset < Short.MIN_VALUE
                            || newOffset > Short.MAX_VALUE) {
                        if (!resize[u]) {
                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {
                                // two additional bytes will be required to
                                // replace this GOTO or JSR instruction with
                                // a GOTO_W or a JSR_W
                                insert = 2;
                            } else {
                                // five additional bytes will be required to
                                // replace this IFxxx <l> instruction with
                                // IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx
                                // is the ""opposite"" opcode of IFxxx (i.e.,
                                // IFNE for IFEQ) and where <l'> designates
                                // the instruction just after the GOTO_W.
                                insert = 5;
                            }
                            resize[u] = true;
                        }
                    }
                    u += 3;
                    break;
                case ClassWriter.LABELW_INSN:
                    u += 5;
                    break;
                case ClassWriter.TABL_INSN:
                    if (state == 1) {
                        // true number of bytes to be added (or removed)
                        // from this instruction = (future number of padding
                        // bytes - current number of padding byte) -
                        // previously over estimated variation =
                        // = ((3 - newOffset%4) - (3 - u%4)) - u%4
                        // = (-newOffset%4 + u%4) - u%4
                        // = -(newOffset & 3)
                        newOffset = getNewOffset(allIndexes, allSizes, 0, u);
                        insert = -(newOffset & 3);
                    } else if (!resize[u]) {
                        // over estimation of the number of bytes to be
                        // added to this instruction = 3 - current number
                        // of padding bytes = 3 - (3 - u%4) = u%4 = u & 3
                        insert = u & 3;
                        resize[u] = true;
                    }
                    // skips instruction
                    u = u + 4 - (u & 3);
                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12;
                    break;
                case ClassWriter.LOOK_INSN:
                    if (state == 1) {
                        // like TABL_INSN
                        newOffset = getNewOffset(allIndexes, allSizes, 0, u);
                        insert = -(newOffset & 3);
                    } else if (!resize[u]) {
                        // like TABL_INSN
                        insert = u & 3;
                        resize[u] = true;
                    }
                    // skips instruction
                    u = u + 4 - (u & 3);
                    u += 8 * readInt(b, u + 4) + 8;
                    break;
                case ClassWriter.WIDE_INSN:
                    opcode = b[u + 1] & 0xFF;
                    if (opcode == Opcodes.IINC) {
                        u += 6;
                    } else {
                        u += 4;
                    }
                    break;
                case ClassWriter.VAR_INSN:
                case ClassWriter.SBYTE_INSN:
                case ClassWriter.LDC_INSN:
                    u += 2;
                    break;
                case ClassWriter.SHORT_INSN:
                case ClassWriter.LDCW_INSN:
                case ClassWriter.FIELDORMETH_INSN:
                case ClassWriter.TYPE_INSN:
                case ClassWriter.IINC_INSN:
                    u += 3;
                    break;
                case ClassWriter.ITFMETH_INSN:
                case ClassWriter.INDYMETH_INSN:
                    u += 5;
                    break;
                // case ClassWriter.MANA_INSN:
                default:
                    u += 4;
                    break;
                }
                if (insert != 0) {
                    // adds a new (u, insert) entry in the allIndexes and
                    // allSizes arrays
                    int[] newIndexes = new int[allIndexes.length + 1];
                    int[] newSizes = new int[allSizes.length + 1];
                    System.arraycopy(allIndexes, 0, newIndexes, 0,
                            allIndexes.length);
                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length);
                    newIndexes[allIndexes.length] = u;
                    newSizes[allSizes.length] = insert;
                    allIndexes = newIndexes;
                    allSizes = newSizes;
                    if (insert > 0) {
                        state = 3;
                    }
                }
            }
            if (state < 3) {
                --state;
            }
        } while (state != 0);

        // 2nd step:
        // copies the bytecode of the method into a new bytevector, updates the
        // offsets, and inserts (or removes) bytes as requested.

        ByteVector newCode = new ByteVector(code.length);

        u = 0;
        while (u < code.length) {
            int opcode = b[u] & 0xFF;
            switch (ClassWriter.TYPE[opcode]) {
            case ClassWriter.NOARG_INSN:
            case ClassWriter.IMPLVAR_INSN:
                newCode.putByte(opcode);
                u += 1;
                break;
            case ClassWriter.LABEL_INSN:
                if (opcode > 201) {
                    // changes temporary opcodes 202 to 217 (inclusive), 218
                    // and 219 to IFEQ ... JSR (inclusive), IFNULL and
                    // IFNONNULL
                    opcode = opcode < 218 ? opcode - 49 : opcode - 20;
                    label = u + readUnsignedShort(b, u + 1);
                } else {
                    label = u + readShort(b, u + 1);
                }
                newOffset = getNewOffset(allIndexes, allSizes, u, label);
                if (resize[u]) {
                    // replaces GOTO with GOTO_W, JSR with JSR_W and IFxxx
                    // <l> with IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is
                    // the ""opposite"" opcode of IFxxx (i.e., IFNE for IFEQ)
                    // and where <l'> designates the instruction just after
                    // the GOTO_W.
                    if (opcode == Opcodes.GOTO) {
                        newCode.putByte(200); // GOTO_W
                    } else if (opcode == Opcodes.JSR) {
                        newCode.putByte(201); // JSR_W
                    } else {
                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1
                                : opcode ^ 1);
                        newCode.putShort(8); // jump offset
                        newCode.putByte(200); // GOTO_W
                        // newOffset now computed from start of GOTO_W
                        newOffset -= 3;
                    }
                    newCode.putInt(newOffset);
                } else {
                    newCode.putByte(opcode);
                    newCode.putShort(newOffset);
                }
                u += 3;
                break;
            case ClassWriter.LABELW_INSN:
                label = u + readInt(b, u + 1);
                newOffset = getNewOffset(allIndexes, allSizes, u, label);
                newCode.putByte(opcode);
                newCode.putInt(newOffset);
                u += 5;
                break;
            case ClassWriter.TABL_INSN:
                // skips 0 to 3 padding bytes
                v = u;
                u = u + 4 - (v & 3);
                // reads and copies instruction
                newCode.putByte(Opcodes.TABLESWITCH);
                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4);
                label = v + readInt(b, u);
                u += 4;
                newOffset = getNewOffset(allIndexes, allSizes, v, label);
                newCode.putInt(newOffset);
                j = readInt(b, u);
                u += 4;
                newCode.putInt(j);
                j = readInt(b, u) - j + 1;
                u += 4;
                newCode.putInt(readInt(b, u - 4));
                for (; j > 0; --j) {
                    label = v + readInt(b, u);
                    u += 4;
                    newOffset = getNewOffset(allIndexes, allSizes, v, label);
                    newCode.putInt(newOffset);
                }
                break;
            case ClassWriter.LOOK_INSN:
                // skips 0 to 3 padding bytes
                v = u;
                u = u + 4 - (v & 3);
                // reads and copies instruction
                newCode.putByte(Opcodes.LOOKUPSWITCH);
                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4);
                label = v + readInt(b, u);
                u += 4;
                newOffset = getNewOffset(allIndexes, allSizes, v, label);
                newCode.putInt(newOffset);
                j = readInt(b, u);
                u += 4;
                newCode.putInt(j);
                for (; j > 0; --j) {
                    newCode.putInt(readInt(b, u));
                    u += 4;
                    label = v + readInt(b, u);
                    u += 4;
                    newOffset = getNewOffset(allIndexes, allSizes, v, label);
                    newCode.putInt(newOffset);
                }
                break;
            case ClassWriter.WIDE_INSN:
                opcode = b[u + 1] & 0xFF;
                if (opcode == Opcodes.IINC) {
                    newCode.putByteArray(b, u, 6);
                    u += 6;
                } else {
                    newCode.putByteArray(b, u, 4);
                    u += 4;
                }
                break;
            case ClassWriter.VAR_INSN:
            case ClassWriter.SBYTE_INSN:
            case ClassWriter.LDC_INSN:
                newCode.putByteArray(b, u, 2);
                u += 2;
                break;
            case ClassWriter.SHORT_INSN:
            case ClassWriter.LDCW_INSN:
            case ClassWriter.FIELDORMETH_INSN:
            case ClassWriter.TYPE_INSN:
            case ClassWriter.IINC_INSN:
                newCode.putByteArray(b, u, 3);
                u += 3;
                break;
            case ClassWriter.ITFMETH_INSN:
            case ClassWriter.INDYMETH_INSN:
                newCode.putByteArray(b, u, 5);
                u += 5;
                break;
            // case MANA_INSN:
            default:
                newCode.putByteArray(b, u, 4);
                u += 4;
                break;
            }
        }

        // recomputes the stack map frames
        if (frameCount > 0) {
            if (compute == FRAMES) {
                frameCount = 0;
                stackMap = null;
                previousFrame = null;
                frame = null;
                Frame f = new Frame();
                f.owner = labels;
                Type[] args = Type.getArgumentTypes(descriptor);
                f.initInputFrame(cw, access, args, maxLocals);
                visitFrame(f);
                Label l = labels;
                while (l != null) {
                    /*
                     * here we need the original label position. getNewOffset
                     * must therefore never have been called for this label.
                     */
                    u = l.position - 3;
                    if ((l.status & Label.STORE) != 0 || (u >= 0 && resize[u])) {
                        getNewOffset(allIndexes, allSizes, l);
                        // TODO update offsets in UNINITIALIZED values
                        visitFrame(l.frame);
                    }
                    l = l.successor;
                }
            } else {
                /*
                 * Resizing an existing stack map frame table is really hard.
                 * Not only the table must be parsed to update the offets, but
                 * new frames may be needed for jump instructions that were
                 * inserted by this method. And updating the offsets or
                 * inserting frames can change the format of the following
                 * frames, in case of packed frames. In practice the whole table
                 * must be recomputed. For this the frames are marked as
                 * potentially invalid. This will cause the whole class to be
                 * reread and rewritten with the COMPUTE_FRAMES option (see the
                 * ClassWriter.toByteArray method). This is not very efficient
                 * but is much easier and requires much less code than any other
                 * method I can think of.
                 */
                cw.invalidFrames = true;
            }
        }
        // updates the exception handler block labels
        Handler h = firstHandler;
        while (h != null) {
            getNewOffset(allIndexes, allSizes, h.start);
            getNewOffset(allIndexes, allSizes, h.end);
            getNewOffset(allIndexes, allSizes, h.handler);
            h = h.next;
        }
        // updates the instructions addresses in the
        // local var and line number tables
        for (i = 0; i < 2; ++i) {
            ByteVector bv = i == 0 ? localVar : localVarType;
            if (bv != null) {
                b = bv.data;
                u = 0;
                while (u < bv.length) {
                    label = readUnsignedShort(b, u);
                    newOffset = getNewOffset(allIndexes, allSizes, 0, label);
                    writeShort(b, u, newOffset);
                    label += readUnsignedShort(b, u + 2);
                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)
                            - newOffset;
                    writeShort(b, u + 2, newOffset);
                    u += 10;
                }
            }
        }
        if (lineNumber != null) {
            b = lineNumber.data;
            u = 0;
            while (u < lineNumber.length) {
                writeShort(
                        b,
                        u,
                        getNewOffset(allIndexes, allSizes, 0,
                                readUnsignedShort(b, u)));
                u += 4;
            }
        }
        // updates the labels of the other attributes
        Attribute attr = cattrs;
        while (attr != null) {
            Label[] labels = attr.getLabels();
            if (labels != null) {
                for (i = labels.length - 1; i >= 0; --i) {
                    getNewOffset(allIndexes, allSizes, labels[i]);
                }
            }
            attr = attr.next;
        }

        // replaces old bytecodes with new ones
        code = newCode;
    }"
4432223,none,"    public static AggregateFunctionTypeMatcher matchAll(String function) {
        for (AggregateFunctionType type : values()) {
            Matcher m = type.pattern.matcher(function);
            if (m.find()) {
                return new AggregateFunctionTypeMatcher(type, true, m.group(1));
            }
        }
        return new AggregateFunctionTypeMatcher(null, false, null);
    }"
5283018,none,"    @Override
    public Expression matches(Value v1, Value v2,
        String single, String multi, String esc) {
        return new MatchesExpression((Val) v1, (Val) v2, single, multi, esc,
            true);
    }"
6120286,none,"        @Override
        public <V> UnsortedBagBatch<V> flatCollect(Function<? super T, ? extends Iterable<V>> function)
        {
            return new FlatCollectUnsortedBagBatch<>(this, function);
        }"
3918098,none,"    public String getId()
    {
        return id;
    }"
8850497,none,"    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }"
5409414,none,"    @GET
    @Path(""list"")
    public Collection<Subject> list() {
        return dao.findAll();
    }"
8763437,none,"    public int compareTo(Range o) {
      // Ensure sgn(x.compareTo(y) == -sgn(y.compareTo(x))
      return this.startIndex < o.startIndex ? -1 :
          (this.startIndex > o.startIndex ? 1 :
          (this.length < o.length ? -1 :
          (this.length > o.length ? 1 : 0)));
    }"
8293792,none,"    private ByteBuffer toByteBuffer(Serializable serializable) {
        try {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            new ObjectOutputStream(outputStream).writeObject(serializable);
            return ByteBuffer.wrap(outputStream.toByteArray());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }"
8309635,none,"	public static IJavaElement[] setMinus(IJavaElement[] setToRemoveFrom, IJavaElement[] elementsToRemove) {
		Set<IJavaElement> setMinus= new HashSet<>(setToRemoveFrom.length - setToRemoveFrom.length);
		setMinus.addAll(Arrays.asList(setToRemoveFrom));
		setMinus.removeAll(Arrays.asList(elementsToRemove));
		return setMinus.toArray(new IJavaElement[setMinus.size()]);
	}"
5328888,none,"    @Override
    public Collection<ValidationResult> validate(final ValidationContext validationContext,
                                                 final CredentialsStrategy primaryStrategy) {
        boolean thisIsSelectedStrategy = this == primaryStrategy;
        Boolean useStrategy = validationContext.getProperty(strategyProperty).asBoolean();
        if (!thisIsSelectedStrategy && useStrategy) {
            String failureFormat = ""property %1$s cannot be used with %2$s"";
            Collection<ValidationResult> validationFailureResults = new ArrayList<ValidationResult>();
            String message = String.format(failureFormat, strategyProperty.getDisplayName(),
                    primaryStrategy.getName());
            validationFailureResults.add(new ValidationResult.Builder()
                    .subject(strategyProperty.getDisplayName())
                    .valid(false)
                    .explanation(message).build());
            return  validationFailureResults;
        }
        return null;
    }"
6502815,none,"	public QueueCursor(int capacity) {
		this(capacity, false);
	}"
8211343,none,"		public static IGrammarAwareElementType createModel_Group_5ElementType() {
			return new IGrammarAwareElementType(""Model_Group_5_ELEMENT_TYPE"", Bug289515TestLanguageLanguage.INSTANCE, GRAMMAR_ACCESS.getModelAccess().getGroup_5());
		}"
8575719,none,"  public AuthenticationKey(int keyId, long expirationDate, SecretKey key) {
    this.id = keyId;
    this.expirationDate = expirationDate;
    this.secret = key;
  }"
3763789,none,"      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
        return fields;
      }"
4404036,none,"    public JsonWebKeys(JsonWebKey key) {
        setInitKey(key);
    }"
5420605,none,"    @Test
    public void testImmutableKeywordAndProperty() throws Exception {
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        String immutableDataTableFullName = SchemaUtil.getTableName("""", generateUniqueName());
        String mutableDataTableFullName = SchemaUtil.getTableName("""", generateUniqueName());
        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {
            Statement stmt = conn.createStatement();
            try {
                // create immutable table with immutable table property set to true 
                String ddl = ""CREATE IMMUTABLE TABLE  "" + immutableDataTableFullName +
                        ""  (a_string varchar not null, col1 integer"" +
                        ""  CONSTRAINT pk PRIMARY KEY (a_string)) IMMUTABLE_ROWS=true"";
                stmt.execute(ddl);
                fail();
            }
            catch (SQLException e) {
                assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(), e.getErrorCode());
            }
            
            try {
                // create immutable table with immutable table property set to false
                String ddl = ""CREATE IMMUTABLE TABLE  "" + mutableDataTableFullName +
                        ""  (a_string varchar not null, col1 integer"" +
                        ""  CONSTRAINT pk PRIMARY KEY (a_string))  IMMUTABLE_ROWS=false"";
                stmt.execute(ddl);
                fail();
            }
            catch (SQLException e) {
                assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(), e.getErrorCode());
            }
            
        } 
    }"
5760043,none,"    private void declareFrameTypes(final int n, final Object[] o) {
        for (int i = 0; i < n; ++i) {
            if (o[i] instanceof Label) {
                declareLabel((Label) o[i]);
            }
        }
    }"
6457764,none,"	public static Bundle[] getFragments(Bundle bundle) {
		if (packageAdmin == null)
			throw new IllegalStateException(""Not started""); //$NON-NLS-1$

		return packageAdmin.getFragments(bundle);
	}"
3875268,none,"  public TableInfo() {
  }"
5771277,none,"    private ConnIdSpecialName() {
        // private constructor for static utility class
    }"
7056882,none,"  public static int reconfigureNetworking()
  {
    // This uses values from the property settings
    if (Sage.getBoolean(NET_CONFIG_WIRED, true))
    {
      // Bring down the wireless interface if it's there
      bringDownWireless();

      setupNetworking(Sage.get(""linux/wired_network_port"", ""eth0""));
    }
    else
    {
      // Bring down the wired interface if it's there
      if (Sage.getBoolean(""linux/disable_wired_when_wireless_is_enabled"", false))
        bringDownWired();

      // Be sure the wired interface is loaded (it may need to be before it is configured)
      IOUtils.exec2(""ifconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" up"");

      // Setup the wireless networking properties before we try to connect to the network or it won't work
      IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" essid "" + Sage.get(NET_CONFIG_SSID, ""any""));

      String crypto = Sage.get(NET_CONFIG_ENCRYPTION, ""WPA"");
      if (""None"".equals(crypto))
      {
        IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key off"");
      }
      else
      {
        // Check if the key is all hex
        String key = Sage.get(NET_CONFIG_ENCRYPTION_KEY, """");
        boolean hexKey = true;
        for (int i = 0; i < key.length(); i++)
        {
          if (Character.digit(key.charAt(i), 16) < 0)
          {
            hexKey = false;
            break;
          }
        }
        if (""WEP"".equals(crypto))
        {
          IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key on"");
          if (hexKey)
            IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key "" + Sage.get(NET_CONFIG_ENCRYPTION_KEY, """"));
          else
            IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key s:"" + Sage.get(NET_CONFIG_ENCRYPTION_KEY, """"));
        }
        else // WPA
        {
          // NOT FINISHED YET, we'll need to setup a configuration file for wpa_supplicant and then run it
        }
      }

      setupNetworking(Sage.get(""linux/wireless_network_port"", ""eth1""));
    }
    return 0;
  }"
5176784,none,"    @Override
    public Object apply(List<Object> args, Context context) throws ParseException {
      if(!initialized) {
        return null;
      }
      if(args.size() > 2) {
        throw new IllegalArgumentException(""GEO_GET received more arguments than expected: "" + args.size());
      }

      if(args.size() == 1 && args.get(0) instanceof String) {
        // If no fields are provided, return everything
        String ip = (String) args.get(0);
        if(ip == null || ip.trim().isEmpty()) {
          return null;
        }

        Optional<Map<String, String>> result = GeoLiteCityDatabase.INSTANCE.get(ip);
        return result.orElse(Collections.emptyMap());
      } else if (args.size() == 2 && args.get(1) instanceof List) {
        // If fields are provided, return just those fields.
        String ip = (String) args.get(0);
        @SuppressWarnings(""unchecked"")
        List<String> fields = (List) args.get(1);
        Optional<Map<String, String>> result = GeoLiteCityDatabase.INSTANCE.get(ip);

        // If only one field is requested, just return it directly
        if(fields.size() == 1 && result.isPresent()) {
          return result.get().get(fields.get(0));
        } else if (result.isPresent()) {
          // If multiple fields are requested, return all of them
          Map<String, String> filteredInfo = new HashMap<>();
          for(String field : fields) {
            Map<String, String> geoInfo = result.get();
            filteredInfo.put(field, geoInfo.get(field));
          }
          return filteredInfo;
        }
      }

      return null;
    }"
7732540,none,"    @Override
    @Deprecated
    public <T> SubscriptionHandle subscribeToChildren(Entity parent, Sensor<T> sensor, SensorEventListener<? super T> listener) {
        return subscriptions().subscribeToChildren(parent, sensor, listener);
    }"
5437215,none,"    public static byte[] getTableKeyFromFullName(String fullTableName) {
        int index = fullTableName.indexOf(QueryConstants.NAME_SEPARATOR);
        if (index < 0) {
            index = fullTableName.indexOf(QueryConstants.NAMESPACE_SEPARATOR);
            if (index < 0) { return getTableKey(null, null, fullTableName); }
        }
        String schemaName = fullTableName.substring(0, index);
        String tableName = fullTableName.substring(index+1);
        return getTableKey(null, schemaName, tableName); 
    }"
8515408,none,"    private static List<NameValuePair> getUserDetails(String query) {
        List<NameValuePair> details = new ArrayList<NameValuePair>();
        if (query != null && !query.isEmpty()) {
            StringTokenizer allParams = new StringTokenizer(query, ""&"");
            while (allParams.hasMoreTokens()) {
                String param = allParams.nextToken();
                details.add(new BasicNameValuePair(param.substring(0, param.indexOf(""="")),
                        param.substring(param.indexOf(""="") + 1)));
            }
        }

        return details;
    }"
9471363,none,"  public HttpInputStreamWithRelease(URI uri, HttpRequestBase req,
      HttpResponse resp) throws IOException {
    this.uri = uri;
    this.req = req;
    this.resp = resp;
    constructionStack = LOG.isDebugEnabled() ? new Exception(""stack"") : null;
    if (req == null) {
      throw new IllegalArgumentException(""Null 'request' parameter "");
    }
    try {
      inStream = resp.getEntity().getContent();
    } catch (IOException e) {
      inStream = new ByteArrayInputStream(new byte[]{});
      throw releaseAndRethrow(""getResponseBodyAsStream() in constructor -"" + e, e);
    }
  }"
4210356,none,"    @Override
    public String shortDisplay()
    {
        return (happy() ? ""["" : """") + name + ""(?)"" + (happy() ? ""]"" : """");
    }"
4847006,none,"    public RepositoryServiceImpl(String jcrServerURI, String defaultWorkspaceName,
                                 BatchReadConfig batchReadConfig, int itemInfoCacheSize,
                                 int maximumHttpConnections) throws RepositoryException {

        super(jcrServerURI, IdFactoryImpl.getInstance(), NameFactoryImpl.getInstance(),
                PathFactoryImpl.getInstance(), new QValueFactoryImpl(), itemInfoCacheSize, maximumHttpConnections);

        try {
            URI repositoryUri = computeRepositoryUri(jcrServerURI);
            this.jcrServerURI = repositoryUri.toString();
        } catch (URISyntaxException e) {
            throw new RepositoryException(e);
        }

        this.defaultWorkspaceName = defaultWorkspaceName;
        if (batchReadConfig == null) {
            this.batchReadConfig = new BatchReadConfig() {
                public int getDepth(Path path, PathResolver resolver) {
                    return 0;
                }
            };
        } else {
            this.batchReadConfig = batchReadConfig;
        }
    }"
8348990,none,"	private static boolean handleAspectAnnotation(RuntimeAnnos runtimeAnnotations, AjAttributeStruct struct) {
		AnnotationGen aspect = getAnnotation(runtimeAnnotations, AjcMemberMaker.ASPECT_ANNOTATION);
		if (aspect != null) {
			// semantic check for inheritance (only one level up)
			boolean extendsAspect = false;
			if (!""java.lang.Object"".equals(struct.enclosingType.getSuperclass().getName())) {
				if (!struct.enclosingType.getSuperclass().isAbstract() && struct.enclosingType.getSuperclass().isAspect()) {
					reportError(""cannot extend a concrete aspect"", struct);
					return false;
				}
				extendsAspect = struct.enclosingType.getSuperclass().isAspect();
			}

			NameValuePair aspectPerClause = getAnnotationElement(aspect, VALUE);
			final PerClause perClause;
			if (aspectPerClause == null) {
				// empty value means singleton unless inherited
				if (!extendsAspect) {
					perClause = new PerSingleton();
				} else {
					perClause = new PerFromSuper(struct.enclosingType.getSuperclass().getPerClause().getKind());
				}
			} else {
				String perX = aspectPerClause.getValue().stringifyValue();
				if (perX == null || perX.length() <= 0) {
					perClause = new PerSingleton();
				} else {
					perClause = parsePerClausePointcut(perX, struct);
				}
			}
			if (perClause == null) {
				// could not parse it, ignore the aspect
				return false;
			} else {
				perClause.setLocation(struct.context, -1, -1);// struct.context.getOffset(),
				// struct.context.getOffset()+1);//FIXME
				// AVASM
				// Not setting version here
				// struct.ajAttributes.add(new AjAttribute.WeaverVersionInfo());
				AjAttribute.Aspect aspectAttribute = new AjAttribute.Aspect(perClause);
				struct.ajAttributes.add(aspectAttribute);
				FormalBinding[] bindings = new org.aspectj.weaver.patterns.FormalBinding[0];
				final IScope binding;
				binding = new BindingScope(struct.enclosingType, struct.context, bindings);

				// // we can't resolve here since the perclause typically refers
				// to pointcuts
				// // defined in the aspect that we haven't told the
				// BcelObjectType about yet.
				//
				// perClause.resolve(binding);

				// so we prepare to do it later...
				aspectAttribute.setResolutionScope(binding);
				return true;
			}
		}
		return false;
	}"
5235970,none,"  public static Map<String, Object> getXmlRpcElementHashTable(Element element) {
    Map<String, Object> elementHash = new Hashtable<String, Object>();

    elementHash.put(""id"", element.getElementId());
    elementHash.put(""name"", element.getElementName());
    elementHash.put(""dcElement"", element.getDCElement() != null ? element
        .getDCElement() : """");
    elementHash.put(""description"",
        element.getDescription() != null ? element.getDescription()
                                         : """");

    return elementHash;
  }"
8230505,none,"    public void dispose() {
        this.decommission( this.instance );
        this.instance = null;

        super.dispose();
    }"
4830091,none,"    @Override
    protected void configure(final Marshaller marshaller) {
        marshaller.setAdapter(PersistentEntityAdapter.class,
                serviceRegistry.injectServicesInto(new PersistentEntityAdapter()));
        marshaller.setAdapter(PersistentEntitiesAdapter.class,
                serviceRegistry.injectServicesInto(new PersistentEntitiesAdapter()));
    }"
5654509,none,"    public void setAllowedColumns(final Set<Column> inclusion) {
        ArgumentChecks.ensureNonNull(""inclusion"", inclusion);
        columns.clear();
        columns.addAll(inclusion);
    }"
5907678,none,"  public void setOp(int opPos, int value)
  {
     m_opMap.setElementAt(value,opPos);
  }"
9172549,none,"	public String getBirtFilterExprDisplayName( )
	{
		return birtFilterDisplayName;
	}"
8514290,none,"    private void init() throws ConfigurationException {
        if (_mshostDao != null)
            return;

        Properties dbProps = DbProperties.getDbProperties();

        _clusterServicePort = NumbersUtil.parseInt(dbProps.getProperty(""cluster.servlet.port""), DEFAULT_SERVICE_PORT);
        if (s_logger.isInfoEnabled())
            s_logger.info(""Cluster servlet port : "" + _clusterServicePort);
    }"
5262454,none,"	public HeaderPanel(String id, String appName) {
		super(id);
		setOutputMarkupPlaceholderTag(true);
		add(new Label(""appName"", Strings.isEmpty(appName) ? ""&nbsp;"" : appName).setEscapeModelStrings(false));
	}"
7486125,none,"    @Test
    public void run5() throws Throwable {
        runTest(""test"", -5);
    }"
7725810,none,"    String get(String subsystem, String name, boolean verboseResolution) {
        String key = buildKey(subsystem, name);
        String value = getProperty(key);
        if (value == null) {
            key = toSnakeUpperCase(Utils.PROPERTY_NAME_PREFIX + subsystem).replace(""."", """");
            key = key + '_' + toSnakeUpperCase(name);
            value = getEnv(key);
            if (value != null) {
                logFoundEnvVar(verboseResolution, key, value);
            }
        } else {
            logFoundSystemProperty(verboseResolution, key, value);
        }

        if (value == null || value.length() == 0) {
            return null;
        }

        return value;
    }"
7767021,none,"  @Override
  public ClientResponse<FullResponseHolder> handleChunk(
      ClientResponse<FullResponseHolder> response,
      HttpChunk chunk,
      long chunkNum
  )
  {
    BytesFullResponseHolder holder = (BytesFullResponseHolder) response.getObj();

    if (holder == null) {
      return ClientResponse.finished(null);
    }

    holder.addChunk(getContentBytes(chunk.getContent()));
    return response;
  }"
4561905,none,"    public boolean isCompatible(RenderingContext targetContext, Image image) {
        return (image == null || image instanceof ImageRawJPEG)
                && targetContext instanceof PDFRenderingContext;
    }"
8952306,none,"    public void unsetDb_name() {
      this.db_name = null;
    }"
4439983,none,"  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.IDENTIFICATIONS)
  @RequestMapping(
          value = ""/customers/{identifier}/identifications"",
          method = RequestMethod.POST,
          produces = MediaType.APPLICATION_JSON_VALUE,
          consumes = MediaType.APPLICATION_JSON_VALUE
  )
  public
  @ResponseBody
  ResponseEntity<Void> createIdentificationCard(@PathVariable(""identifier"") final String identifier,
                                @RequestBody @Valid final IdentificationCard identificationCard) {
    if (this.customerService.customerExists(identifier)) {
      if (this.customerService.identificationCardExists(identificationCard.getNumber())) {
        throw ServiceException.conflict(""IdentificationCard {0} already exists."", identificationCard.getNumber());
      }

      this.commandGateway.process(new CreateIdentificationCardCommand(identifier, identificationCard));
    } else {
      throw ServiceException.notFound(""Customer {0} not found."", identifier);
    }

    return ResponseEntity.accepted().build();
  }"
3698602,none,"        public GenericRequestMapper<Input, Output> build() {
            return new BaseRequestMapper<>(handlerChains);
        }"
7287653,none,"	public static void ensure(IProject project, IProgressMonitor mon, String... reqNatures) throws CoreException {
		IProjectDescription desc = project.getDescription();
		String[] oldNaturesArr = desc.getNatureIds();
		Set<String> natures = new LinkedHashSet<String>();
		for (String n : reqNatures) {
			natures.add(n);
		}
		for (String n : oldNaturesArr) {
			natures.add(n);
		}
		if (natures.size()>oldNaturesArr.length) {
			//Some natures got added
			desc.setNatureIds(natures.toArray(new String[natures.size()]));
			project.setDescription(desc, mon);
		} else {
			//No new natures added, but need to set it to force desired ordering
			desc.setNatureIds(natures.toArray(new String[natures.size()]));
			project.setDescription(desc, IResource.AVOID_NATURE_CONFIG, mon);
		}
	}"
3717549,none,"    public int adjustAnnotationDirectory(int annotationDirectoryOffset) {
        return annotationDirectoryOffsets.get(annotationDirectoryOffset);
    }"
6967137,none,"  private void lockSourceAndCopy(File sourceFile, File copyFile) {
    sourceFile.opened();
    ReadWriteLock sourceLock = sourceFile.contentLock();
    if (sourceLock != null) {
      sourceLock.readLock().lock();
    }
    ReadWriteLock copyLock = copyFile.contentLock();
    if (copyLock != null) {
      copyLock.writeLock().lock();
    }
  }"
4887547,none,"        public InputStream getStream() throws RepositoryException {
            // if the value has not yet been loaded -> retrieve it first in
            // order to make sure that either 'file' or 'buffer' is set.
            if (file == null && buffer == null) {
                try {
                    loadBinary();
                } catch (IOException e) {
                    throw new RepositoryException(e);
                }
            }

            // always return a 'fresh' stream
            if (file != null) {
                // this instance is backed by a 'real' file
                try {
                    return new FileInputStream(file);
                } catch (FileNotFoundException fnfe) {
                    throw new RepositoryException(""file backing binary value not found"",
                        fnfe);
                }
            } else {
                return new ByteArrayInputStream(buffer);
            }
        }"
7207168,none,"        @com.fasterxml.jackson.annotation.JsonValue
        public String getValue() {
            return value;
        }"
5839980,none,"    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        ContextResourceLink other = (ContextResourceLink) obj;
        if (factory == null) {
            if (other.factory != null) {
                return false;
            }
        } else if (!factory.equals(other.factory)) {
            return false;
        }
        if (global == null) {
            if (other.global != null) {
                return false;
            }
        } else if (!global.equals(other.global)) {
            return false;
        }
        return true;
    }"
8845236,none,"    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'authzToken' was not present! Struct: "" + toString());
      }
      if (gatewayId == null) {
        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'gatewayId' was not present! Struct: "" + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }"
5164745,none,"    @Override
    protected Query beforeRewrite(Query query) {
        query = query.clone();

        JdbcDataContext dataContext = getDataContext();
        if (dataContext != null) {
            String identifierQuoteString = dataContext.getIdentifierQuoteString();
            if (identifierQuoteString != null) {
                List<SelectItem> selectItems = query.getSelectClause().getItems();
                for (SelectItem item : selectItems) {
                    String alias = item.getAlias();
                    if (needsQuoting(alias, identifierQuoteString)) {
                        item.setAlias(identifierQuoteString + alias + identifierQuoteString);
                    }
                }
                List<FromItem> fromItems = query.getFromClause().getItems();
                for (FromItem item : fromItems) {
                    String alias = item.getAlias();
                    if (needsQuoting(alias, identifierQuoteString)) {
                        item.setAlias(identifierQuoteString + alias + identifierQuoteString);
                    }
                }
            }
        }
        return query;
    }"
6030681,none,"	public static NetworkConfig createStandardFromStream(InputStream inStream) {
		LOGGER.config(""Creating standard network configuration properties from stream"");
		standard = new NetworkConfig();
		try {
			standard.load(inStream);
		} catch (IOException e) {
			LOGGER.log(Level.WARNING, ""cannot load properties from stream: {0}"", e.getMessage());
		}
		return standard;
	}"
6854314,none,"  public static String getZynamicsDirectory(final String companyName) {
    // Use lowercase for the company name, since that is customary on Linux. For ""zynamics"", this
    // is a no-op, but it will do the right thing for ""Google"".
    return SystemHelpers.getApplicationDataDirectory() + File.separator
        + (SystemHelpers.isRunningWindows() ? companyName : (""."" + companyName.toLowerCase()))
        + File.separator;
  }"
8662937,none,"        public static void setResultSortOrder(ResultSortOrder resultSortOrder, HttpSession session) {
            ContentSearchOptions contentSearchOptions = getContentSearchOptions(session);
            contentSearchOptions.resultSortOrder = resultSortOrder;
            contentSearchOptions.changed = true;
        }"
8747487,none,"   static String classNameBase(String className) {
      String[] names = className.split(""\\."", -1);
      if (names == null || names.length == 0) {
        return className;
      }
      return names[names.length-1];
    }"
7857792,none,"  @Override
  public void setVersions(final VersionTag versionTag) {
    this.memberId = versionTag.getMemberID();
    int eVersion = versionTag.getEntryVersion();
    this.entryVersionLowBytes = (short) (eVersion & 0xffff);
    this.entryVersionHighByte = (byte) ((eVersion & 0xff0000) >> 16);
    this.regionVersionHighBytes = versionTag.getRegionVersionHighBytes();
    this.regionVersionLowBytes = versionTag.getRegionVersionLowBytes();
    if (!versionTag.isGatewayTag()
        && this.distributedSystemId == versionTag.getDistributedSystemId()) {
      if (getVersionTimeStamp() <= versionTag.getVersionTimeStamp()) {
        setVersionTimeStamp(versionTag.getVersionTimeStamp());
      } else {
        versionTag.setVersionTimeStamp(getVersionTimeStamp());
      }
    } else {
      setVersionTimeStamp(versionTag.getVersionTimeStamp());
    }
    this.distributedSystemId = (byte) (versionTag.getDistributedSystemId() & 0xff);
  }"
5626154,none,"	public boolean isSuspended() throws NotConnectedException
	{
		if (!isConnected())
			throw new NotConnectedException();

		return m_isHalted;
	}"
9539712,none,"  @Override
  protected void serviceInit(Configuration conf) throws Exception {
    this.conf = conf;

    // create scheduler executor service that services the cleaner tasks
    // use 2 threads to accommodate the on-demand tasks and reduce the chance of
    // back-to-back runs
    ThreadFactory tf =
        new ThreadFactoryBuilder().setNameFormat(""Shared cache cleaner"").build();
    scheduledExecutor = HadoopExecutors.newScheduledThreadPool(2, tf);
    super.serviceInit(conf);
  }"
4434538,none,"    @Override
    public InstancesResult resumeInstances(Entity entity, Date start, Date end,
                                           Properties props, List<LifeCycle> lifeCycles) throws FalconException {
        return doJobAction(JobAction.RESUME, entity, start, end, props, lifeCycles);
    }"
5542756,none,"      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_roles_privileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }"
5333354,none,"    public boolean isSiteToSiteSecure() {
        return isSiteToSiteSecure;
    }"
9012946,none,"  @Override
  public String getInflectionForm(int wordId) {
    return inflFormDict[getLeftId(wordId)];
  }"
7904510,none,"  public AndroidPackageableCollector addNativeLinkableAsset(NativeLinkable nativeLinkable) {
    if (nativeLinkablesAssetsToExclude.contains(nativeLinkable)) {
      return this;
    }
    APKModule module = apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());
    collectionBuilder.putNativeLinkablesAssets(module, nativeLinkable);
    return this;
  }"
5939683,none,"    public void setPortStartup(final int portStartup) {
        this.portStartup = portStartup;
    }"
3856911,none,"  protected void addRequiredAlertProperties(Set<String> properties) {
    properties.add(AlertResourceProvider.ALERT_STATE);
    properties.add(AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);
    properties.add(AlertResourceProvider.ALERT_MAINTENANCE_STATE);
  }"
8801664,none,"    protected XmlElement toXML() {
        XmlElement portElement = XMLUtil.BUILDER.newFragment(GraphSchema.NS, GraphSchema.PORT_TAG);

        XmlElement idElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_ID_TAG);
        idElement.addChild(getID());

        if (this.name != null) {
            // TODO control ports might have name?
            XmlElement nameElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_NAME_TAG);
            nameElement.addChild(this.name);
        }

        XmlElement nodeElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_NODE_TAG);
        nodeElement.addChild(this.node.getID());

        return portElement;
    }"
8213894,none,"		public static IGrammarAwareElementType createModel_NodeExclusionListAlternatives_8_2_0ElementType() {
			return new IGrammarAwareElementType(""Model_NodeExclusionListAlternatives_8_2_0_ELEMENT_TYPE"", ContextFinderTestLanguageLanguage.INSTANCE, GRAMMAR_ACCESS.getModelAccess().getNodeExclusionListAlternatives_8_2_0());
		}"
4206958,none,"        private long rollEpoch(long delta, long epoch, long nanos)
        {
            if (delta > 2 * INTERVAL)
            {
                // this sample is more than twice our interval ahead, so just clear our counters completely
                epoch = epoch(nanos);
                sum = 0;
                Arrays.fill(samples, 0);
            }
            else
            {
                // ix(epoch - 1) => last index; this is our partial result bucket, so we add this to the sum
                sum += samples[ix(epoch - 1)];
                // then we roll forwards, clearing buckets, until our interval covers the new sample time
                while (epoch + INTERVAL < nanos)
                {
                    int index = ix(epoch);
                    sum -= samples[index];
                    samples[index] = 0;
                    epoch += BUCKET_INTERVAL;
                }
            }
            // store the new epoch
            this.epoch = epoch;
            return epoch;
        }"
6457553,none,"    private String getPageEncodingFromDirective(Attributes attrs,
                                                String attrName) {
	String value = attrs.getValue(attrName);
        if (attrName.equals(""pageEncoding"")) {
            return value;
        }

        // attrName = contentType
        String contentType = value;
        String encoding = null;
        if (contentType != null) {
	    int loc = contentType.indexOf(CHARSET);
	    if (loc != -1) {
		encoding = contentType.substring(loc + CHARSET.length());
	    }
	}

	return encoding;
    }"
4184807,none,"    @Override
    public Term fromJSONObject(Object parsed) throws MarshalException
    {
        return baseType.fromJSONObject(parsed);
    }"
4856596,none,"    public boolean setNodeReferences(ChangeLog references) {
        try {
            ChangeLog log = new ChangeLog();

            for (NodeReferences source : references.modifiedRefs()) {
                // filter out version storage intern ones
                NodeReferences target = new NodeReferences(source.getTargetId());
                for (PropertyId id : source.getReferences()) {
                    if (!hasNonVirtualItemState(id.getParentId())) {
                        target.addReference(id);
                    }
                }
                log.modified(target);
            }

            if (log.hasUpdates()) {
                pMgr.store(log);
            }
            return true;
        } catch (ItemStateException e) {
            log.error(""Error while setting references: "" + e.toString());
            return false;
        }
    }"
7198785,none,"        public Builder tcpOptions(TcpOptions tcpOptions) {
            this.tcpOptions = tcpOptions;
            this.__explicitlySet__.add(""tcpOptions"");
            return this;
        }"
4467093,none,"  @Override
  public void cleanUp() {
    final DrillConnectionImpl connection1 = (DrillConnectionImpl) connection;
    connection1.openStatementsRegistry.removeStatement(this);
  }"
5280072,none,"    public void addAdditionalQualifier(Class<? extends Annotation> qualifier)
    {
        if (!additionalQualifiers.contains(qualifier))
        {
            additionalQualifiers.add(qualifier);
        }
    }"
5004854,none,"  public UrlRewriteContextImpl(
      UrlRewriteEnvironment environment,
      Resolver resolver,
      Map<String,UrlRewriteFunctionProcessor> functions,
      UrlRewriter.Direction direction,
      Template url ) {
    this.environment = environment;
    this.resolver = resolver;
    this.functions = functions;
    this.params = new ContextParameters();
    this.evaluator = new ContextEvaluator();
    this.direction = direction;
    this.originalUrl = url;
    this.currentUrl = url;
  }"
8966555,none,"    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      }
    }"
6297548,none,"    @Override
    public ByteBuffer getPayload()
    {
        if(!delegate.hasPayload()) {
            return null;
        }
        return delegate.getPayload().asReadOnlyBuffer();
    }"
5895731,none,"    public static <S, T> HashMapBuilder<S, T> hashMap( S key, T value ) {
        return new HashMapBuilder<S, T>().map( key, value );
    }"
3993481,none,        public static void setSize(int sz) { cache.setSize(sz); }
7229219,none,"		@Override
		public final Builder sslContext(SslContext sslContext){
			this.sslContext = Objects.requireNonNull(sslContext, ""sslContext"");
			return this;
		}"
6465751,none,"    private void processImportBundle ( final BundleInformation result, final Attributes ma )
    {
        for ( final AttributedValue av : emptyNull ( Headers.parseList ( ma.getValue ( Constants.REQUIRE_BUNDLE ) ) ) )
        {
            final String name = av.getValue ();
            final String vs = av.getAttributes ().get ( ""bundle-version"" );
            VersionRange vr = null;
            if ( vs != null )
            {
                vr = new VersionRange ( vs );
            }
            final boolean optional = ""optional"".equals ( av.getAttributes ().get ( ""resolution"" ) );
            final boolean reexport = ""reexport"".equals ( av.getAttributes ().get ( ""visibility"" ) );
            result.getBundleRequirements ().add ( new BundleRequirement ( name, vr, optional, reexport ) );
        }
    }"
6310576,none,"    public boolean isPermissionErrorMessage(Throwable caught) {
        if ((caught instanceof GwtKapuaException)
                && GwtKapuaErrorCode.SUBJECT_UNAUTHORIZED.equals(((GwtKapuaException) caught).getCode())) {
            exitMessage = caught.getLocalizedMessage();
            return true;
        } else {
            return false;
        }
    }"
6328221,none,"    @SuppressWarnings(""unused"")
    private String format(String s, Object[] arguments) {

        if (arguments == null) {
            return s;
        }

        // A very simple implementation of format
        int i = 0;
        while (i < arguments.length) {
            String delimiter = ""{"" + i + ""}"";
            while (s.contains(delimiter)) {
                s = s.replace(delimiter, String.valueOf(arguments[i]));
            }
            i++;
        }
        return s;
    }"
6479689,none,"	protected MqttDeliveryToken restoreToken(MqttPublish message) {
		final String methodName = ""restoreToken"";
		MqttDeliveryToken token;
		synchronized(tokens) {
			String key = Integer.toString(message.getMessageId());
			if (this.tokens.containsKey(key)) {
				token = (MqttDeliveryToken)this.tokens.get(key);
				//@TRACE 302=existing key={0} message={1} token={2}
				log.fine(CLASS_NAME,methodName, ""302"",new Object[]{key, message,token});
			} else {
				token = new MqttDeliveryToken(logContext);
				token.internalTok.setKey(key);
				this.tokens.put(key, token);
				//@TRACE 303=creating new token key={0} message={1} token={2}
				log.fine(CLASS_NAME,methodName,""303"",new Object[]{key, message, token});
			}
		}
		return token;
	}"
7746473,none,"    @Override
    @Deprecated
    public void reset(org.apache.dubbo.common.Parameters parameters) {
        reset(getUrl().addParameters(parameters.getParameters()));
    }"
4157934,none,"      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }"
6078132,none,"    @Nonnull
    @Override
    public RetrieveFeaturesLiveCommandAnswerBuilder answer() {
        return RetrieveFeaturesLiveCommandAnswerBuilderImpl.newInstance(this);
    }"
6108350,none,"        @Override
        public boolean hasNext()
        {
            return this.currentIndex != CodePointAdapter.this.adapted.length();
        }"
8008599,none,"	public Class<? extends ContentAssistContext.Factory> bindContentAssistContext$Factory() {
		return DelegatingContentAssistContextFactory.class;
	}"
7787736,none,"		public long getTo()
		{
			if (getOf() == 0)
			{
				return 0;
			}
			return Math.min(getOf(), getFrom() + pageable.getItemsPerPage() - 1);
		}"
3782985,none,"    private static boolean parseMsAcmCodecPrivate(ParsableByteArray buffer) throws ParserException {
      try {
        int formatTag = buffer.readLittleEndianUnsignedShort();
        if (formatTag == WAVE_FORMAT_PCM) {
          return true;
        } else if (formatTag == WAVE_FORMAT_EXTENSIBLE) {
          buffer.setPosition(WAVE_FORMAT_SIZE + 6); // unionSamples(2), channelMask(4)
          return buffer.readLong() == WAVE_SUBFORMAT_PCM.getMostSignificantBits()
              && buffer.readLong() == WAVE_SUBFORMAT_PCM.getLeastSignificantBits();
        } else {
          return false;
        }
      } catch (ArrayIndexOutOfBoundsException e) {
        throw new ParserException(""Error parsing MS/ACM codec private"");
      }
    }"
6310723,none,"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (this.alias == null ? 0 : this.alias.hashCode());
        result = prime * result + (this.ciphers == null ? 0 : this.ciphers.hashCode());
        result = prime * result + (this.hostnameVerification ? 1231 : 1237);
        result = prime * result + (this.keyStore == null ? 0 : this.keyStore.hashCode());
        result = prime * result + Arrays.hashCode(this.keyStorePassword);
        result = prime * result + (this.protocol == null ? 0 : this.protocol.hashCode());
        result = prime * result + (this.sslManagerOpts == null ? 0 : this.sslManagerOpts.hashCode());
        result = prime * result + (this.trustStore == null ? 0 : this.trustStore.hashCode());
        return result;
    }"
8953503,none,"  private static SelectOperator genReduceSinkAndBacktrackSelect(Operator<?> input,
          ExprNodeDesc[] keys, int tag, ArrayList<ExprNodeDesc> partitionCols, String order,
          String nullOrder, int numReducers, Operation acidOperation, HiveConf hiveConf)
              throws SemanticException {
    return genReduceSinkAndBacktrackSelect(input, keys, tag, partitionCols, order, nullOrder,
        numReducers, acidOperation, hiveConf, input.getSchema().getColumnNames());
  }"
9350950,none,"    @Override
    public int compareTo(OffsetDateTime other) {
        int cmp = compareInstant(this, other);
        if (cmp == 0) {
            cmp = toLocalDateTime().compareTo(other.toLocalDateTime());
        }
        return cmp;
    }"
7022945,none,"    public Builder withAuthentication(final HttpAuth authentication) {
      this.authentication = authentication;
      return this;
    }"
4041399,none,"  @Override
  public PCollection<OutputT> expand(PCollection<InputT> input) {
    PCollection<KV<Long, InputT>> in;
    in = input.apply(getName(""wrap""), ParDo.of(new Wrap<>()));
    if (input.getTypeDescriptor() != null) {
      in =
          in.setTypeDescriptor(
              TypeDescriptors.kvs(TypeDescriptors.longs(), input.getTypeDescriptor()));
    }
    return timestampedTransform.apply(in);
  }"
6640728,none,"  public static void v(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3) {
    if (isLoggable(VERBOSE)) {
      v(cls, formatString(msg, arg1, arg2, arg3));
    }
  }"
9173375,none,"	protected void openHyperlink( HyperlinkInfo info )
	{
		if ( info == null )
		{
			return;
		}
		writer.openTag( ""w:hlink"" );
		if ( HyperlinkInfo.BOOKMARK == info.getType( ) )
		{
			writer.attribute( ""w:bookmark"", info.getUrl( ) );
		}
		else if ( HyperlinkInfo.HYPERLINK == info.getType( ) )
		{
			writer.attribute( ""w:dest"", info.getUrl( ) );
			if ( info.getBookmark( ) != null )
			{
				writer.attribute( ""w:bookmark"", info.getBookmark( ) );
			}
		}
		if ( info.getTooltip( ) != null )
		{
			writer.attribute( ""w:screenTip"", info.getTooltip( ) );
		}
	}"
4716573,none,"        public IDataType getElemType() {
            return elemType;
        }"
7656657,none,"	private static Ciphertext toCiphertext(String ciphertext,
			@Nullable VaultTransitContext context) {
		return context != null ? Ciphertext.of(ciphertext).with(context) : Ciphertext
				.of(ciphertext);
	}"
9150816,none,"	protected void buildContent( )
	{

		// Defines provider.

		IDescriptorProvider nameProvider = new TextPropertyDescriptorProvider( IDesignElementModel.NAME_PROP,
				ReportDesignConstants.VARIABLE_ELEMENT );

		// Defines section.

		TextSection nameSection = new TextSection( nameProvider.getDisplayName( ),
				container,
				true );

		nameSection.setProvider( nameProvider );
		nameSection.setLayoutNum( 6 );
		nameSection.setWidth( 500 );
		addSection( PageSectionId.VARIABLE_NAME, nameSection ); //$NON-NLS-1$

		ComboPropertyDescriptorProvider variableTypeProvider = new ComboPropertyDescriptorProvider( IVariableElementModel.TYPE_PROP,
				ReportDesignConstants.VARIABLE_ELEMENT );
		variableTypeProvider.enableReset( true );

		ComboSection variableTypeSection = new ComboSection( variableTypeProvider.getDisplayName( ),
				container,
				true );
		variableTypeSection.setProvider( variableTypeProvider );
		variableTypeSection.setLayoutNum( 6 );
		variableTypeSection.setWidth( 500 );
		addSection( PageSectionId.VARIABLE_TYPE, variableTypeSection );

		ExpressionPropertyDescriptorProvider variableValueProvider = new ExpressionPropertyDescriptorProvider( IVariableElementModel.VALUE_PROP,
				ReportDesignConstants.VARIABLE_ELEMENT );
		ExpressionSection variableValueSection = new ExpressionSection( variableValueProvider.getDisplayName( ),
				container,
				true );
		variableValueSection.setMulti(false);
		variableValueSection.setProvider( variableValueProvider );
		variableValueSection.setWidth( 500 );
		variableValueSection.setLayoutNum( 6 );
		addSection( PageSectionId.VARIABLE_VALUE, variableValueSection );

	}"
6173466,none,"  private void addConfigPropertyToXML(String name, String value) {
    if (configuration().containsKey(name)) {
      pluginElement.getSingleChild(""configuration"").getSingleChild(name).setText(value);
    } else if (configuration.isEmpty()) {
      pluginElement.appendChild(createElement(""configuration"", createElement(name, value)));
    } else {
      pluginElement.getSingleChild(""configuration"").appendChild(createElement(name, value));
    }
  }"
5655899,none,"        @Override
        public V setValue(final V value) {
            if (value != null) {
                throw new UnsupportedOperationException();
            }
            final V old = get();
            dispose();
            return old;
        }"
7332512,none,"        @Override
        public Image getColumnImage(final Object element, final int columnIndex) {
            if (!(element instanceof BuildDefinitionReference) || columnIndex > 0) {
                return null;
            }

            final BuildDefinitionReference definition = (BuildDefinitionReference) element;
            return imageHelper.getBuildDefinitionImage(definition);
        }"
8618517,none,"    @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {
        reader.setBuffer(buf);

        if (!reader.beforeMessageRead())
            return false;

        if (!super.readFrom(buf, reader))
            return false;

        switch (reader.state()) {
            case 3:
                futId = reader.readLong(""futId"");

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

            case 4:
                locksArr = reader.readObjectArray(""locksArr"", MessageCollectionItemType.MSG, TxLockList.class);

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

            case 5:
                nearTxKeysArr = reader.readObjectArray(""nearTxKeysArr"", MessageCollectionItemType.MSG, IgniteTxKey.class);

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

            case 6:
                txKeysArr = reader.readObjectArray(""txKeysArr"", MessageCollectionItemType.MSG, IgniteTxKey.class);

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

        }

        return reader.afterMessageRead(TxLocksResponse.class);
    }"
7645267,none,"	public MultiValueMap<String, String> toMap() {
		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();
		if (limit != null) { map.set(""limit"", String.valueOf(limit)); }
		if (offset != null) { map.set(""offset"", String.valueOf(offset)); }
		if (since != null) { map.set(""since"", String.valueOf(since)); }
		if (until != null) { map.set(""until"", String.valueOf(until)); }
		if (after != null) { map.set(""after"", after); }
		if (before != null) { map.set(""before"", before); }
		if (pagingToken != null) { map.set(""__paging_token"", pagingToken); }
		return map;
	}"
8948928,none,"    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TXN_ID
          return TXN_ID;
        case 2: // WRITE_ID
          return WRITE_ID;
        case 3: // DB
          return DB;
        case 4: // TABLE
          return TABLE;
        case 5: // FILE_INFO
          return FILE_INFO;
        case 6: // PARTITION_VALS
          return PARTITION_VALS;
        default:
          return null;
      }
    }"
7403028,none,"    @Override
    public void visitFullInfopointNode(FullInfopointNode i) {
        if (i.getState() != null && i.getState().bci == BytecodeFrame.AFTER_BCI) {
            i.getDebug().log(""Ignoring InfopointNode for AFTER_BCI"");
        } else {
            super.visitFullInfopointNode(i);
        }
    }"
8895511,none,"    private void alterTableStatsForTruncate(RawStore ms, String catName, String dbName,
        String tableName, Table table, List<String> partNames,
        String validWriteIds, long writeId) throws Exception {
      if (partNames == null) {
        if (0 != table.getPartitionKeysSize()) {
          for (Partition partition : ms.getPartitions(catName, dbName, tableName, Integer.MAX_VALUE)) {
            alterPartitionForTruncate(ms, catName, dbName, tableName, table, partition,
                validWriteIds, writeId);
          }
        } else {
          EnvironmentContext environmentContext = new EnvironmentContext();
          updateStatsForTruncate(table.getParameters(), environmentContext);

          if (!transactionalListeners.isEmpty()) {
            MetaStoreListenerNotifier.notifyEvent(transactionalListeners,
                    EventType.ALTER_TABLE,
                    new AlterTableEvent(table, table, true, true,
                            writeId, this));
          }

          if (!listeners.isEmpty()) {
            MetaStoreListenerNotifier.notifyEvent(listeners,
                    EventType.ALTER_TABLE,
                    new AlterTableEvent(table, table, true, true,
                            writeId, this));
          }

          // TODO: this should actually pass thru and set writeId for txn stats.
          if (writeId > 0) {
            table.setWriteId(writeId);
          }
          alterHandler.alterTable(ms, wh, catName, dbName, tableName, table,
              environmentContext, this, validWriteIds);
        }
      } else {
        for (Partition partition : ms.getPartitionsByNames(catName, dbName, tableName, partNames)) {
          alterPartitionForTruncate(ms, catName, dbName, tableName, table, partition,
              validWriteIds, writeId);
        }
      }
      return;
    }"
4767234,none,"    public RpcRequestMessageWrapper(
        RpcRequestHeaderProto requestHeader, Message theRequest) {
      super(requestHeader, theRequest);
    }"
5469798,none,"    @Override
    public Provider createProvider(URI remoteURI, ProviderFutureFactory futureFactory) throws Exception {
        CompositeData composite = URISupport.parseComposite(remoteURI);
        Map<String, String> options = composite.getParameters();

        Map<String, String> filtered = PropertyUtil.filterProperties(options, FAILOVER_OPTION_PREFIX);
        Map<String, String> nested = PropertyUtil.filterProperties(filtered, FAILOVER_NESTED_OPTION_PREFIX_ADDON);

        Map<String, String> providerOptions = PropertyUtil.filterProperties(options, ""provider."");
        // If we have been given a futures factory to use then we ignore any URI options indicating
        // what to create and just go with what we are given.
        if (futureFactory == null) {
            // Create a configured ProviderFutureFactory for use by the resulting AmqpProvider
            futureFactory = ProviderFutureFactory.create(providerOptions);
            if (!providerOptions.isEmpty()) {
                String msg = """"
                    + "" Not all Provider options could be applied during Failover Provider creation.""
                    + "" Check the options are spelled correctly.""
                    + "" Unused parameters=["" + providerOptions + ""].""
                    + "" This provider instance cannot be started."";
                throw new IllegalArgumentException(msg);
            }
        }

        FailoverProvider provider = new FailoverProvider(composite.getComponents(), nested, futureFactory);
        Map<String, String> unused = PropertyUtil.setProperties(provider, filtered);
        if (!unused.isEmpty()) {
            String msg = """"
                + "" Not all options could be set on the Failover provider.""
                + "" Check the options are spelled correctly.""
                + "" Unused parameters=["" + unused + ""].""
                + "" This Provider cannot be started."";
            throw new IllegalArgumentException(msg);
        }

        return provider;
    }"
8777301,none,"    @Override //Object
    public int hashCode() {
      int result = 1;
      result = PRIME * result
          + ((serverAddress == null) ? 0 : serverAddress.hashCode());
      result = PRIME * result + ((protocol == null) ? 0 : protocol.hashCode());
      result = PRIME * result + ((rpcKind == null) ? 0 : rpcKind.hashCode());
      return result;
    }"
4426916,none,"    @Override
    public EagleServiceBaseClient silence(boolean silence) {
        this.silence = silence;
        return this;
    }"
7185831,none,"        public Builder copy(ListVolumeGroupBackupsResponse o) {
            opcNextPage(o.getOpcNextPage());
            opcRequestId(o.getOpcRequestId());
            items(o.getItems());

            return this;
        }"
6009473,none,"    public Integer getCompressType() {
        if (compressType == null) {
            compressType = 0;
        }
        return compressType;
    }"
8833156,none,"    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }"
4866077,none,"    @Override
    public boolean removeCheckpoint(String name) {
        checkNotNull(name);

        // try 5 times
        for (int i = 0; i < 5; i++) {
            if (commitSemaphore.tryAcquire()) {
                try {
                    refreshHead(true);

                    SegmentNodeState state = head.get();
                    SegmentNodeBuilder builder = state.builder();

                    NodeBuilder cp = builder.child(""checkpoints"").child(name);
                    if (cp.exists()) {
                        cp.remove();
                        SegmentNodeState newState = builder.getNodeState();
                        if (revisions.setHead(state.getRecordId(), newState.getRecordId())) {
                            refreshHead(false);
                            return true;
                        }
                    }
                } finally {
                    commitSemaphore.release();
                }
            }
        }
        return false;
    }"
7864012,none,"  public static EvictionAction parseAction(String s) {
    if (s == null)
      return NONE;
    if (s.length() < 1)
      return NONE;
    for (int i = 0; i < stringTable.length; ++i) {
      if (s.equals(stringTable[i])) {
        return enumValueTable[i];
      }
    }
    return NONE;
  }"
5871338,none,"	public void initializeDefaultPreferences() {
		IPreferenceStore store = CasEditorIdePlugin.getDefault().getPreferenceStore();
		store.setDefault(CasEditorIdePreferenceConstants.CAS_IMPORT_WIZARD_LAST_USED_LANG,
		        CAS.DEFAULT_LANGUAGE_NAME);
		
		store.setDefault(CasEditorIdePreferenceConstants.CAS_IMPORT_WIZARD_LAST_USED_ENCODINGS,
		        Charset.defaultCharset().displayName());
		
    store.setDefault(CasEditorIdePreferenceConstants.CAS_EDITOR_REMEMBER_TYPESYSTEM, true);
		
	}"
7026461,none,"  private int addManualRecord(Airing recAir, UIClient uiClient)
  {
    // Check to make sure we have an encoder that can receive this station
    Set<EncoderState> tryUs = new HashSet<EncoderState>(encoderStateMap.values());
    Iterator<EncoderState> walker = tryUs.iterator();
    // We only need to worry about conflicts with other recordings that occur within the same set of stations. If
    // encoder A has no intersection with the stations on encoder B; then there's no reason to prompt about conflicts from
    // that tuner since it won't help resolve scheduling issues. So this set will be all the stations that either directly or
    // indirectly could resolve a conflict with the new recording.
    // Due to the indirect nature of this; we have to keep checking through the encoders until this set stops growing in size
    Set<Integer> unifiedStationSet = new HashSet<Integer>();
    boolean encoderExists = false;
    while (walker.hasNext())
    {
      EncoderState es = walker.next();
      synchronized (es.stationSet) {
        if (es.stationSet.contains(recAir.stationID))
        {
          encoderExists = true;
          unifiedStationSet.addAll(es.stationSet);
          walker.remove(); // to avoid redundant checking below
          break;
        }
      }
    }
    if (!encoderExists)
      return VideoFrame.WATCH_FAILED_NO_ENCODERS_HAVE_STATION;

    int lastSetSize;
    do
    {
      lastSetSize = unifiedStationSet.size();
      walker = tryUs.iterator();
      while (walker.hasNext())
      {
        EncoderState es = walker.next();
        synchronized (es.stationSet) {
          if (unifiedStationSet.removeAll(es.stationSet))
          {
            // There was an intersection, so use all of these stations, then ignore this one for later
            unifiedStationSet.addAll(es.stationSet);
            walker.remove();
          }
        }
      }

    } while (lastSetSize != unifiedStationSet.size() && !tryUs.isEmpty());

    long defaultStartPadding = Sage.getLong(""default_mr_start_padding"", 0);
    long defaultStopPadding = Sage.getLong(""default_mr_stop_padding"", 0);
    long requestedStart = recAir.getStartTime() - defaultStartPadding;
    long requestedStop = recAir.getEndTime() + defaultStopPadding;
    long requestedDuration = requestedStop - requestedStart;

    Airing schedAir = recAir;
    if (defaultStartPadding != 0 || defaultStopPadding != 0)
    {
      schedAir = new Airing(0);
      schedAir.time = requestedStart;
      schedAir.duration = requestedDuration;
      schedAir.stationID = recAir.stationID;
      schedAir.showID = recAir.showID;
    }
    Vector<Airing> parallelRecords = new Vector<Airing>();
    Vector<Airing> lastParallel = null;
    do
    {
      parallelRecords.clear();
      ManualRecord[] manualMustSee = wiz.getManualRecordsSortedByTime();
      Vector<ManualRecord> parallelRecurs = new Vector<ManualRecord>();
      for (int i = 0; i < manualMustSee.length; i++)
      {
        ManualRecord currRec = manualMustSee[i];
        if (currRec.getContentAiring() == recAir)
          return VideoFrame.WATCH_OK;
        if (currRec.getEndTime() <= Sage.time()) continue;
        if (currRec.doRecurrencesOverlap(requestedStart, requestedDuration, 0))
        {
          parallelRecords.addElement(manualMustSee[i].getSchedulingAiring());
          if (currRec.recur != 0)
            parallelRecurs.add(currRec);
          else
            parallelRecurs.add(null);
        }
      }

      if (parallelRecords.isEmpty()) break;

      parallelRecords.addElement(schedAir);
      parallelRecurs.add(null);
      if (sched.testMultiTunerSchedulingPermutation(parallelRecords))
        break;
      // Remove any recurrence duplicates from the parallel list that is presented to the user
      for (int i = 0; i < parallelRecurs.size(); i++)
      {
        ManualRecord currRecur = parallelRecurs.get(i);
        if (currRecur == null) continue;
        for (int j = 0; j < parallelRecords.size(); j++)
        {
          if (i == j || parallelRecurs.get(j) == null) continue;

          ManualRecord otherRecur = parallelRecurs.get(j);
          if (currRecur.stationID == otherRecur.stationID && currRecur.duration == otherRecur.duration &&
              currRecur.recur == otherRecur.recur && currRecur.isSameRecurrence(otherRecur.startTime))
          {
            parallelRecurs.remove(j);
            parallelRecords.remove(j);
            j--;
          }
        }
      }

      // Conflict exists, we need to kill a recording that's on an encoder that's capable
      // of recording this
      // Conflict resolution, ask about what you're going to kill
      parallelRecords.remove(schedAir);

      // Remove any items from the conflict options that would not end up in station set overlap either directly or indirectly
      for (int i = 0; i < parallelRecords.size(); i++)
        if (!unifiedStationSet.contains(parallelRecords.get(i).stationID))
          parallelRecords.remove(i--);

      // If we have the same conflicts as when we just checked, then bail. Most likely they
      // aren't processing the Hook correctly and we'll be in an infinite loop.
      if (lastParallel != null && parallelRecords.equals(lastParallel))
        return VideoFrame.WATCH_FAILED_USER_REJECTED_CONFLICT;
      Object hookRes = (uiClient == null) ? null : uiClient.processUIClientHook(""RecordRequestScheduleConflict"", new Object[] { recAir, parallelRecords });
      if (!(hookRes instanceof Boolean) || !((Boolean) hookRes))
        return VideoFrame.WATCH_FAILED_USER_REJECTED_CONFLICT;
      lastParallel = new Vector<Airing>(parallelRecords);
    } while (true);

    ManualRecord newMR;
    if (schedAir.getStartTime() < Sage.time())
    {
      int[] errorReturn = new int[1];
      EncoderState es = findBestEncoderForNow(schedAir, true, uiClient, errorReturn);
      if (es == null)
      {
        if (errorReturn[0] == 0)
          errorReturn[0] = VideoFrame.WATCH_FAILED_GENERAL_CANT_FIND_ENCODER;
        return errorReturn[0];
      }
      synchronized (this)
      {
        es = checkForFoundBestEncoderNowRecordSwitch(es, recAir);
        // Set the acquisition state to manual if it has already started recording
        MediaFile mf = wiz.getFileForAiring(recAir);
        if (mf != null)
          mf.setAcquisitionTech(MediaFile.ACQUISITION_MANUAL);
        newMR = wiz.addManualRecord(requestedStart, requestedDuration, 0, recAir.stationID,
            """", """", recAir.id, 0);
        es.forceWatch = newMR.getSchedulingAiring();
        es.forceProcessed = false;
        work();
      }
    }
    else
      newMR = wiz.addManualRecord(requestedStart, requestedDuration, 0, recAir.stationID,
          """", """", recAir.id, 0);
    PluginEventManager.postEvent(PluginEventManager.MANUAL_RECORD_ADDED,
        new Object[] { PluginEventManager.VAR_AIRING, newMR.getSchedulingAiring() });
    return VideoFrame.WATCH_OK;
  }"
5979331,none,"    private void convertToMavenProject(final IProject project) throws InterruptedException {
        Job job = new Job(""Enable Maven nature."") {

            @Override
            protected IStatus run(IProgressMonitor monitor) {
                try {
                    ResolverConfiguration configuration = new ResolverConfiguration();
                    configuration.setResolveWorkspaceProjects(true);
                    configuration.setSelectedProfiles(""""); //$NON-NLS-1$

                    final boolean hasMavenNature = project
                            .hasNature(IMavenConstants.NATURE_ID);

                    IProjectConfigurationManager configurationManager = MavenPlugin
                            .getProjectConfigurationManager();

                    configurationManager.enableMavenNature(project,
                            configuration, monitor);

                    if (!hasMavenNature) {
                        configurationManager.updateProjectConfiguration(
                                project, monitor);
                    }
                } catch (CoreException ex) {
                    AwsToolkitCore.getDefault().reportException(ex.getMessage(), ex);
                }
                return Status.OK_STATUS;
            }
        };
        job.schedule();
        job.join();
    }"
7759298,none,"  @Override
  public String toString()
  {
    return ""SegmentListUnusedAction{"" +
           ""dataSource='"" + dataSource + '\'' +
           "", interval="" + interval +
           '}';
  }"
9097958,none,"    @Specialization
    protected RIntVector match(RAbstractRawVector x, @SuppressWarnings(""unused"") RAbstractComplexVector table, @SuppressWarnings(""unused"") int nomatch) {
        return RDataFactory.createIntVector(x.getLength(), true);
    }"
7032580,none,"    public boolean needsConnectionLeftOpen() {
        return false;
    }"
5841731,none,"    public void setLogArgs(boolean logArgs) {
        this.logArgs = logArgs;
    }"
6329418,none,"    public AdvertisingReportEventType getEventType() {
        return this.eventType;
    }"
4236060,none,"    public void setDefaultTestOnCreate(final boolean testOnCreate) {
        assertInitializationAllowed();
        this.defaultTestOnCreate = testOnCreate;
    }"
8779700,none,"    @Override
    public void setKeyComparator(Class<? extends WritableComparator> cmpcl) {
      super.setKeyComparator(cmpcl);
      for (Node n : kids) {
        n.setKeyComparator(cmpcl);
      }
    }"
6446899,none,"	public void delete(UserInfo user) throws CoreException {
		JSONObject sites = getSites(user);
		if (!sites.has(getId())) {
			//nothing to do, site does not exist
			return;
		}
		sites.remove(getId());
		user.setProperty(SiteConfigurationConstants.KEY_SITE_CONFIGURATIONS, sites.toString());
		OrionConfiguration.getMetaStore().updateUser(user);
	}"
5855589,none,"    @Override
    public void endAccess() {
        super.endAccess() ;
        if(manager instanceof ClusterManagerBase) {
            ((ClusterManagerBase)manager).registerSessionAtReplicationValve(this);
        }
    }"
5893533,none,"    @Override
    public Collection<Class> getMessageTypes() {
        return new ArrayList() {{
            add( QueueGetRequest.class );
            add( QueueInitRequest.class );
            add( QueueRefreshRequest.class );
            add( QueueTimeoutRequest.class );
            add( ShardCheckRequest.class );
        }};
    }"
8615469,none,"    ClientCacheQueryResponse(long requestId, ClientCacheQueryCursor cursor) {
        super(requestId);

        assert cursor != null;

        this.cursor = cursor;
    }"
8186858,none,"    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {

        ControlCommand info = (ControlCommand)o;

        int rc = super.tightMarshal1(wireFormat, o, bs);
        rc += tightMarshalString1(info.getCommand(), bs);

        return rc + 0;
    }"
5358686,none,"	public List<Description> getDescriptions() {
		if (descriptions == null) {
			descriptions = new ArrayList<Description>();
		}
		return this.descriptions;
	}"
8601907,none,"  void updateCachedLocationOnError(HRegionLocation loc, Throwable exception) {
    AsyncRegionLocatorHelper.updateCachedLocationOnError(loc, exception, this::getCachedLocation,
      this::addLocationToCache, this::removeLocationFromCache);
  }"
5559770,none,"  private boolean isPrivilegeForResource(TSentryPrivilege tSentryPrivilege, Resource resource) {
    final java.util.Iterator<TAuthorizable> authorizablesIterator = tSentryPrivilege.getAuthorizablesIterator();
    while (authorizablesIterator.hasNext()) {
      TAuthorizable tAuthorizable = authorizablesIterator.next();
      if (tAuthorizable.getType().equals(resource.resourceType().name())) {
        return true;
      }
    }
    return false;
  }"
5305545,none,"    protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt,
        SQLBuffer sql) throws SQLException {
        return stmnt.executeQuery();
    }"
7893182,none,"  private HeaderMap(Bucket[] buckets, byte[] stringTable, int numEntries, int maxValueLength) {
    Preconditions.checkArgument(buckets.length > 0, ""The number of buckets must be greater than 0"");
    Preconditions.checkArgument(
        (buckets.length & (buckets.length - 1)) == 0, ""The number of buckets must be a power of 2"");

    this.buckets = buckets;
    this.stringBytes = stringTable;
    this.numEntries = numEntries;
    this.maxValueLength = maxValueLength;
  }"
4809381,none,"    @SuppressWarnings(""unchecked"")
    private void extractDataAndSave(IBatchDAO batchDAO) {
        if (logger.isDebugEnabled()) {
            logger.debug(""Extract data and save"");
        }

        long startTime = System.currentTimeMillis();
        try {
            HistogramMetric.Timer timer = prepareLatency.createTimer();

            List batchAllCollection = new LinkedList();
            try {
                List<PersistenceWorker> persistenceWorkers = new ArrayList<>();
                persistenceWorkers.addAll(IndicatorProcess.INSTANCE.getPersistentWorkers());
                persistenceWorkers.addAll(RecordProcess.INSTANCE.getPersistentWorkers());
                persistenceWorkers.addAll(TopNProcess.INSTANCE.getPersistentWorkers());

                persistenceWorkers.forEach(worker -> {
                    if (logger.isDebugEnabled()) {
                        logger.debug(""extract {} worker data and save"", worker.getClass().getName());
                    }

                    if (worker.flushAndSwitch()) {
                        List<?> batchCollection = worker.buildBatchCollection();

                        if (logger.isDebugEnabled()) {
                            logger.debug(""extract {} worker data size: {}"", worker.getClass().getName(), batchCollection.size());
                        }
                        batchAllCollection.addAll(batchCollection);
                    }
                });

                if (debug) {
                    logger.info(""build batch persistence duration: {} ms"", System.currentTimeMillis() - startTime);
                }
            } finally {
                timer.finish();
            }

            HistogramMetric.Timer executeLatencyTimer = executeLatency.createTimer();
            try {
                batchDAO.batchPersistence(batchAllCollection);
            } finally {
                executeLatencyTimer.finish();
            }
        } catch (Throwable e) {
            errorCounter.inc();
            logger.error(e.getMessage(), e);
        } finally {
            if (logger.isDebugEnabled()) {
                logger.debug(""persistence data save finish"");
            }
        }

        if (debug) {
            logger.info(""batch persistence duration: {} ms"", System.currentTimeMillis() - startTime);
        }
    }"
7619442,none,"		@Override
		public final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
			try {
				doit(monitor);
			} catch (InterruptedException e) {
				throw e;
			} catch (OperationCanceledException e) {
				throw new InterruptedException(""Canceled by user"");
			} catch (InvocationTargetException e) {
				throw e;
			} catch (Throwable e) {
				throw new InvocationTargetException(e);
			}
		}"
8049607,none,"	public Referenced_Template(final CompilationTimeStamp timestamp, final SpecificValue_Template original) {
		copyGeneralProperties(original);
		final IValue value = original.getSpecificValue();
		switch (value.getValuetype()) {
		case REFERENCED_VALUE:
			reference = ((Referenced_Value) value).getReference();
			break;
		case UNDEFINED_LOWERIDENTIFIER_VALUE:
			final Identifier identifier = ((Undefined_LowerIdentifier_Value) value).getIdentifier();
			final FieldSubReference subReference = new FieldSubReference(identifier);
			subReference.setLocation(value.getLocation());
			reference = new Reference(null);
			reference.addSubReference(subReference);
			reference.setLocation(value.getLocation());
			reference.setFullNameParent(this);
			reference.setMyScope(value.getMyScope());
			break;
		default:
			reference = null;
			break;
		}
	}"
8225151,none,"	public IGrammarAwareElementType getPRFNamed_RefAssignment_1_0_1ElementType() {
		return PRFNamed_RefAssignment_1_0_1_ELEMENT_TYPE;
	}"
8132913,none,"	public SerializerOptions(boolean format, boolean validateConcreteSyntax) {
		super();
		this.formatting = format;
		this.validateConcreteSyntax = validateConcreteSyntax;
	}"
5127922,none,"    private void deleteIndexFiles( boolean full )
        throws IOException
    {
        if ( indexDirectory != null )
        {
            String[] names = indexDirectory.listAll();

            if ( names != null )
            {

                for ( String name : names )
                {
                    if ( !( name.equals( INDEX_PACKER_PROPERTIES_FILE )
                        || name.equals( INDEX_UPDATER_PROPERTIES_FILE ) ) )
                    {
                        indexDirectory.deleteFile( name );
                    }
                }
            }

            if ( full )
            {
                try
                {
                    indexDirectory.deleteFile( INDEX_PACKER_PROPERTIES_FILE );
                }
                catch ( IOException ioe )
                {
                    //Does not exist
                }

                try
                {
                    indexDirectory.deleteFile( INDEX_UPDATER_PROPERTIES_FILE );
                }
                catch ( IOException ioe )
                {
                    //Does not exist
                }
            }

            IndexUtils.deleteTimestamp( indexDirectory );
        }
    }"
7969235,none,"	public void setProp2(String prop2) {
		this.prop2 = prop2;
	}"
3918943,none,"    private ApplicationDTO buildApplicationDTO(
        ApplicationRuntimeInformation ari) {

        ApplicationDTO applicationDTO = new ApplicationDTO(){};

        applicationDTO.name = getServiceName(
            ari._cachingServiceReference::getProperty);
        applicationDTO.base = _whiteboard.getApplicationBase(
            ari._cachingServiceReference::getProperty);
        applicationDTO.serviceId =
            (Long)ari._cachingServiceReference.getProperty(""service.id"");

        applicationDTO.resourceDTOs = getApplicationEndpointsStream(
            applicationDTO.name).toArray(
                ResourceDTO[]::new
            );

        applicationDTO.extensionDTOs = getApplicationExtensionsStream(
            applicationDTO.name).toArray(
                ExtensionDTO[]::new
            );

        Map<String, Set<ExtensionDTO>> nameBoundExtensions =
            new HashMap<>();

        Map<ExtensionDTO, Set<ResourceDTO>> extensionResources =
            new HashMap<>();

        for (ExtensionDTO extensionDTO : applicationDTO.extensionDTOs) {
            if (extensionDTO.nameBindings == null) {
                continue;
            }

            for (String nameBinding : extensionDTO.nameBindings) {
                Set<ExtensionDTO> extensionDTOS =
                    nameBoundExtensions.computeIfAbsent(
                        nameBinding,
                        __ -> new HashSet<>()
                );

                extensionDTOS.add(extensionDTO);
            }
        }

        for (ResourceDTO resourceDTO : applicationDTO.resourceDTOs) {
            for (ResourceMethodInfoDTO resourceMethodInfo :
                resourceDTO.resourceMethods) {

                if (resourceMethodInfo.nameBindings == null) {
                    continue;
                }

                for (String nameBinding : resourceMethodInfo.nameBindings) {
                    Set<ExtensionDTO> extensionDTOS = nameBoundExtensions.get(
                        nameBinding);

                    if (extensionDTOS != null) {
                        for (ExtensionDTO extensionDTO : extensionDTOS) {
                            Set<ResourceDTO> resourceDTOS =
                                extensionResources.computeIfAbsent(
                                    extensionDTO, __ -> new HashSet<>());

                            resourceDTOS.add(resourceDTO);
                        }
                    }
                }
            }
        }

        extensionResources.forEach(
            (extensionDTO, resourceDTOS) ->
                extensionDTO.filteredByName = resourceDTOS.toArray(
                    new ResourceDTO[0])
        );

        CxfJaxrsServiceRegistrator cxfJaxRsServiceRegistrator =
            ari._cxfJaxRsServiceRegistrator;

        Bus bus = cxfJaxRsServiceRegistrator.getBus();
        Iterable<Class<?>> resourceClasses =
            cxfJaxRsServiceRegistrator.getStaticResourceClasses();

        ArrayList<ResourceMethodInfoDTO> resourceMethodInfoDTOS =
            new ArrayList<>();

        for (Class<?> resourceClass : resourceClasses) {
            resourceMethodInfoDTOS.addAll(
                ClassIntrospector.getResourceMethodInfos(resourceClass, bus));
        }

        applicationDTO.resourceMethods = resourceMethodInfoDTOS.toArray(
            new ResourceMethodInfoDTO[0]);

        return applicationDTO;
    }"
8092397,none,"	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Bug250313Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Bug250313Package.CHILD1:
				sequence_Child1(context, (Child1) semanticObject); 
				return; 
			case Bug250313Package.CHILD2:
				sequence_Child2(context, (Child2) semanticObject); 
				return; 
			case Bug250313Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}"
6989671,none,"  public static String generateSourceMaps(
      Type type, Map<SourcePosition, SourcePosition> javaSourcePositionByOutputSourcePosition)
      throws IOException {
    return renderSourceMapToString(type, javaSourcePositionByOutputSourcePosition);
  }"
8417770,none,"    public void setServiceSelector(String serviceSelector) {
        this.serviceSelector = serviceSelector;
    }"
4332339,none,"    public LdapClassLoader( DirectoryService directoryService ) throws LdapException
    {
        super( LdapClassLoader.class.getClassLoader() );
        this.directoryService = directoryService;
        defaultSearchDn = directoryService.getDnFactory().create( DEFAULT_SEARCH_CONTEXTS_CONFIG );

        objectClassAT = directoryService.getSchemaManager().getAttributeType( SchemaConstants.OBJECT_CLASS_AT );
    }"
7092657,none,"    public int next()
    {
      final int startNode = _startNode;
      if (_startNode == NULL) {
        return NULL;
      }

      int node = _currentNode;

      int expType;
      final int nodeType = _nodeType;

      if (nodeType != DTM.ELEMENT_NODE)
      {
        do
        {
          node++;
	  expType = _exptype2(node);

          if (NULL == expType || _parent2(node) < startNode && startNode != node) {
            _currentNode = NULL;
            return END;
          }
        }
        while (expType != nodeType);
      }
      // %OPT% If the start node is root (e.g. in the case of //node),
      // we can save the isDescendant() check, because all nodes are
      // descendants of root.
      else if (startNode == DTMDefaultBase.ROOTNODE)
      {
	do
	{
	  node++;
	  expType = _exptype2(node);

	  if (NULL == expType) {
	    _currentNode = NULL;
	    return END;
	  }
	} while (expType < DTM.NTYPES
	        || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);
      }
      else
      {
        do
        {
          node++;
	  expType = _exptype2(node);

          if (NULL == expType || _parent2(node) < startNode && startNode != node) {
            _currentNode = NULL;
            return END;
          }
        }
        while (expType < DTM.NTYPES
	       || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);
      }

      _currentNode = node;
      return returnNode(makeNodeHandle(node));
    }"
7743791,none,"    private static boolean isMulticastAddress(String ip) {
        int i = ip.indexOf('.');
        if (i > 0) {
            String prefix = ip.substring(0, i);
            if (StringUtils.isInteger(prefix)) {
                int p = Integer.parseInt(prefix);
                return p >= 224 && p <= 239;
            }
        }
        return false;
    }"
6913795,none,"  @Override
  public void enable() {
    lastBufferEvaluationMs = C.TIME_UNSET;
  }"
4217323,none,"    public FacesWebContext(FacesContext context) {
        initialize(context);
    }"
9158643,none,"	public void run( IAction action )
	{
		if ( !preGenerate( ) )
		{
			return;
		}

		IFile file = getSelectedFile( );
		if ( file != null )
		{
			String url = file.getLocation( ).toOSString( );

			Map options = new HashMap( );
			options.put( WebViewer.RESOURCE_FOLDER_KEY,
					ReportPlugin.getDefault( )
							.getResourceFolder( file.getProject( ) ) );
			options.put( WebViewer.SERVLET_NAME_KEY, WebViewer.VIEWER_DOCUMENT );

			Object adapter = ElementAdapterManager.getAdapter( action,
					IPreviewAction.class );

			if ( adapter instanceof IPreviewAction )
			{
				IPreviewAction delegate = (IPreviewAction) adapter;

				delegate.setProperty( IPreviewConstants.REPORT_PREVIEW_OPTIONS,
						options );
				delegate.setProperty( IPreviewConstants.REPORT_FILE_PATH, url );

				delegate.run( );

				return;
			}

			try
			{
				WebViewer.display( url, options );
			}
			catch ( Exception e )
			{
				ExceptionUtil.handle( e );
				return;
			}
		}
		else
		{
			action.setEnabled( false );
		}
	}"
8971685,none,"    @Override
    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
      Scorer scorer = scorer(context);
      if (scorer != null) {
        int newDoc = scorer.iterator().advance(doc);
        if (newDoc == doc) {
          final float freq;
          if (scorer instanceof BM25FScorer) {
            freq = ((BM25FScorer) scorer).freq();
          } else {
            assert scorer instanceof TermScorer;
            freq = ((TermScorer) scorer).freq();
          }
          final MultiNormsLeafSimScorer docScorer =
              new MultiNormsLeafSimScorer(simWeight, context.reader(), fieldAndWeights.values(), true);
          Explanation freqExplanation = Explanation.match(freq, ""termFreq="" + freq);
          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
          return Explanation.match(
              scoreExplanation.getValue(),
              ""weight("" + getQuery() + "" in "" + doc + "") [""
                  + similarity.getClass().getSimpleName() + ""], result of:"",
              scoreExplanation);
        }
      }
      return Explanation.noMatch(""no matching term"");
    }"
4783162,none,"    public static String getACZK(Configuration conf) {
        return conf.get(AC_ZK_PROP);
    }"
9248421,none,"    protected SignatureVisitor createSignatureRemapper(final SignatureVisitor signatureVisitor) {
        return new SignatureRemapper(signatureVisitor, this);
    }"
4116762,none,"    private void onContainerAdded(Entity container, boolean rebalanceNow) {
        subscriptions().subscribe(container, Attributes.LOCATION_CHANGED, eventHandler);
        Location location = locationFinder.apply(container);
        
        if (LOG.isTraceEnabled()) LOG.trace(""{} recording addition of container {} in location {}"", new Object[] {this, container, location});
        model.onContainerAdded(container, location);
        
        if (rebalanceNow) scheduleLatencyReductionJig();
    }"
9453064,none,"  int[][] burst() {
    int[][] result = new int[4][];

    result[WALLCLOCK_TIME_INDEX] = progressWallclockTime.getValues();
    result[CPU_TIME_INDEX] = progressCPUTime.getValues();
    result[VIRTUAL_MEMORY_KBYTES_INDEX] = progressVirtualMemoryKbytes.getValues();
    result[PHYSICAL_MEMORY_KBYTES_INDEX] = progressPhysicalMemoryKbytes.getValues();

    return result;
  }"
4467152,none,"  public FileSystem getFs() {
    return fs;
  }"
5014423,none,"  public XFlattenedColumnTable(XFlattenedColumns flattenedColumns, String table) {
    this.table = table;
    for (XFlattenedColumn column : flattenedColumns.getFlattenedColumn()) {
      XField field = firstNonNull(column.getDimAttribute(), column.getMeasure(), column.getExpression());
      if (field != null) {
        if (!tables.containsKey(field.getClass())) {
          tables.put(field.getClass(), CollectionTableFactory.getCollectionTable(field.getClass(), table));
        }
        tables.get(field.getClass()).getCollection().add(column);
      } else {
        if (column.getChainName() != null) {
          chainNames.add(column.getChainName());
        }
        if (column.getTableName() != null) {
          tableNames.add(column.getTableName());
        }
      }
    }
  }"
8088678,none,"	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case AsubpackagePackage.AMODEL__ELEMENTS:
				return elements != null && !elements.isEmpty();
		}
		return super.eIsSet(featureID);
	}"
8261354,none,"	public IGrammarAwareElementType getClosureExpression_VerticalLineKeyword_2_0_0ElementType() {
		return ClosureExpression_VerticalLineKeyword_2_0_0_ELEMENT_TYPE;
	}"
4004665,none,"    public void addPoint(Point2D p) {
        addPoint((float)p.getX(), (float)p.getY());
    }"
7323707,none,"    public boolean isVisible(final IStructuredSelection selection) {
        final ChangeItem[] changes = (ChangeItem[]) SelectionUtils.selectionToArray(getSelection(), ChangeItem.class);

        // Enable for any delete
        for (final ChangeItem change : changes) {
            if (change.getChangeType().contains(ChangeType.DELETE)) {
                return true;
            }
        }

        return false;
    }"
6610923,none,"    public final void mClass() throws RecognitionException {
        try {
            int _type = Class;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalTypesLexer.g:101:7: ( 'class' )
            // InternalTypesLexer.g:101:9: 'class'
            {
            match(""class""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
7628549,none,"    public static void setLocalImageDescriptors(IAction action, String iconName) {
        setImageDescriptors(action, ""lcl16"", iconName);
    }"
7325700,none,"	public Q build() {
		@SuppressWarnings(""unchecked"")
		Q result = (Q) flow();
		return result;
	}"
6119399,none,"    @Override
    public boolean allSatisfy(Predicate<? super T> predicate)
    {
        return this.delegate.allSatisfy(new SelectAllSatisfyPredicate<>(this.predicate, predicate));
    }"
4449293,none,"  private void handleRemainder() {
    final int remainingRecordCount = incoming.getRecordCount() - remainderIndex;
    assert this.memoryManager.incomingBatch == incoming;
    final int recordsToProcess = Math.min(remainingRecordCount, memoryManager.getOutputRowCount());

    if (!doAlloc(recordsToProcess)) {
      outOfMemory = true;
      return;
    }

    logger.trace(""handleRemainder: remaining RC {}, toProcess {}, remainder index {}, incoming {}, Project {}"",
                 remainingRecordCount, recordsToProcess, remainderIndex, incoming, this);

    long projectStartTime = System.currentTimeMillis();
    final int projRecords = projector.projectRecords(this.incoming, remainderIndex, recordsToProcess, 0);
    long projectEndTime = System.currentTimeMillis();

    logger.trace(""handleRemainder: projection: records {}, time {} ms"", projRecords,(projectEndTime - projectStartTime));

    if (projRecords < remainingRecordCount) {
      setValueCount(projRecords);
      this.recordCount = projRecords;
      remainderIndex += projRecords;
    } else {
      setValueCount(remainingRecordCount);
      hasRemainder = false;
      remainderIndex = 0;
      for (final VectorWrapper<?> v : incoming) {
        v.clear();
      }
      this.recordCount = remainingRecordCount;
    }
    // In case of complex writer expression, vectors would be added to batch run-time.
    // We have to re-build the schema.
    if (complexWriters != null) {
      container.buildSchema(SelectionVectorMode.NONE);
    }

    memoryManager.updateOutgoingStats(projRecords);
    RecordBatchStats.logRecordBatchStats(RecordBatchIOType.OUTPUT, this, getRecordBatchStatsContext());
  }"
6034374,none,"		@Override
		protected IStatus run(IProgressMonitor monitor) {
			try {
				cloudServer.getBehaviour().connect(monitor);
				
				return Status.OK_STATUS;
				
			} catch (CoreException e) {
				e.printStackTrace();
				return e.getStatus();
			}
			
		}"
9022124,none,"    @Override
    public void finish() throws IOException {
      if (logDebug) { log.debug(""PRE_UPDATE FINISH "" + req); }
      if (next != null) next.finish();

      // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)

      if (log.isInfoEnabled()) {
        log.info(getLogStringAndClearRspToLog());
      }

      if (log.isWarnEnabled() && slowUpdateThresholdMillis >= 0) {
        final long elapsed = (long) req.getRequestTimer().getTime();
        if (elapsed >= slowUpdateThresholdMillis) {
          log.warn(""slow: "" + getLogStringAndClearRspToLog());
        }
      }
    }"
5658486,none,"    @Override
    @SuppressWarnings(""CloneDoesntCallSuperClone"")
    public final Matrix clone() {
        return Matrices.copy(this);
    }"
6432034,none,"    @Override
    public PropertyNode getMaxNodesPerHistoryUpdateDataNode() {
        Optional<VariableNode> propertyNode = getPropertyNode(OperationLimitsType.MAX_NODES_PER_HISTORY_UPDATE_DATA);
        return (PropertyNode) propertyNode.orElse(null);
    }"
4491391,none,"   @Override
   public void initializeDocument( final JCas documentValue ) {
      _instance = 1;
      final SourceData sourceData = SourceMetadataUtil.getSourceData( documentValue );
      if ( sourceData == null ) {
         LOGGER.warn( ""No document source data."" );
         setEmptyDocInfo();
         return;
      }
      try {
         _encounter = SourceMetadataUtil.getEncounterNum( sourceData );
         _provider = SourceMetadataUtil.getProviderId( sourceData );
         _start = SourceMetadataUtil.getStartDate( sourceData );
      } catch ( ResourceProcessException rpE ) {
         LOGGER.warn( ""Error setting document source data: "" + rpE.getMessage() );
         setEmptyDocInfo();
      }
   }"
9014548,none,"  @Override
  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
    assert !eof;
    //if (DEBUG) {
    //System.out.println(""BTTR.docs seg="" + segment);
    //}
    currentFrame.decodeMetaData();
    //if (DEBUG) {
    //System.out.println(""  state="" + currentFrame.state);
    //}
    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, reuse, flags);
  }"
6598935,none,"    public void logAction(String actionName, LogLevels level) {
        toLog(format(shortLogMessagesFormat
                ? ""%s for %s""
                : ""Perform action '%s' with Element (%s)"", actionName, this.toString()), level);
    }"
4310755,none,"    private static byte[] decodeUrl( byte[] bytes ) throws UrlDecoderException
    {
        if ( bytes == null )
        {
            return Strings.EMPTY_BYTES;
        }

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();

        for ( int i = 0; i < bytes.length; i++ )
        {
            int b = bytes[i];

            if ( b == '%' )
            {
                try
                {
                    int u = Character.digit( ( char ) bytes[++i], 16 );
                    int l = Character.digit( ( char ) bytes[++i], 16 );

                    if ( ( u == -1 ) || ( l == -1 ) )
                    {
                        throw new UrlDecoderException( I18n.err( I18n.ERR_13040_INVALID_URL_ENCODING ) );
                    }

                    buffer.write( ( char ) ( ( u << 4 ) + l ) );
                }
                catch ( ArrayIndexOutOfBoundsException aioobe )
                {
                    throw new UrlDecoderException( I18n.err( I18n.ERR_13040_INVALID_URL_ENCODING ), aioobe );
                }
            }
            else
            {
                buffer.write( b );
            }
        }

        return buffer.toByteArray();
    }"
4095182,none,"        private void processSelectedKeys() {
            for (Iterator<SelectionKey> i = selector.selectedKeys().iterator(); i.hasNext();) {
                SelectionKey key = i.next();
                i.remove();
                final SelectableChannel sc = key.channel();
                // do not attempt to read/write until handle is set (e.g. after handshake is completed)
                if (key.isReadable() && key.attachment() != null) {
                    read(key);
                } else if (key.isWritable() && key.attachment() != null) {
                    write(key);
                } else if (key.isAcceptable()) {
                    assert sc == serverSocketChannel;
                    accept();
                } else if (key.isConnectable()) {
                    finishConnect(key);
                }
            }
        }"
7795065,none,"	@Override
	protected void onReAdd()
	{
		if (this.fence != null)
		{
			// The fence mark is removed when the feedback panel is removed from the hierarchy.
			// see onRemove().
			// when the panel is re-added, we recreate the fence mark.
			incrementFenceCount();
		}
		super.onReAdd();
	}"
4593309,none,"    public void deleteJobsRelateToMeasure(Long measureId) throws
        SchedulerException {
        List<AbstractJob> jobs = jobRepo.findByMeasureIdAndDeleted(measureId,
            false);
        if (CollectionUtils.isEmpty(jobs)) {
            LOGGER.info(""Measure id {} has no related jobs."", measureId);
            return;
        }
        for (AbstractJob job : jobs) {
            JobOperator op = getJobOperator(job);
            op.delete(job);
        }
    }"
7902148,none,"    public int[] test5() {
        return new int[1];
    }"
7294676,none,"		@Override
		public String getText(Object element) {
			if (element instanceof GrailsProjectStructureTypes) {
				return ((GrailsProjectStructureTypes) element).getDisplayName();
			} else if (element instanceof String) {
				return (String)element;
			}
			return """"+element;
		}"
5520984,none,"    @Override
    public void setRememberMeServices(RememberMeServices rememberMeServices) {
	if (logger.isDebugEnabled()) {
	    logger.debug(""setRememberMeServices() enter: rememberMeServices=""
		    + rememberMeServices.toString());
	}
	super.setRememberMeServices(rememberMeServices);
    }"
8937384,none,"    public String getFieldName() {
      return _fieldName;
    }"
5445152,none,"    int getPartitionIndex() {
        return partitionIndex;
    }"
8413074,none,"    public static String[] filteredFieldNamesOf(final AbstractDescribedSObjectBase object,
        final Predicate<SObjectField> filter) {
        if (object == null) {
            return NONE;
        }

        if (filter == null) {
            return fieldNamesOf(object);
        }

        final SObjectDescription description = object.description();
        final List<SObjectField> fields = description.getFields();

        return fields.stream().filter(filter).map(SObjectField::getName).toArray(String[]::new);
    }"
6658744,none,"    public APIRequestGetReactions requestProfileTypeField (boolean value) {
      this.requestField(""profile_type"", value);
      return this;
    }"
8675011,none,"    @Override public Collection<ClusterNode> mapPartitionToPrimaryAndBackups(int part) {
        CacheOperationContext old = gate.enter(null);

        try {
            return delegate.mapPartitionToPrimaryAndBackups(part);
        }
        finally {
            gate.leave(old);
        }
    }"
6471245,none,"	public JavaVMOption(String optionString, ImagePointer extraInfo) {
		if (optionString == null) {
			throw new IllegalArgumentException();
		}
		_optionString = optionString;
		_extraInfo = extraInfo;
	}"
5497076,none,"    public static RuleSet parse(final Reader configReader, EventLoggerProvider eventLogger)
    {
        RuleSetCreator ruleSetCreator = new RuleSetCreator();

        int line = 0;
        try(Reader fileReader = configReader)
        {
            LOGGER.debug(""About to load ACL file"");
            StreamTokenizer tokenizer = new StreamTokenizer(new BufferedReader(fileReader));
            tokenizer.resetSyntax(); // setup the tokenizer

            tokenizer.commentChar(COMMENT); // single line comments
            tokenizer.eolIsSignificant(true); // return EOL as a token
            tokenizer.ordinaryChar('='); // equals is a token
            tokenizer.ordinaryChar(CONTINUATION); // continuation character (when followed by EOL)
            tokenizer.quoteChar('""'); // double quote
            tokenizer.quoteChar('\''); // single quote
            tokenizer.whitespaceChars('\u0000', '\u0020'); // whitespace (to be ignored) TODO properly
            tokenizer.wordChars('a', 'z'); // unquoted token characters [a-z]
            tokenizer.wordChars('A', 'Z'); // [A-Z]
            tokenizer.wordChars('0', '9'); // [0-9]
            tokenizer.wordChars('_', '_'); // underscore
            tokenizer.wordChars('-', '-'); // dash
            tokenizer.wordChars('.', '.'); // dot
            tokenizer.wordChars('*', '*'); // star
            tokenizer.wordChars('@', '@'); // at
            tokenizer.wordChars(':', ':'); // colon

            // parse the acl file lines
            Stack<String> stack = new Stack<>();
            int current;
            do {
                current = tokenizer.nextToken();
                line = tokenizer.lineno()-1;
                switch (current)
                {
                    case StreamTokenizer.TT_EOF:
                    case StreamTokenizer.TT_EOL:
                        if (stack.isEmpty())
                        {
                            break; // blank line
                        }

                        // pull out the first token from the bottom of the stack and check arguments exist
                        String first = stack.firstElement();
                        stack.removeElementAt(0);
                        if (stack.isEmpty())
                        {
                            throw new IllegalConfigurationException(String.format(NOT_ENOUGH_TOKENS_MSG, line));
                        }

                        // check for and parse optional initial number for ACL lines
                        Integer number = null;
                        if (first != null && first.matches(""\\d+""))
                        {
                            // set the acl number and get the next element
                            number = Integer.valueOf(first);
                            first = stack.firstElement();
                            stack.removeElementAt(0);
                        }

                        if (ACL.equalsIgnoreCase(first))
                        {
                            parseAcl(number, stack, ruleSetCreator, line);
                        }
                        else if (number == null)
                        {
                            if(""GROUP"".equalsIgnoreCase(first))
                            {
                                throw new IllegalConfigurationException(String.format(""GROUP keyword not supported at ""
                                                                                      + ""line %d. Groups should defined ""
                                                                                      + ""via a Group Provider, not in ""
                                                                                      + ""the ACL file."",
                                                                                      line));
                            }
                            else if (CONFIG.equalsIgnoreCase(first))
                            {
                                parseConfig(stack, ruleSetCreator, line);
                            }
                            else
                            {
                                throw new IllegalConfigurationException(String.format(UNRECOGNISED_INITIAL_MSG, first, line));
                            }
                        }
                        else
                        {
                            throw new IllegalConfigurationException(String.format(NUMBER_NOT_ALLOWED_MSG, first, line));
                        }

                        // reset stack, start next line
                        stack.clear();
                        break;
                    case StreamTokenizer.TT_NUMBER:
                        stack.push(Integer.toString(Double.valueOf(tokenizer.nval).intValue()));
                        break;
                    case StreamTokenizer.TT_WORD:
                        stack.push(tokenizer.sval); // token
                        break;
                    default:
                        if (tokenizer.ttype == CONTINUATION)
                        {
                            int next = tokenizer.nextToken();
                            line = tokenizer.lineno()-1;
                            if (next == StreamTokenizer.TT_EOL)
                            {
	                            break; // continue reading next line
                            }

                            // invalid location for continuation character (add one to line because we ate the EOL)
                            throw new IllegalConfigurationException(String.format(PREMATURE_CONTINUATION_MSG, line + 1));
                        }
                        else if (tokenizer.ttype == '\'' || tokenizer.ttype == '""')
                        {
                            stack.push(tokenizer.sval); // quoted token
                        }
                        else
                        {
                            stack.push(Character.toString((char) tokenizer.ttype)); // single character
                        }
                }
            } while (current != StreamTokenizer.TT_EOF);

            if (!stack.isEmpty())
            {
                throw new IllegalConfigurationException(String.format(PREMATURE_EOF_MSG, line));
            }
        }
        catch (IllegalArgumentException iae)
        {
            throw new IllegalConfigurationException(String.format(PARSE_TOKEN_FAILED_MSG, line), iae);
        }
        catch (IOException ioe)
        {
            throw new IllegalConfigurationException(CANNOT_LOAD_MSG, ioe);
        }
        return ruleSetCreator.createRuleSet(eventLogger);
    }"
4318037,none,"    @Override
    CostEstimate getFinalCostEstimate()
		throws StandardException
	{
		if (getCandidateFinalCostEstimate() != null)
        {
			return getCandidateFinalCostEstimate();
        }

		CostEstimate leftCE = leftResultSet.getFinalCostEstimate();
		CostEstimate rightCE = rightResultSet.getFinalCostEstimate();

		setCandidateFinalCostEstimate( getNewCostEstimate() );
		getCandidateFinalCostEstimate().setCost(
			leftCE.getEstimatedCost() + rightCE.getEstimatedCost(),
			getRowCountEstimate(leftCE.rowCount(), rightCE.rowCount()),
			getSingleScanRowCountEstimate(leftCE.singleScanRowCount(),
				rightCE.singleScanRowCount()));

		return getCandidateFinalCostEstimate();
	}"
4364314,none,"    public void finer(String msg) {
        if (isLoggable(Level.FINER)) {
            LogRecord lr = new LogRecord(Level.FINER, msg);
            doLog(lr);
        }
    }"
3876033,none,"  public RemoteAmbariCluster(String name, String clusterPath, AmbariStreamProvider streamProvider) {
    this.name = name;
    this.clusterPath = clusterPath;
    this.streamProvider = streamProvider;
  }"
7377589,none,"	@Override
	public Supplier<MultiValueMap<K, V>> supplier() {
		return () -> CollectionUtils.toMultiValueMap(new HashMap<>());
	}"
8140898,none,"	protected void transform(XtendConstructor source, JvmGenericType container) {
		JvmConstructor constructor = typesFactory.createJvmConstructor();
		container.getMembers().add(constructor);
		associator.associatePrimary(source, constructor);
		JvmVisibility visibility = source.getVisibility();
		constructor.setSimpleName(container.getSimpleName());
		constructor.setVisibility(visibility);
		for (XtendParameter parameter : source.getParameters()) {
			translateParameter(constructor, parameter);
		}
		copyAndFixTypeParameters(source.getTypeParameters(), constructor);
		for (JvmTypeReference exception : source.getExceptions()) {
			constructor.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception));
		}
		translateAnnotationsTo(source.getAnnotations(), constructor);
		setBody(constructor, source.getExpression());
		jvmTypesBuilder.copyDocumentationTo(source, constructor);
	}"
7291517,none,"    private NameRegion[] findLinkComponentsInClosure(ClosureExpression firstArg,
            int offset) {
        if (! (firstArg.getCode() instanceof BlockStatement)) {
            return null;
        }
        
        BlockStatement code = (BlockStatement) firstArg.getCode();
        if (code.getStatements() == null) {
            return null;
        }
        NameRegion controllerName = null;
        NameRegion actionName = null;
        NameRegion viewName = null;

        for (Statement state : code.getStatements()) {
            if (state instanceof ExpressionStatement) {
                if (((ExpressionStatement) state).getExpression() instanceof BinaryExpression) {
                    BinaryExpression bexpr = (BinaryExpression) ((ExpressionStatement) state).getExpression();
                    Expression left = bexpr.getLeftExpression();
                    if (bexpr.getOperation().getText().equals(""="") && left instanceof VariableExpression) {
                        Expression right = bexpr.getRightExpression();
                        Region region;
                        if (right.getStart() <= offset && right.getEnd() >= offset) {
                            region = new Region(right.getStart(), right.getLength());
                        } else {
                            region = null;
                        }

                        String name = left.getText();
                        if (name.equals(""controller"")) {
                            controllerName = new NameRegion(right.getText(), region);
                        } else if (name.equals(""action"")) {
                            actionName = new NameRegion(right.getText(), region);
                        } else if (name.equals(""view"")) {
                            viewName = new NameRegion(right.getText(), region);
                        }
                    }
                }
            }
        }
        return new NameRegion[] { controllerName, actionName, viewName };
    }"
7595459,none,"	public boolean hasAnyScope(String... scopes) {
		boolean result = OAuth2ExpressionUtils.hasAnyScope(authentication, scopes);
		if (!result) {
			missingScopes.addAll(Arrays.asList(scopes));
		}
		return result;
	}"
6892868,none,"    @Override
    public String toString() {
        return defaultFormatter.format(this, Locale.getDefault());
    }"
7972876,none,"    public final void rule__Model__NameAssignment_1_9_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug309949TestLanguage.g:3272:1: ( ( RULE_ID ) )
            // InternalBug309949TestLanguage.g:3273:2: ( RULE_ID )
            {
            // InternalBug309949TestLanguage.g:3273:2: ( RULE_ID )
            // InternalBug309949TestLanguage.g:3274:3: RULE_ID
            {
             before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_9_1_0()); 
            match(input,RULE_ID,FollowSets000.FOLLOW_2); 
             after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_9_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
4488901,none,"  public <SEARCH_T extends Annotation> List<Feature> extract(JCas jCas,
      Annotation focusAnnotation, Bounds bounds,
      Class<SEARCH_T> annotationClass, FeatureExtractor1<SEARCH_T> extractor)
      throws CleartkExtractorException {
    LinkedHashMap<String,Double> runningTotals = new LinkedHashMap<>();

    for (Context context : this.contexts) {
      for (Feature feature : context.extract(
          jCas,
          focusAnnotation,
          bounds,
          annotationClass,
          extractor)) {
        try{
          double val = Double.parseDouble(feature.getValue().toString());
          if(!runningTotals.containsKey(feature.getName())){
            runningTotals.put(feature.getName(), 0.0);
          }
          runningTotals.put(feature.getName(), runningTotals.get(feature.getName()) + val);
        }catch(Exception e){
          // just ignore this feature?
        }
      }
    }
    List<Feature> features = new ArrayList<>();
    for(String key : runningTotals.keySet()){
      features.add(new Feature(this.name + ""_"" + key, runningTotals.get(key)));
    }
    return features;
  }"
8593029,none,"    public java.nio.ByteBuffer bufferForRow() {
      return org.apache.thrift.TBaseHelper.copyBinary(row);
    }"
7187010,none,"        public UpdateSubscriptionRequest build() {
            UpdateSubscriptionRequest request = buildWithoutInvocationCallback();
            request.setInvocationCallback(invocationCallback);
            return request;
        }"
5894091,none,"    public boolean matchesAllInstances(SequenceType testST) {
        Quantifier stq = sequenceType.getQuantifier();
        ItemType it = sequenceType.getItemType();
        if (stq.isSubQuantifier(testST.getQuantifier())) {
            if (it instanceof AnyItemType) {
                return true;
            } else if (it.isAtomicType() && testST.getItemType().isAtomicType()) {
                AtomicType ait = (AtomicType) it;
                AtomicType testIT = (AtomicType) testST.getItemType();
                if (BuiltinTypeRegistry.INSTANCE.isBuiltinTypeId(testIT.getTypeId())) {
                    SchemaType vType = BuiltinTypeRegistry.INSTANCE.getSchemaTypeById(testIT.getTypeId());
                    while (vType != null && vType.getTypeId() != ait.getTypeId()) {
                        vType = vType.getBaseType();
                    }
                    return vType != null;
                }
            } else if (it instanceof NodeType && testST.getItemType() instanceof NodeType) {
                NodeType nt = (NodeType) it;
                NodeKind kind = nt.getNodeKind();
                NodeType testNT = (NodeType) testST.getItemType();
                NodeKind testKind = testNT.getNodeKind();
                if (kind == NodeKind.ANY || kind == testKind) {
                    return true;
                }
            }
            return false;
        }
        return false;
    }"
3725026,none,"    public ImmediatelyThrowsEvent makeImmediatelyThrowsEvent(final int processId,
                                                             final int invokeId,
                                                             final Throwable throwable) {
        if (null == immediatelyThrowsEvent) {
            immediatelyThrowsEvent = new ImmediatelyThrowsEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null);
        }
        unsafe.putInt(immediatelyThrowsEvent, processIdFieldInInvokeEventOffset, processId);
        unsafe.putInt(immediatelyThrowsEvent, invokeIdFieldInInvokeEventOffset, invokeId);
        unsafe.putObject(immediatelyThrowsEvent, throwableFieldInThrowsEventOffset, throwable);
        return immediatelyThrowsEvent;
    }"
8972982,none,"    @Override
    public int docFreq() throws IOException {
      return te.docFreq();
    }"
4327219,none,    public  static  double   double_double_double( Blob a ) { return -1.0; }
6453968,none,"    @Override
    public int hashCode ()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + ( this.predicate == null ? 0 : this.predicate.hashCode () );
        return result;
    }"
4089742,none,"    private static String extractErrorMessage(Throwable e) {
        Throwable cause = getRootCause(e);
        String fullyQualifiedExceptionClassName = cause.getClass().getName();
        String[] hierarchySplits = fullyQualifiedExceptionClassName.split(""\\."");
        //try returning the class without package qualification
        String exceptionClassName = hierarchySplits[hierarchySplits.length - 1];
        String localizedMessage = cause.getLocalizedMessage();
        if (localizedMessage == null) {
            localizedMessage = ""Internal error. Please check instance logs for further details."";
        }
        return localizedMessage + "" ["" + exceptionClassName + ""]"";
    }"
8928769,none,"  public void initParseCtx(ParseContext pctx) {
    opToPartPruner = pctx.getOpToPartPruner();
    opToPartList = pctx.getOpToPartList();
    opToSamplePruner = pctx.getOpToSamplePruner();
    topOps = pctx.getTopOps();
    loadTableWork = pctx.getLoadTableWork();
    loadFileWork = pctx.getLoadFileWork();
    ctx = pctx.getContext();
    destTableId = pctx.getDestTableId();
    idToTableNameMap = pctx.getIdToTableNameMap();
    uCtx = pctx.getUCtx();
    listMapJoinOpsNoReducer = pctx.getListMapJoinOpsNoReducer();
    prunedPartitions = pctx.getPrunedPartitions();
    tabNameToTabObject = pctx.getTabNameToTabObject();
    fetchTask = pctx.getFetchTask();
    setLineageInfo(pctx.getLineageInfo());
  }"
4602360,none,"  @Override
  public void writeRequest(DataOutput output) throws IOException {
    output.writeInt(partitionId);
    output.writeInt(vertexIdMutations.size());
    for (Entry<I, VertexMutations<I, V, E>> entry :
        vertexIdMutations.entrySet()) {
      entry.getKey().write(output);
      entry.getValue().write(output);
    }
  }"
8856936,none,"    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }"
7164951,none,"    public int getId() {
        return id;
    }"
7483890,none,"	public Customer970Service(Customer970Repository repo) {
	}"
3749791,none,"    @Override
    public boolean visit(OracleExitStatement x) {
        return true;
    }"
8432933,none,"    public CamelCloudServiceDiscovery(Long timeout, List<ServiceDiscovery> serviceDiscoveryList) {
        // Created a chained service discovery that collects services from multiple
        // ServiceDiscovery
        this.delegate = new CombinedServiceDiscovery(serviceDiscoveryList);

        // If a timeout is provided, wrap the serviceDiscovery with a caching
        // strategy so the discovery implementations are not queried for each
        // discovery request
        if (timeout != null && timeout > 0) {
            this.delegate = CachingServiceDiscovery.wrap(this.delegate, timeout, TimeUnit.MILLISECONDS);
        }
    }"
4338632,none,"    @Override
    public boolean canVisit( ExprNode node )
    {
        return node instanceof BranchNode;
    }"
4490936,none,"    static boolean isPrecTypeFixed(ColumnPrecisionType type) {
      return DT_PRECISION_IS_FIXED.equals(type);
    }"
5389537,none,"    public static boolean is64bitJVM() {
        String arch = System.getProperties().getProperty(""sun.arch.data.model"",
                System.getProperty(""com.ibm.vm.bitmode""));
        return arch != null && arch.equals(""64"");
    }"
8537951,none,"    @Override
    public void setLink(String elementName, String padName, Link link, Direction direction) {
        elements.get(elementName).setLink(padName, link, direction);
    }"
8243636,none,"    public Call(ParsingContext parsingContext, StartElement raw, Attributes attrs, Stack stack)
            throws SAXException {
        super(raw);
        this.parameters = new HashMap();
        Locator locator = getLocation();

        String name = attrs.getValue(""macro"");
        if (name == null) {
            throw new SAXParseException(""if: \""test\"" is required"", locator,
                    null);
        }
        this.macro = parsingContext.getStringTemplateParser().compileExpr(name, ""call: \""macro\"": "",
                locator);

        String namespace = StringUtils.defaultString(attrs
                .getValue(""targetNamespace""));
        this.targetNamespace = parsingContext.getStringTemplateParser().compileExpr(namespace,
                ""call: \""targetNamespace\"": "", locator);
    }"
8898055,none,"    @Override
    public void reset(AggregationBuffer agg) throws HiveException {
      Aggregation myAgg = (Aggregation) agg;
      myAgg.reset();
    }"
4756088,none,"  private static Optional<Schema> removeUncomparableFieldsFromRecord(Schema record, Set<Schema> processed) {
    Preconditions.checkArgument(record.getType() == Schema.Type.RECORD);

    if (processed.contains(record)) {
      return Optional.absent();
    }
    processed.add(record);

    List<Field> fields = Lists.newArrayList();
    for (Field field : record.getFields()) {
      Optional<Schema> newFieldSchema = removeUncomparableFields(field.schema(), processed);
      if (newFieldSchema.isPresent()) {
        fields.add(new Field(field.name(), newFieldSchema.get(), field.doc(), field.defaultValue()));
      }
    }

    Schema newSchema = Schema.createRecord(record.getName(), record.getDoc(), record.getNamespace(), false);
    newSchema.setFields(fields);
    return Optional.of(newSchema);
  }"
4336814,none,"    public void afterValue( K key, V value ) throws LdapException, CursorException
    {
        checkNotClosed();
        /*
         * There is a subtle difference between after and before handling
         * with duplicate key values.  Say we have the following tuples:
         *
         * (0, 0)
         * (1, 1)
         * (1, 2)
         * (1, 3)
         * (2, 2)
         *
         * If we request an after cursor on (1, 2).  We must make sure that
         * the container cursor does not advance after the entry with key 1
         * since this would result in us skip returning (1. 3) on the call to
         * next which will incorrectly return (2, 2) instead.
         *
         * So if the value is null in the element then we don't care about
         * this obviously since we just want to advance past the duplicate key
         * values all together.  But when it is not null, then we want to
         * go right before this key instead of after it.
         */

        if ( value == null )
        {
            containerCursor.after( new Tuple<K, DupsContainer<V>>( key, null ) );
        }
        else
        {
            containerCursor.before( new Tuple<K, DupsContainer<V>>( key, null ) );
        }

        if ( containerCursor.next() )
        {
            containerTuple.setBoth( containerCursor.get() );
            DupsContainer<V> values = containerTuple.getValue();

            if ( values.isArrayTree() )
            {
                ArrayTree<V> set = values.getArrayTree();
                dupsCursor = new ArrayTreeCursor<>( set );
            }
            else
            {
                try
                {
                    BTree tree = table.getBTree( values.getBTreeRedirect() );
                    dupsCursor = new KeyBTreeCursor<>( tree, table.getValueComparator() );
                }
                catch ( IOException e )
                {
                    throw new CursorException( e );
                }
            }

            if ( value == null )
            {
                return;
            }

            // only advance the dupsCursor if we're on same key
            if ( table.getKeyComparator().compare( containerTuple.getKey(), key ) == 0 )
            {
                dupsCursor.after( value );
            }

            return;
        }

        clearValue();
        containerTuple.setKey( null );
        containerTuple.setValue( null );
    }"
9129936,none,"	CssRecord( Module module, DesignElement element, CssStyleSheet css,
			boolean add, int pos )
	{
		this.module = module;
		this.element = element;
		this.css = css;
		this.add = add;
		this.position = pos;
	}"
3785309,none,"  @Override
  protected void runLater(State state, RandWalkEnv env) throws Exception {
    Text[] points = getRandomTabletRange(state);
    log.info(""merging "" + rangeToString(points));
    env.getAccumuloClient().tableOperations().merge(Setup.getTableName(), points[0], points[1]);
    log.info(""merging "" + rangeToString(points) + "" complete"");
  }"
5417605,none,"	public ProjectModel getModel(String projectName) {
		ProjectModel projectModel = models.get(projectName);
		if (projectModel == null) {
			projectModel = new ProjectModel(projectName);
			models.put(projectName, projectModel);
		}
		
		return projectModel;
	}"
5361443,none,"    @SuppressWarnings(""unchecked"")
    public <T extends Enum<T>> T get(final String property, final T defaultValue) {
        final String value = properties.getProperty(property);

        if (value == null || value.equals(""""))
            return parent.get(property, defaultValue);

        if (defaultValue == null)
            throw new IllegalArgumentException(""Must supply a default for property "" + property);

        final Class<T> enumType = (Class<T>) defaultValue.getClass();

        try {
            return log(property, valueOf(enumType, value.toUpperCase()));
        } catch (IllegalArgumentException e) {
            warn(property, value);
            return parent.get(property, defaultValue);
        }
    }"
6946489,none,"    public final void mAsteriskEqualsSign() throws RecognitionException {
        try {
            int _type = AsteriskEqualsSign;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            {
            match(""*=""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
4217192,none,"    @Override
    protected Catalog<String, Object, ServletWebContext<String, Object>>
            getCatalog(ServletWebContext<String, Object> context) {
        /* If the object returned from the passed context is not a valid catalog
         * then we use the super class's catalog extraction logic to pull it
         * or to error gracefully.
         */
        Object testCatalog = context.get(getCatalogName());

        /* Assume that the underlying implementation is following convention and
         * returning a catalog with the current context.
         */
        @SuppressWarnings(""unchecked"")
        Catalog<String, Object, ServletWebContext<String, Object>> catalog =
                testCatalog != null && testCatalog instanceof Catalog ?
                    (Catalog<String, Object, ServletWebContext<String, Object>>) testCatalog :
                    super.getCatalog(context);

        return catalog;
    }"
3868603,none,"    public void setShowProgress(boolean progress) {
        // no nothing
    }"
5989938,none,"    protected MethodSpec.Builder resumeMethodBuilder() {
        return MethodSpec.methodBuilder(RESUME_METHOD)
                         .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                         .addParameter(responseType(), LAST_SUCCESSFUL_PAGE_LITERAL)
                         .returns(className())
                         .addCode(CodeBlock.builder()
                                           .beginControlFlow(""if ($L.$L($L))"", NEXT_PAGE_FETCHER_MEMBER,
                                                             HAS_NEXT_PAGE_METHOD, LAST_SUCCESSFUL_PAGE_LITERAL)
                                           .addStatement(""return new $T($L, $L)"", className(), CLIENT_MEMBER,
                                                         constructRequestFromLastPage(LAST_SUCCESSFUL_PAGE_LITERAL))
                                           .endControlFlow()
                                           .build())
                         .addJavadoc(CodeBlock.builder()
                                              .add(""<p>A helper method to resume the pages in case of unexpected failures. ""
                                                   + ""The method takes the last successful response page as input and returns an ""
                                                   + ""instance of {@link $T} that can be used to retrieve the consecutive pages ""
                                                   + ""that follows the input page.</p>"", className())
                                              .build());
    }"
5621210,none,"    protected FileNode createFileNode(IFileSpecification specification)
    {
        // Only defer function body if the compilation unit is from an actual AS 
        // file, and the compilation unit is not ""invisible"" (currently not 
        // open in IDE). ""isInvisible"" means the compilation unit is invisible 
        // to semantic analyzer. It, however, is ""visible"" to the user in the 
        // IDE.
        final DeferFunctionBody deferFunctionBody;
        if(!isInvisible() && specification instanceof FileSpecification)
            deferFunctionBody = DeferFunctionBody.ENABLED;
        else
            deferFunctionBody = DeferFunctionBody.DISABLED;

        final IASProject flashProject;
        if(getProject() instanceof IASProject)
            flashProject = (IASProject)getProject();
        else
            flashProject = null;
        
        // Parse the AS file into an AST and build a symbol table for it.
        return ASParser.parseFile(
                specification,
                getFileSpecificationGetter(),
                EnumSet.of(PostProcessStep.CALCULATE_OFFSETS),
                this.getProject().getProjectConfigVariables(),
                true,
                this.getProject().isAssetEmbeddingSupported(),
                includedFiles,
                deferFunctionBody,
                flashProject,
                this);
    }"
4301441,none,"    public static boolean pricipalCompareIgnoreRealm(PrincipalName princ1, PrincipalName princ2)
            throws KrbException {

        if (princ1 != null && princ2 != null) {
            princ1.setRealm(null);
            princ2.setRealm(null);
            if (princ1.getName().equals(princ2.getName())) {
                return true;
            } else {
                return false;
            }
        } else {
            throw new KrbException(""principal can't be null."");
        }
    }"
4175236,none,"	static boolean evaluateImpl(Object o1, Object o2) {
		// TODO: maybe we need a comparison ""strategy"" here, instead of
		// a switch of all possible cases? ... there were other requests for
		// more relaxed type-unsafe comparison (e.g. numbers to strings)

		if (o1 == null && o2 == null) {
			return true;
		} else if (o1 != null) {
			// Per CAY-419 we perform 'in' comparison if one object is a list, and other is not
			if (o2 instanceof Collection) {
				for (Object element : ((Collection<?>) o2)) {
					if (element != null && Evaluator.evaluator(element).eq(element, o1)) {
						return true;
					}
				}
				return false;
			}

			return Evaluator.evaluator(o1).eq(o1, o2);
		}
		return false;
	}"
7156819,none,"    @Override
    public boolean supportsSubqueriesInQuantifieds() throws SQLServerException {
        checkClosed();
        return true;
    }"
5657457,none,"    @Override
    public MathTransform createMathTransform(final MathTransformFactory factory, final ParameterValueGroup values)
            throws ParameterNotFoundException
    {
        /*
         * The TensorParameters constant used below (WKT1 or EPSG) does not matter,
         * since both of them understand the names of the other TensorParameters.
         */
        return MathTransforms.linear(TensorParameters.WKT1.toMatrix(values));
    }"
5842829,none,"    @Override
    public void write(String s) throws IOException {

        if (suspended) {
            return;
        }

        if (s == null) {
            s = ""null"";
        }
        write(s, 0, s.length());
    }"
7229362,none,"		@Override
		public int hashCode() {
			return Objects.hash(consumer, name, deferredConsumer);
		}"
7743333,none,"    public static boolean checkExplicitUserPassword(ManagementContext mgmt, String user, String password) {
        BrooklynProperties properties = ((ManagementContextInternal)mgmt).getBrooklynProperties();
        String expectedPassword = properties.getConfig(BrooklynWebConfig.PASSWORD_FOR_USER(user));
        String salt = properties.getConfig(BrooklynWebConfig.SALT_FOR_USER(user));
        String expectedSha256 = properties.getConfig(BrooklynWebConfig.SHA256_FOR_USER(user));
        
        return checkPassword(password, expectedPassword, expectedSha256, salt);
    }"
3872015,none,"  protected String getHash(T data, String salt) {
    String json = null;
    try {
      json = MAPPER.writeValueAsString(data);
    } catch (JsonProcessingException e) {
      throw new RuntimeException(""Error during mapping message to calculate hash"", e);
    }
    String generatedPassword = null;
    try {
      MessageDigest md = MessageDigest.getInstance(""SHA-512"");
      md.update(salt.getBytes(""UTF-8""));
      byte[] bytes = md.digest(json.getBytes(""UTF-8""));
      StringBuilder sb = new StringBuilder();
      for (byte b : bytes) {
        sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));
      }
      generatedPassword = sb.toString();
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return generatedPassword;
  }"
8526493,none,"    @Override
    public String getCurrentState() {
        // TODO Auto-generated method stub
        return null;
    }"
8422970,none,"    public int getConcurrentConsumers() {
        return concurrentConsumers;
    }"
9407577,none,"    final protected Node internalRemoveNamedItemNS(String namespaceURI,
            String name,
            boolean raiseEx) {

        CoreDocumentImpl ownerDocument = ownerNode.ownerDocument();
        if (ownerDocument.errorChecking && isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, ""NO_MODIFICATION_ALLOWED_ERR"", null);
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
        }
        int i = findNamePoint(namespaceURI, name);
        if (i < 0) {
            if (raiseEx) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, ""NOT_FOUND_ERR"", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            } else {
                return null;
            }
        }

        AttrImpl n = (AttrImpl)nodes.get(i);

        if (n.isIdAttribute()) {
            ownerDocument.removeIdentifier(n.getValue());
        }
        // If there's a default, add it instead
        String nodeName = n.getNodeName();
        if (hasDefaults()) {
            NamedNodeMapImpl defaults = ((ElementImpl) ownerNode).getDefaultAttributes();
            Node d;
            if (defaults != null
                    && (d = defaults.getNamedItem(nodeName)) != null)
            {
                int j = findNamePoint(nodeName,0);
                if (j>=0 && findNamePoint(nodeName, j+1) < 0) {
                    NodeImpl clone = (NodeImpl)d.cloneNode(true);
                    clone.ownerNode = ownerNode;
                    if (d.getLocalName() != null) {
                        // we must rely on the name to find a default attribute
                        // (""test:attr""), but while copying it from the DOCTYPE
                        // we should not loose namespace URI that was assigned
                        // to the attribute in the instance document.
                        ((AttrNSImpl)clone).namespaceURI = namespaceURI;
                    }
                    clone.isOwned(true);
                    clone.isSpecified(false);
                    nodes.set(i, clone);
                    if (clone.isIdAttribute()) {
                        ownerDocument.putIdentifier(clone.getNodeValue(),
                                (ElementImpl)ownerNode);
                    }
                } else {
                    nodes.remove(i);
                }
            } else {
                nodes.remove(i);
            }
        } else {
            nodes.remove(i);
        }

        //        changed(true);

        // remove reference to owner
        n.ownerNode = ownerDocument;
        n.isOwned(false);
        // make sure it won't be mistaken with defaults in case it's
        // reused
        n.isSpecified(true);
        // update id table if needed
        n.isIdAttribute(false);

        // notify document
        ownerDocument.removedAttrNode(n, ownerNode, name);

        return n;

    } // internalRemoveNamedItemNS(String,String,boolean):Node"
3817294,none,"   private byte getByte(final long index) {
      checkForPacket(index);

      if (fileCache != null && index < packetPosition) {
         return fileCache.getByteFromCache(index);
      } else {
         return currentPacket.getChunk()[(int) (index - packetPosition)];
      }
   }"
4625303,none,"    public static char[] add(char[] array, StringBuilder stringBuilder) {
        return add(array, getCharsFromStringBuilder(stringBuilder));
    }"
5958136,none,"    public ApplicationException(final String message) {
        super(message);
    }"
9532758,none,"  @Private
  @Unstable
  public static GetQueueInfoResponse newInstance(QueueInfo queueInfo) {
    GetQueueInfoResponse response = Records.newRecord(GetQueueInfoResponse.class);
    response.setQueueInfo(queueInfo);
    return response;
  }"
7120110,none,"	public String getMediaType() {
		return mediaType;
	}"
3986717,none,"    @SuppressWarnings( ""raw"" )
    private static void simpleGenericNameOf( StringBuilder sb, Type type )
    {
        if( type instanceof Class )
        {
            sb.append( ( (Class) type ).getSimpleName() );
        }
        else if( type instanceof ParameterizedType )
        {
            ParameterizedType pt = (ParameterizedType) type;
            simpleGenericNameOf( sb, pt.getRawType() );
            sb.append( ""<"" );
            boolean atLeastOne = false;
            for( Type typeArgument : pt.getActualTypeArguments() )
            {
                if( atLeastOne )
                {
                    sb.append( "", "" );
                }
                simpleGenericNameOf( sb, typeArgument );
                atLeastOne = true;
            }
            sb.append( "">"" );
        }
        else if( type instanceof GenericArrayType )
        {
            GenericArrayType gat = (GenericArrayType) type;
            simpleGenericNameOf( sb, gat.getGenericComponentType() );
            sb.append( ""[]"" );
        }
        else if( type instanceof TypeVariable )
        {
            TypeVariable tv = (TypeVariable) type;
            sb.append( tv.getName() );
        }
        else if( type instanceof WildcardType )
        {
            WildcardType wt = (WildcardType) type;
            sb.append( ""? extends "" );
            boolean atLeastOne = false;
            for( Type typeArgument : wt.getUpperBounds() )
            {
                if( atLeastOne )
                {
                    sb.append( "", "" );
                }
                simpleGenericNameOf( sb, typeArgument );
                atLeastOne = true;
            }
        }
        else
        {
            throw new IllegalArgumentException( ""Don't know how to deal with type:"" + type );
        }
    }"
5798489,none,"    public Html5MarkupModel(boolean useApostropheForAttributes)
    {
        super(useApostropheForAttributes);
    }"
6975479,none,"    @Override
    public SortedMap<R, Map<C, V>> rowMap() {
      Function<Map<C, V>, Map<C, V>> wrapper = unmodifiableWrapper();
      return Collections.unmodifiableSortedMap(Maps.transformValues(delegate().rowMap(), wrapper));
    }"
7693328,none,"    @Override
    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject result = new JSONObject();
        try {
            result.put(KEY_RESULT_IS_SUPPORT, true);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return result;
    }"
5788583,none,"  public int writeLength() throws IOException {
    int length = 0;
    int mapIdLength = Text.encode(mapId).limit();
    length += mapIdLength;

    length += WritableUtils.getVIntSize(mapIdLength);
    length += WritableUtils.getVIntSize(compressedLength);
    length += WritableUtils.getVIntSize(uncompressedLength);
    length += WritableUtils.getVIntSize(forReduce);

    return length;
  }"
4169148,none,"  public void run() {
    try {
      JSONObject result = plugin.execute();
      int status = (Integer) result.get(""status"");
      if (status < 0) {
        System.out.println(""Error"");
        log.warn(""[ChukwaError]:"" + Exec.class + "", ""
            + result.get(""stderr""));
      } else {
        log.info(result.get(""stdout""));
      }
    } catch (Exception e) {
      log.error(""Exec output unparsable:"" + this.cmde);
    }
  }"
9361156,none,"    @Transient
    public Rectangle2D getFrame() {
        return new Rectangle2D.Double(getX(), getY(), getWidth(), getHeight());
    }"
6194793,none,"  @Override
  public void actionPerformed(ActionEvent e) {
    final Resource[] resources = appContext.getResources();

    checkState(resources != null && resources.length == 1 && resources[0] instanceof Container);

    presenter.showDialog((Container) resources[0]);
  }"
7969819,none,"  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }"
7580167,none,"	public ToStringCreator append(String fieldName, @Nullable Object value) {
		printFieldSeparatorIfNecessary();
		this.styler.styleField(this.buffer, fieldName, value);
		return this;
	}"
8962694,none,"    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }"
6860231,none,"  @Override
  public void dispose() {
    database.removeListener(listener);
  }"
4315157,none,"    @Override
    public String getOidByName( String name ) throws LdapException
    {
        return immutableMatchingRuleUseRegistry.getOidByName( name );
    }"
6680697,none,"    public APIRequestGet requestSourceField (boolean value) {
      this.requestField(""source"", value);
      return this;
    }"
6761580,none,"    public APIRequestGet requestProductSetField (boolean value) {
      this.requestField(""product_set"", value);
      return this;
    }"
3775458,none,"    private static short checkAndCastYear(int year)
    {
        if (year < 1 || year > 9999)
        {
            throw new IllegalArgumentException(String.format(""Year %s must be between 1 and 9999 inclusive"", year));
        }

        return (short) year;
    }"
8580507,none,"    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""NN_NAKED_NOTIFY"",
        justification=""This is what we want"")
    public void evict() {
      synchronized (this) {
        this.notifyAll();
      }
    }"
7770031,none,"  @Benchmark
  @BenchmarkMode(Mode.AverageTime)
  @OutputTimeUnit(TimeUnit.MICROSECONDS)
  public void uncompressed(Blackhole blackhole)
  {
    final ImmutableConciseSet set = ImmutableConciseSet.complement(null, emptyRows);
    blackhole.consume(set);
    assert (emptyRows == set.size());
  }"
4474548,none,"  public static void main(String[] args) throws ResourceInitializationException, SAXException, IOException {
    AggregateBuilder aggregateBuilder = new AggregateBuilder();
    aggregateBuilder.add(SimpleSegmentAnnotator.createAnnotatorDescription());
    aggregateBuilder.add(SentenceDetectorAnnotatorBIO.getDescription(sentModelPath));
    
    aggregateBuilder.createAggregateDescription().toXML(new FileWriter(""desc/analysis_engine/SentenceAnnotatorBIOAggregate.xml""));
    SentenceDetectorAnnotatorBIO.getDescription(sentModelPath).toXML(new FileWriter(""desc/analysis_engine/SentenceDetectorAnnotatorBIO.xml""));    
  }"
7205422,none,"        public Builder definedTags(
                java.util.Map<String, java.util.Map<String, Object>> definedTags) {
            this.definedTags = definedTags;
            this.__explicitlySet__.add(""definedTags"");
            return this;
        }"
4068177,none,"    static void registerConfigOptions(IConfigManager configManager) {
        AsterixProperties.registerConfigOptions(configManager);
        ControllerConfig.Option.DEFAULT_DIR
                .setDefaultValue(FileUtil.joinPath(System.getProperty(ConfigurationUtil.JAVA_IO_TMPDIR), ""asterixdb""));
        NCConfig.Option.APP_CLASS.setDefaultValue(NCApplication.class.getName());
        CCConfig.Option.APP_CLASS.setDefaultValue(CCApplication.class.getName());
        try {
            InputStream propertyStream =
                    ApplicationConfigurator.class.getClassLoader().getResourceAsStream(""git.properties"");
            if (propertyStream != null) {
                Properties gitProperties = new Properties();
                gitProperties.load(propertyStream);
                StringWriter sw = new StringWriter();
                gitProperties.store(sw, null);
                configManager.setVersionString(sw.toString());
            }
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }

    }"
4960036,none,"	@Override /* ContextBuilder */
	public JsonSchemaSerializerBuilder set(Map<String,Object> properties) {
		super.set(properties);
		return this;
	}"
4318095,none,"	public final Dependable getDependable(DataDictionary dd, UUID dependableObjectID)
		throws StandardException
	{
        Dependable dependable = findDependable(dd, dependableObjectID);
        if (dependable == null)
            throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND,
                    getSQLObjectType(), dependableObjectID);
        return dependable;
    }"
8567234,none,"    public void setStartRowIsSet(boolean value) {
      if (!value) {
        this.startRow = null;
      }
    }"
5478880,none,"    @Override
    public void open()
    {
        Collection<LinkDefinition<Source, Target>> links = _linkStore.openAndLoad(new LinkStoreUpdaterImpl());
        for(LinkDefinition<Source, Target> link: links)
        {
            ConcurrentMap<LinkKey, Link_1_0<S,T>> linkRegistry = getLinkRegistry(link.getRole());
            LinkDefinition<S, T> definition = (LinkDefinition<S, T>) link;
            linkRegistry.put(new LinkKey(link), new LinkImpl<>(definition, this));
        }
    }"
6435518,none,"    @Override
    public NodeId getTypeId() { return TypeId; }"
9345946,none,"            public void selectAllAccessibleSelection() {
               TreeModel model = JTree.this.getModel();
               if (model != null) {
                   int childCount = getAccessibleChildrenCount();
                   TreePath path;
                   for (int i = 0; i < childCount; i++) {
                       path = getChildTreePath(i);
                       JTree.this.addSelectionPath(path);
                   }
                }
            }"
4735672,none,"    private static void validateArguments(final int p, final int sp) throws UDFArgumentException {
        if (p < 4 || p > sp) {
            throw new UDFArgumentException(""p must be between 4 and sp (inclusive)"");
        }
        if (sp > 32) {
            throw new UDFArgumentException(""sp values greater than 32 not supported"");
        }
    }"
6633402,none,"	 */
	private void getSuggestions(final String query) {
		if (query == null || query.isEmpty()) {
			return;
		}

		// Initialize the locatorSugestion parameters
		locatorParams(SUGGEST_PLACE);

		// Attach a listener to the locator task since
		// the LocatorTask may or may not be loaded the
		// the very first time a user types text into the search box.
		// If the Locator is already loaded, the following listener
		// is invoked immediately.

		mLocator.addDoneLoadingListener(new Runnable() {
			@Override public void run() {
				// Does this locator support suggestions?
				if (mLocator.getLoadStatus().name() != LoadStatus.LOADED.name()){
					//Log.i(TAG,""##### "" + mLocator.getLoadStatus().name());
				} else if (!mLocator.getLocatorInfo().isSupportsSuggestions()){
					return;
				}
				//og.i(TAG,""****** "" + mLocator.getLoadStatus().name());
				final ListenableFuture<List<SuggestResult>> suggestionsFuture = mLocator.suggestAsync(query, suggestParams);
				// Attach a done listener that executes upon completion of the async call
				suggestionsFuture.addDoneListener(new Runnable() {
					@Override
					public void run() {
						try {
							// Get the suggestions returned from the locator task.
							// Store retrieved suggestions for future use (e.g. if the user
							// selects a retrieved suggestion, it can easily be
							// geocoded).
							mSuggestionsList = suggestionsFuture.get();

							showSuggestedPlaceNames(mSuggestionsList);

						} catch (Exception e) {
							Log.e(TAG, ""Error on getting suggestions "" + e.getMessage());
						}
					}
				});
			}
		});
		// Initiate the asynchronous call
		mLocator.loadAsync();"
7155736,none,"        public int read(byte[] b) throws IOException {
            return readInternal(b, 0, b.length);
        }"
4247131,none,"    @Override
    public void dispose()
    {
        this.managers.clear();
    }"
7960668,none,"	public TitanValue_Array(final TitanValue_Array<T> otherValue) {
		clazz = otherValue.clazz;
		array_size = otherValue.array_size;
		indexOffset = otherValue.indexOffset;
		array_elements = new Base_Type[array_size];

		for (int i = 0; i < array_size; ++i) {
			try {
				final T helper = clazz.newInstance();
				helper.operator_assign(otherValue.array_elements[i]);
				array_elements[i] = helper;
			} catch (InstantiationException e) {
				throw new TtcnError(MessageFormat.format(""Internal error: class `{0}'' could not be instantiated ({1})."", clazz, e));
			} catch (IllegalAccessException e) {
				throw new TtcnError(MessageFormat.format(""Internal error: class `{0}'' could not be instantiated ({1})."", clazz, e));
			}
		}
	}"
5418030,none,"    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }"
8423835,none,"    public Certificate getCertificate() throws Exception {
        return getConfiguration().getCertificate();
    }"
6534806,none,"    SetAudioVolume(int zone, int volume, int min, int max) {
        super(""setAudioVolume"", ""1.1"");
        long scaled_volume = scaleVolume(volume, min, max);
        params = new Param[] { new Param(scaled_volume, zone) };
    }"
4933194,none,"    private boolean exists( Group group )
    {
        String index = group.getName();
        try
        {
            findGroup( index );
            return true;
        }
        catch( NoSuchPrincipalException e )
        {
            return false;
        }
    }"
4002437,none,"    public AbstractView getView() {
        return view;
    }"
5440125,none,"    @Override
    public void clear() {
        if (length > 0) {
            items = new Object[items.length];
            length = 0;
            modificationCount++;

            if (listListeners != null) {
                listListeners.listCleared(this);
            }
        }
    }"
5303636,none,"    public static void getIdColumns(FieldMapping fmd, List cols) {
        Column[] pkCols =  ((ValueMappingImpl)fmd.getValue()).getColumns();
        for (int j = 0; j < pkCols.length; j++) {
            Column newCol = new Column();
            newCol.copy(pkCols[j]);
            cols.add(newCol);
        }
    }"
4388389,none,"    public void addAuxiliaryObjectClasses( AuxiliaryObjectClass... auxiliaryObjectClasses )
    {
        for ( AuxiliaryObjectClass auxiliaryObjectClass : auxiliaryObjectClasses )
        {
            this.auxiliaryObjectClasses.add( auxiliaryObjectClass );
        }
    }"
8067020,none,"		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Bug377311TestLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getChildAccess().getGroup(), ""rule__Child__Group__0"");
			builder.put(grammarAccess.getRootAccess().getChildsAssignment(), ""rule__Root__ChildsAssignment"");
			builder.put(grammarAccess.getChildAccess().getNameAssignment_1(), ""rule__Child__NameAssignment_1"");
		}"
6021504,none,"        @JsonCreator
        public UsernamePasswordAuthentication(
            @JsonProperty(""username"") String username,
            @JsonProperty(""password"") String password) {
            this.password = password;
            this.username = username;
        }"
6190083,none,"  public void hide() {
    view.close();
  }"
8601288,none,"    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case TPUT:
        return isSetTput();
      }
      throw new java.lang.IllegalStateException();
    }"
7910366,none,"  public static TProtocol newProtocolInstance(ThriftProtocol protocol, TTransport transport) {
    return getProtocolFactory(protocol).getProtocol(transport);
  }"
4672583,none,"  private int getMatchingLevelForNodes(Node n1, Node n2) {
    int count = 0;
    do {
      if (n1.equals(n2)) {
        return count;
      }
      ++count;
      n1 = n1.getParent();
      n2 = n2.getParent();
    } while (n1 != null);
    return this.maxLevel;
  }"
8768716,none,"      public addSSHJobSubmissionDetails_args getEmptyArgsInstance() {
        return new addSSHJobSubmissionDetails_args();
      }"
8104990,none,"  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP:
        setOp(OP_EDEFAULT);
        return;
      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:
        setSource((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }"
4627996,none,"    private void initFields() {
      poolId_ = """";
      blockId_ = 0L;
      numBytes_ = 0L;
      generationStamp_ = 0L;
    }"
5769657,none,"    @Override
    public void setIntValues(final Item orgUnitItem, final Attribute attr, final RealmTO realmTO) {
        List<Object> values = null;
        if (attr != null) {
            values = attr.getValue();
            for (ItemTransformer transformer : MappingUtils.getItemTransformers(orgUnitItem)) {
                values = transformer.beforePull(orgUnitItem, realmTO, values);
            }
        }

        if (values != null && !values.isEmpty() && values.get(0) != null) {
            switch (orgUnitItem.getIntAttrName()) {
                case ""name"":
                    realmTO.setName(values.get(0).toString());
                    break;

                case ""fullpath"":
                    String parentFullPath = StringUtils.substringBeforeLast(values.get(0).toString(), ""/"");
                    Realm parent = realmDAO.findByFullPath(parentFullPath);
                    if (parent == null) {
                        LOG.warn(""Could not find Realm with path {}, ignoring"", parentFullPath);
                    } else {
                        realmTO.setParent(parent.getFullPath());
                    }
                    break;

                default:
            }
        }
    }"
7533683,none,"	protected void checkClosure(int bite) throws IOException {
		if (bite < 0) {
			logger.debug(""Socket closed during message assembly"");
			throw new IOException(""Socket closed during message assembly"");
		}
	}"
5551982,none,"  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TPrivilegePrincipalType)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    }
  }"
4850810,none,"    @Override
    Path buildPath(boolean workspacePath) throws RepositoryException {
        Path parentPath = parent.buildPath(workspacePath);
        return getPathFactory().create(parentPath, getName(), true);
    }"
8678273,none,"    protected final void unregisterMBean() throws IgniteSpiException {
        // Unregister SPI MBean.
        if (spiMBean != null && ignite != null) {
            assert !U.IGNITE_MBEANS_DISABLED;

            MBeanServer jmx = ignite.configuration().getMBeanServer();

            assert jmx != null;

            try {
                jmx.unregisterMBean(spiMBean);

                if (log.isDebugEnabled())
                    log.debug(""Unregistered SPI MBean: "" + spiMBean);
            }
            catch (JMException e) {
                throw new IgniteSpiException(""Failed to unregister SPI MBean: "" + spiMBean, e);
            }
        }
    }"
9516656,none,"  @Override
  public boolean equals(Object other) {
    if (other == null)
      return false;
    if (other.getClass().isAssignableFrom(this.getClass())) {
      return this.getProto().equals(this.getClass().cast(other).getProto());
    }
    return false;
  }"
6973553,none,"    @Override
    public void put(Range<K> range, V value) {
      checkArgument(
          subRange.encloses(range), ""Cannot put range %s into a subRangeMap(%s)"", range, subRange);
      TreeRangeMap.this.put(range, value);
    }"
7413911,none,"        private LLVMDebugObject dereference() {
            // the pointer may change at runtime, so we cannot just cache the dereferenced object
            if (pointerType == null || (!pointerType.isSafeToDereference() && !value.isAlwaysSafeToDereference(offset))) {
                return null;
            }

            final LLVMDebugValue targetValue = value.dereferencePointer(offset);
            if (targetValue == null) {
                return null;
            }
            return instantiate(pointerType.getBaseType(), 0L, targetValue, null);
        }"
5622695,none,"    public void emitBindableImplementsConstructorCode(boolean popIndent) {
        writeNewline(""// Compiler generated Binding support implementation:"");
        String dispatcherClass = getEmitter().formatQualifiedName(DISPATCHER_CLASS_QNAME);
        write(ASEmitterTokens.THIS);
        write(ASEmitterTokens.MEMBER_ACCESS);
        write(BINDABLE_DISPATCHER_NAME);
        write(ASEmitterTokens.SPACE);
        write(ASEmitterTokens.EQUAL);
        write(ASEmitterTokens.SPACE);
        write(ASEmitterTokens.NEW);
        write(ASEmitterTokens.SPACE);
        write(dispatcherClass);
        write(ASEmitterTokens.PAREN_OPEN);
        write(ASEmitterTokens.THIS);
        write(ASEmitterTokens.PAREN_CLOSE);
        writeNewline(ASEmitterTokens.SEMICOLON);
        if (popIndent) writeNewline("""",false);
        else writeNewline();

    }"
8901898,none,"    @Override
    public Pool<OrcEncodedColumnBatch> createEncodedColumnBatchPool() {
      return ECB_POOL;
    }"
4197031,none,"    public File getLocationForDisk(DataDirectory dataDirectory)
    {
        if (dataDirectory != null)
            for (File dir : dataPaths)
                if (dir.getAbsolutePath().startsWith(dataDirectory.location.getAbsolutePath()))
                    return dir;
        return null;
    }"
6265027,none,"	@Test
	public void checkEquality() {

		// Construct a component to test against.
		HeatExchanger component = new HeatExchanger();
		component.setInnerRadius(2.0);
		component.setLength(3.0);
		component.setNumElements(4);

		// Construct a component equal to the first.
		HeatExchanger equalComponent = new HeatExchanger();
		equalComponent.setInnerRadius(2.0);
		equalComponent.setLength(3.0);
		equalComponent.setNumElements(4);

		// Construct a component equal to the first for checking transitivity
		HeatExchanger transComponent = new HeatExchanger();
		transComponent.setInnerRadius(2.0);
		transComponent.setLength(3.0);
		transComponent.setNumElements(4);

		// Construct a component not equal to the first.
		HeatExchanger unequalComponent = new HeatExchanger();

		// Check that component and unequalComponet are not the same.
		assertFalse(component.equals(unequalComponent));
		assertFalse(unequalComponent.equals(component));

		// Check that equality also fails with illegal values
		assertFalse(component == null);
		assertFalse(component.equals(11));
		assertFalse(""House Lannister"".equals(component));

		// Check is equals() is reflexive and symmetric.
		assertTrue(component.equals(component));
		assertTrue(component.equals(equalComponent)
				&& equalComponent.equals(component));

		// Check equals() is transitive.
		if (component.equals(transComponent)
				&& transComponent.equals(equalComponent)) {
			assertTrue(component.equals(equalComponent));
		} else {
			fail();
		}
		// Check the hashCode values.
		assertEquals(component.hashCode(), component.hashCode());
		assertEquals(component.hashCode(), equalComponent.hashCode());
		assertFalse(component.hashCode() == unequalComponent.hashCode());

		return;

	}"
7560859,none,"	@Nullable
	private ResourceUrlProvider findResourceUrlProvider(HttpServletRequest request) {
		if (this.resourceUrlProvider != null) {
			return this.resourceUrlProvider;
		}
		return (ResourceUrlProvider) request.getAttribute(
				ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR);
	}"
3857363,none,"    public void setTmfeIsSet(boolean value) {
      if (!value) {
        this.tmfe = null;
      }
    }"
4055848,none,"  public static String addLengthPrefixedCoder(
      String coderId, RunnerApi.Components.Builder components, boolean replaceWithByteArrayCoder) {
    String lengthPrefixedByteArrayCoderId = addLengthPrefixByteArrayCoder(components);
    String urn = components.getCodersOrThrow(coderId).getSpec().getSpec().getUrn();

    // We handle three cases:
    //  1) the requested coder is already a length prefix coder. In this case we just honor the
    //     request to replace the coder with a byte array coder.
    //  2) the requested coder is a known coder but not a length prefix coder. In this case we
    //     rebuild the coder by recursively length prefixing any unknown component coders.
    //  3) the requested coder is an unknown coder. In this case we either wrap the requested coder
    //     with a length prefix coder or replace it with a length prefix byte array coder.
    if (ModelCoders.LENGTH_PREFIX_CODER_URN.equals(urn)) {
      return replaceWithByteArrayCoder ? lengthPrefixedByteArrayCoderId : coderId;
    } else if (ModelCoders.urns().contains(urn)) {
      return addForModelCoder(coderId, components, replaceWithByteArrayCoder);
    } else {
      return replaceWithByteArrayCoder
          ? lengthPrefixedByteArrayCoderId
          : addWrappedWithLengthPrefixCoder(coderId, components);
    }
  }"
4705856,none,"    protected void execute(final IOEventHandlerFactory ioEventHandlerFactory) throws IOException {
        Args.notNull(ioEventHandlerFactory, ""Handler factory"");
        if (ioReactorRef.compareAndSet(null, createIOReactor(
                ioEventHandlerFactory,
                ioReactorConfig,
                workerThreadFactory,
                ShutdownCommand.GRACEFUL_NORMAL_CALLBACK))) {
            if (status.compareAndSet(Status.READY, Status.RUNNING)) {
                ioReactorRef.get().start();
            }
        } else {
            throw new IllegalStateException(""I/O reactor has already been started"");
        }
    }"
8902566,none,"      public short getThriftFieldId() {
        return _thriftId;
      }"
6898198,none,"    @Override
    public R visitLink(LinkTree node, P p) {
        return defaultAction(node, p);
    }"
7232869,none,"  public ShadowProviderGenerator(
      RobolectricModel model,
      ProcessingEnvironment environment,
      String shadowPackage,
      boolean shouldInstrumentPackages,
      int priority) {
    this.messager = environment.getMessager();
    this.filer = environment.getFiler();
    this.model = model;
    this.shadowPackage = shadowPackage;
    this.shouldInstrumentPackages = shouldInstrumentPackages;
    this.priority = priority;
  }"
7375322,none,"		@Bean
		@ConditionalOnSingleCandidate(RabbitTemplate.class)
		public RabbitMessagingTemplate rabbitMessagingTemplate(
				RabbitTemplate rabbitTemplate) {
			return new RabbitMessagingTemplate(rabbitTemplate);
		}"
6909063,none,"    public boolean hasSameBounds(ForAll t, ForAll s) {
        List<Type> l1 = t.tvars;
        List<Type> l2 = s.tvars;
        while (l1.nonEmpty() && l2.nonEmpty() &&
               isSameType(l1.head.getUpperBound(),
                          subst(l2.head.getUpperBound(),
                                s.tvars,
                                t.tvars))) {
            l1 = l1.tail;
            l2 = l2.tail;
        }
        return l1.isEmpty() && l2.isEmpty();
    }"
5237277,none,"  static void copy(final InputStream input, final OutputStream output) {
    if (output == null || input == null) {
      return;
    }

    try {
      ByteBuffer inBuffer = ByteBuffer.allocate(8192);
      ReadableByteChannel ic = Channels.newChannel(input);
      WritableByteChannel oc = Channels.newChannel(output);
      while (ic.read(inBuffer) > 0) {
        inBuffer.flip();
        oc.write(inBuffer);
        inBuffer.rewind();
      }
    } catch (IOException e) {
      throw new ODataRuntimeException(""Error on reading request content"");
    } finally {
      closeStream(input);
      closeStream(output);
    }
  }"
9255886,none,"    private static void emitStackMove(CompilationResultBuilder crb, AArch64MacroAssembler masm, AllocatableValue result, Value input) {
        try (ScratchRegister r1 = masm.getScratchRegister()) {
            try (ScratchRegister r2 = masm.getScratchRegister()) {
                Register rscratch1 = r1.getRegister();
                Register rscratch2 = r2.getRegister();
                // use the slot kind to define the operand size
                PlatformKind kind = input.getPlatformKind();
                final int size = kind.getSizeInBytes() * Byte.SIZE;

                // Always perform stack -> stack copies through integer registers
                crb.blockComment(""[stack -> stack copy]"");
                AArch64Address src = loadStackSlotAddress(crb, masm, asStackSlot(input), rscratch2);
                masm.ldr(size, rscratch1, src);
                AArch64Address dst = loadStackSlotAddress(crb, masm, asStackSlot(result), rscratch2);
                masm.str(size, rscratch1, dst);
            }
        }
    }"
6478457,none,"	@Override
	protected byte[] getVariableHeader() throws MqttException {
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			DataOutputStream outputStream = new DataOutputStream(baos);

			// Encode the Message ID
			outputStream.writeShort(msgId);


			// Write Identifier / Value Fields
			byte[] identifierValueFieldsByteArray = this.properties.encodeProperties();
			outputStream.write(identifierValueFieldsByteArray);
			outputStream.flush();
			return baos.toByteArray();
		} catch (IOException ioe) {
			throw new MqttException(ioe);
		}
	}"
7950542,none,"	@Override
	/** {@inheritDoc} */
	public StatementBlock.ReturnStatus_type hasReturn(final CompilationTimeStamp timestamp) {
		if (statementblock != null) {
//			if (StatementBlock.ReturnStatus_type.RS_NO.equals(statementblock.hasReturn(timestamp))) {
//				return StatementBlock.ReturnStatus_type.RS_NO;
//			}
//
//			return StatementBlock.ReturnStatus_type.RS_MAYBE;//it is not know if it will execute even once
			return hasReturn;
		}

		return StatementBlock.ReturnStatus_type.RS_NO;
	}"
7377189,none,"	@SuppressWarnings(""unchecked"")
	private static <T> boolean test(Annotation annotation, String metaAnnotationName, String attribute,
			Predicate<T> filter) {

		if (annotation.annotationType().getName().equals(metaAnnotationName)) {

			Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation);

			return !attributes.isEmpty() && filter.test((T) attributes.get(attribute));
		}

		MultiValueMap<String, Object> attributes = AnnotatedElementUtils
				.getAllAnnotationAttributes(annotation.annotationType(), metaAnnotationName);

		if (attributes == null || attributes.isEmpty()) {
			return false;
		}

		List<Object> elementTypes = attributes.get(attribute);

		for (Object value : elementTypes) {

			if (filter.test((T) value)) {
				return true;
			}
		}
		return false;
	}"
8991538,none,"  private void refill() throws IOException {
    offset += usableLength;
    int leftover = length - usableLength;
    System.arraycopy(buffer, usableLength, buffer, 0, leftover);
    int requested = buffer.length - leftover;
    int returned = read(input, buffer, leftover, requested);
    length = returned + leftover;
    if (returned < requested) /* reader has been emptied, process the rest */
      usableLength = length;
    else { /* still more data to be read, find a safe-stopping place */
      usableLength = findSafeEnd();
      if (usableLength < 0)
        usableLength = length; /*
                                * more than IOBUFFER of text without space,
                                * gonna possibly truncate tokens
                                */
    }

    breaker.setText(buffer, 0, Math.max(0, usableLength));
  }"
6183429,none,"  public static int getSiblingIndexWithClassName(Element element, String className) {
    int index = 0;
    while (element != null) {
      element = (Element) element.getPreviousSibling();
      if (element != null && Elements.hasClassName(className, element)) {
        ++index;
      }
    }
    return index;
  }"
4572409,none,"        static GlyphSubstitutionSubtable create(String id, int sequence, int flags, int format, GlyphCoverageTable coverage, List entries) {
            if (format == 1) {
                return new ReverseChainedSingleSubtableFormat1(id, sequence, flags, format, coverage, entries);
            } else {
                throw new UnsupportedOperationException();
            }
        }"
6174952,none,"  @Override
  public DebugConfiguration createConfiguration(
      String typeId, String name, String host, int port, Map<String, String> connectionProperties) {
    final DebugConfigurationType configurationType =
        configurationTypeRegistry.getConfigurationTypeById(typeId);

    final DebugConfiguration configuration =
        new DebugConfiguration(
            configurationType,
            generateUniqueConfigurationName(configurationType, name),
            host,
            port,
            connectionProperties);
    configurations.add(configuration);
    saveConfigurations();
    fireConfigurationAdded(configuration);

    return configuration;
  }"
4471454,none,"    @Override
    public void write(byte[] b) throws IOException {
      count += b.length;
      out.write(b);
    }"
7785366,none,"		protected final void doSelect(final int index)
		{
			String value = getChoiceValueForIndex(index);
			assignValueToFormComponent(formComponent, value);
		}"
3927368,none,"      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelCompaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.login = iprot.readBinary();
          struct.setLoginIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }"
3947756,none,"        static Object checkValue(Object value) {
            if (value == null) {
                throw new IllegalArgumentException(""Value must not be null"");
            }
            return value;
        }"
4806304,none,"	public LiteralType getLiteral() {
		return literal;
	}"
4980296,none,"    @Override
    public String toString() {
        return String.format(""Partition(topic = %s, partition = %d, leader = %s, replicas = %s, isr = %s, offlineReplicas = %s)"",
                             topic,
                             partition,
                             leader == null ? ""none"" : leader.idString(),
                             formatNodeIds(replicas),
                             formatNodeIds(inSyncReplicas),
                             formatNodeIds(offlineReplicas));
    }"
4960946,none,"    boolean updateNewAndRestoringTasks() {
        active.initializeNewTasks();
        standby.initializeNewTasks();

        final Collection<TopicPartition> restored = changelogReader.restore(active);

        active.updateRestored(restored);

        if (active.allTasksRunning()) {
            final Set<TopicPartition> assignment = consumer.assignment();
            log.trace(""Resuming partitions {}"", assignment);
            consumer.resume(assignment);
            assignStandbyPartitions();
            return true;
        }
        return false;
    }"
9005432,none,"  public Geo3dRectangleShape(final GeoBBox shape,
                             final SpatialContext spatialcontext,
                             double minX,
                             double maxX,
                             double minY,
                             double maxY) {
    super(shape, spatialcontext);
    this.minX = minX;
    this.maxX = maxX;
    this.minY = minY;
    this.maxY = maxY;
  }"
7718229,none,"        public final boolean isPrivateImage() {
            return !StringUtil.isNullOrEmpty(this.endpointLink);
        }"
7270024,none,"    public void paintItem(ChartItem item, List<ItemSelection> highlighted,
                          List<ItemSelection> selected, Graphics2D g,
                          Rectangle dirtyArea, ChartContext context) {
//        if (!(item instanceof ProfilerXYItem))
//            throw new UnsupportedOperationException(""Unsupported item: "" + item); // NOI18N
//        if (!(context instanceof ProfilerXYChartComponent.Context))
//            throw new UnsupportedOperationException(""Unsupported context: "" + context);
        
        paint((SynchronousXYItem)item, highlighted, selected, g, dirtyArea,
              (SynchronousXYChartContext)context);
    }"
4487581,none,"    public static org.apache.drill.exec.proto.UserProtos.GetQueryPlanFragments parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }"
8617061,none,"    public void onBeforeWrite() {
        if (req && reqSndTs == 0) {
            reqSndTs = System.nanoTime();

            reqSndTsMillis = System.currentTimeMillis();
        }

        if (!req && resSndTs == 0) {
            resSndTs = System.nanoTime();

            resSndTsMillis = System.currentTimeMillis();
        }
    }"
7389374,none,"		@Bean
		public ClassPathFileSystemWatcher classPathFileSystemWatcher(
				FileSystemWatcherFactory fileSystemWatcherFactory,
				ClassPathRestartStrategy classPathRestartStrategy) {
			DefaultRestartInitializer restartInitializer = new DefaultRestartInitializer();
			URL[] urls = restartInitializer.getInitialUrls(Thread.currentThread());
			if (urls == null) {
				urls = new URL[0];
			}
			return new ClassPathFileSystemWatcher(fileSystemWatcherFactory,
					classPathRestartStrategy, urls);
		}"
7273813,none,"    private void appTypeUrlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_appTypeUrlFocusLost
        appTypeUrl.setSelectionEnd(0);
    }//GEN-LAST:event_appTypeUrlFocusLost"
5141485,none,"    private Set<Taglet> collectTaglets()
        throws MavenReportException
    {
        Set<Taglet> result = new LinkedHashSet<>();

        if ( includeDependencySources )
        {
            try
            {
                resolveDependencyBundles();
            }
            catch ( IOException e )
            {
                throw new MavenReportException(
                    ""Failed to resolve javadoc bundles from dependencies: "" + e.getMessage(), e );
            }

            if ( isNotEmpty( dependencyJavadocBundles ) )
            {
                for ( JavadocBundle bundle : dependencyJavadocBundles )
                {
                    JavadocOptions options = bundle.getOptions();
                    if ( options != null && isNotEmpty( options.getTaglets() ) )
                    {
                        result.addAll( options.getTaglets() );
                    }
                }
            }
        }

        if ( taglets != null && taglets.length > 0 )
        {
            result.addAll( Arrays.asList( taglets ) );
        }

        return result;
    }"
8436618,none,"    @Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
        BeanValidatorEndpoint endpoint = new BeanValidatorEndpoint(uri, this);
        endpoint.setLabel(remaining);
        setProperties(endpoint, parameters);
        return endpoint;
    }"
4214385,none,"    public void initialize(BSFManager mgr, String lang,Vector declaredBeans)
    throws BSFException
    {
        super.initialize(mgr, lang, declaredBeans);
        mgrfuncs = new BSFFunctions (mgr, this);
    }"
3864226,none,"    @Override
    public boolean evaluate(Resource resource) {

      Set<Map<String, Object>> extendedPropertySet = joinedResources.get(resource);

      if (extendedPropertySet == null) {
        return predicate.evaluate(resource);
      }

      for (Map<String, Object> extendedProperties : extendedPropertySet) {
        Resource extendedResource = new ExtendedResourceImpl(resource, extendedProperties);

        if (predicate.evaluate(extendedResource)) {
          return true;
        }
      }
      return false;
    }"
6106646,none,"    public static <T> boolean removeIf(List<T> list, Predicate<? super T> predicate, Procedure<? super T> procedure)
    {
        boolean changed = false;
        for (int i = 0; i < list.size(); i++)
        {
            T each = list.get(i);
            if (predicate.accept(each))
            {
                procedure.value(each);
                list.remove(i--);
                changed = true;
            }
        }
        return changed;
    }"
8260696,none,"		public static IGrammarAwareElementType createWithExpression_Alternatives_2ElementType() {
			return new IGrammarAwareElementType(""WithExpression_Alternatives_2_ELEMENT_TYPE"", SimpleBeeLangTestLanguageLanguage.INSTANCE, GRAMMAR_ACCESS.getWithExpressionAccess().getAlternatives_2());
		}"
6164700,none,"  @Inject
  public UsagesNode(
      @Assisted UsagesResponse response,
      NodeFactory nodeFactory,
      PromiseProvider promiseProvider,
      TreeStyles styles,
      JavaResources resources) {
    this.response = response;
    this.nodeFactory = nodeFactory;
    this.promiseProvider = promiseProvider;
    this.resources = resources;
    this.styles = styles;
  }"
7863512,none,"  @Override
  public void removeAsyncEventQueueId(String asyncEventQueueId) {
    super.removeAsyncEventQueueId(asyncEventQueueId);
    new UpdateAttributesProcessor(this).distribute();
  }"
4661962,none,"	@Override
	public void writeSnapshot(DataOutputView out) throws IOException {
		throw new UnsupportedOperationException(
			""This is a dummy config snapshot used only for backwards compatibility."");
	}"
7071050,none,"        public XMLString getStringValue(int nodeHandle) {
        // ###zaj - researching
        nodes.readSlot(nodeHandle, gotslot);
        int nodetype=gotslot[0] & 0xFF;
        String value=null;

        switch (nodetype) {
        case TEXT_NODE:
        case COMMENT_NODE:
        case CDATA_SECTION_NODE:
                value= m_char.getString(gotslot[2], gotslot[3]);
                break;
        case PROCESSING_INSTRUCTION_NODE:
        case ATTRIBUTE_NODE:
        case ELEMENT_NODE:
        case ENTITY_REFERENCE_NODE:
        default:
                break;
        }
        return m_xsf.newstr( value );

        }"
6241200,none,"    public ThreeCornerLoopLabelPositionGenerator(final SelfLoopNode slNode) {
        super(slNode);
    }"
4112198,none,"    protected KubernetesClient getClient(ConfigBag config) {
        if (client == null) {
            KubernetesClientRegistry registry = getConfig(KUBERNETES_CLIENT_REGISTRY);
            client = registry.getKubernetesClient(ResolvingConfigBag.newInstanceExtending(getManagementContext(), config));
        }
        return client;
    }"
9503296,none,"  public synchronized void removePipeline(Pipeline pipeline) {
    for (DatanodeDetails details : pipeline.getNodes()) {
      UUID dnId = details.getUuid();
      dn2ObjectMap.computeIfPresent(dnId,
          (k, v) -> {
            v.remove(pipeline.getId());
            return v;
          });
    }
  }"
8194817,none,"  @Override
  public byte[] getByteArrayValue(final String name) {
    Object _value = this.getValue(name);
    return ((byte[]) _value);
  }"
3801914,none,"    public static void main(String[] args) throws Exception {
        isLocal = false;
        conf = JStormHelper.getConfig(args);
        if (args.length != 0) {
            spoutSingle = false;
        }
        test();
    }"
4737119,none,"        public boolean iterate(DoubleWritable xi) throws HiveException {
            if (xi == null) {// skip
                return true;
            }
            if (partial == null) {
                this.partial = new PartialResult();
            }
            partial.iterate(xi.get());
            return true;
        }"
3981428,none,"    public ConstraintModel( Annotation annotation, Class<? extends Constraint<?, ?>> constraintClass )
    {
        super( annotation );
        this.constraintClass = constraintClass;
    }"
4132083,none,"  public SqlSetOperator(
      String name,
      SqlKind kind,
      int prec,
      boolean all) {
    super(
        name,
        kind,
        prec,
        true,
        ReturnTypes.LEAST_RESTRICTIVE,
        null,
        OperandTypes.SET_OP);
    this.all = all;
  }"
4522222,none,"	public void put(String sid, UPnPEventListener listener) {
		if (!sidListener.containsKey(sid)) {
			Vector vec = new Vector();
			vec.add(listener);
			sidListener.put(sid, vec);
		} else {
			Vector vec = (Vector) sidListener.get(sid);
			if (!vec.contains(listener)) {
				vec.add(listener);
			}
		}
	}"
4371699,none,"    public void writeEntityRef(String ent) throws XMLStreamException {
        delegate.writeEntityRef(ent);
    }"
6941861,none,"    @Override
    public void bindInterceptor(
        Matcher<? super Class<?>> classMatcher,
        Matcher<? super Method> methodMatcher,
        org.aopalliance.intercept.MethodInterceptor... interceptors) {
      elements.add(
          new InterceptorBinding(getElementSource(), classMatcher, methodMatcher, interceptors));
    }"
7483476,none,	protected Customer1942() {}
7592205,none,"  protected void bindMetadataProvider(final MetadataProvider mp) {
    synchronized (lock) {
      Validate.notNull(mp, ""Metadata provider required"");
      final String mid = mp.getProvidesType();
      Validate.isTrue(MetadataIdentificationUtils.isIdentifyingClass(mid),
          ""Metadata provider '%s' violated interface contract by returning '%s'"", mp, mid);
      Validate.isTrue(!providerMap.containsKey(mid),
          ""Metadata provider '%s' already is providing metadata for '%s'"", providerMap.get(mid),
          mid);
      providers.add(mp);
      providerMap.put(mid, mp);
    }
  }"
4219128,none,"    public void onRemove(InetAddressAndPort endpoint)
    {
        convict(endpoint, Double.MAX_VALUE);
    }"
7786250,none,"	public Bytes getFileMaxSize()
	{
		return fileMaxSize;
	}"
6812825,none,"    public final void norm1_AnnotatedExpression__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0()); 
            }
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
7113719,none,"    public static StringBuffer formatInput(StringBuffer appendTo,
                                           Replaceable input,
                                           Transliterator.Position pos) {
        return formatInput(appendTo, (ReplaceableString) input, pos);
    }"
9218768,none,"    public Enumeration<K> keys() {
        Node<K,V>[] t;
        int f = (t = table) == null ? 0 : t.length;
        return new KeyIterator<K,V>(t, f, 0, f, this);
    }"
5235274,none,"    public AvroRpcResourceManager(int port) {
        this.port = port;

        List<String> propertiesFiles = new ArrayList<>();
        // set up the configuration, if there is any
        if (System.getProperty(""org.apache.oodt.cas.resource.properties"") != null) {
            propertiesFiles.add(System.getProperty(""org.apache.oodt.cas.resource.properties""));
        }

        configurationManager = ConfigurationManagerFactory
                .getConfigurationManager(Component.RESOURCE_MANAGER, propertiesFiles);
    }"
6284070,none,"    @Override
    public boolean contains(String documentName) {
        requireNonNull(documentName, ""documentName is required"");
        return documents.containsKey(documentName);
    }"
4909332,none,"    private boolean tryCommit() {
        try {
            NodeState newRoot = nodeStore.merge(rootBuilder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
            totalMigratedNodes += migratedNodes;
            log.info(""{} nodes merged succesfully. Nodes migrated in this session: {}"", migratedNodes, totalMigratedNodes);
            lastCommit = System.currentTimeMillis();
            migratedNodes = 0;

            rootBuilder = newRoot.builder();
            nodeIterator = nodeIterator.switchRoot(newRoot);

            return true;
        } catch (CommitFailedException e) {
            log.error(""Can't commit. Resetting the migrator"", e);
            refreshAndReset(nodeStore.getRoot());
            return false;
        }
    }"
5338990,none,"    @Override
    protected void writeTransactionResponse(ResponseCode response, String explanation) throws IOException {
        HttpCommunicationsSession commSession = (HttpCommunicationsSession) peer.getCommunicationsSession();
        if(TransferDirection.RECEIVE.equals(direction)){
            switch (response) {
                case CONFIRM_TRANSACTION:
                    logger.debug(""{} Confirming transaction. checksum={}"", this, explanation);
                    commSession.setChecksum(explanation);
                    break;
                case TRANSACTION_FINISHED:
                    logger.debug(""{} Finishing transaction."", this);
                    break;
                case CANCEL_TRANSACTION:
                    logger.debug(""{} Canceling transaction. explanation={}"", this, explanation);
                    TransactionResultEntity resultEntity = apiClient.commitReceivingFlowFiles(transactionUrl, ResponseCode.CANCEL_TRANSACTION, null);
                    ResponseCode cancelResponse = ResponseCode.fromCode(resultEntity.getResponseCode());
                    switch (cancelResponse) {
                        case CANCEL_TRANSACTION:
                            logger.debug(""{} CANCEL_TRANSACTION, The transaction is canceled on server properly."", this);
                            break;
                        default:
                            logger.warn(""{} CANCEL_TRANSACTION, Expected the transaction is canceled on server, but received {}."", this, cancelResponse);
                            break;
                    }
                    break;
            }
        } else {
            switch (response) {
                case FINISH_TRANSACTION:
                    // The actual HTTP request will be sent in readTransactionResponse.
                    logger.debug(""{} Finished sending flow files."", this);
                    break;
                case BAD_CHECKSUM: {
                        TransactionResultEntity resultEntity = apiClient.commitTransferFlowFiles(transactionUrl, ResponseCode.BAD_CHECKSUM);
                        ResponseCode badChecksumCancelResponse = ResponseCode.fromCode(resultEntity.getResponseCode());
                        switch (badChecksumCancelResponse) {
                            case CANCEL_TRANSACTION:
                                logger.debug(""{} BAD_CHECKSUM, The transaction is canceled on server properly."", this);
                                break;
                            default:
                                logger.warn(""{} BAD_CHECKSUM, Expected the transaction is canceled on server, but received {}."", this, badChecksumCancelResponse);
                                break;
                        }

                    }
                    break;
                case CONFIRM_TRANSACTION:
                    // The actual HTTP request will be sent in readTransactionResponse.
                    logger.debug(""{} Transaction is confirmed."", this);
                    break;
                case CANCEL_TRANSACTION: {
                        logger.debug(""{} Canceling transaction."", this);
                        TransactionResultEntity resultEntity = apiClient.commitTransferFlowFiles(transactionUrl, ResponseCode.CANCEL_TRANSACTION);
                        ResponseCode cancelResponse = ResponseCode.fromCode(resultEntity.getResponseCode());
                        switch (cancelResponse) {
                            case CANCEL_TRANSACTION:
                                logger.debug(""{} CANCEL_TRANSACTION, The transaction is canceled on server properly."", this);
                                break;
                            default:
                                logger.warn(""{} CANCEL_TRANSACTION, Expected the transaction is canceled on server, but received {}."", this, cancelResponse);
                                break;
                        }
                    }
                    break;
            }
        }
    }"
8959710,none,"  @Override
  public void initialize(Configuration conf, Properties tbl) throws SerDeException {
    super.initialize(conf, tbl);
    try {
      @SuppressWarnings(""unchecked"")
      Parser<? extends Message> tmpParser = (Parser<? extends Message>)protoMessageClass
          .getField(""PARSER"").get(null);
      this.parser = tmpParser;
    } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException
        | SecurityException e) {
      throw new SerDeException(""Unable get PARSER from class: "" + protoMessageClass.getName(), e);
    }
  }"
6117995,none,"        @Override
        public MutableSet<T> symmetricDifference(SetIterable<? extends T> setB)
        {
            return this.getDelegate().symmetricDifference(setB);
        }"
7902495,none,"  private ReferenceCountedWriter createReferenceCountedWriter(Path logFilePath) {
    try {
      Files.createDirectories(logFilePath.getParent());
      return new ReferenceCountedWriter(
          new OutputStreamWriter(
              new FileOutputStream(logFilePath.toString()), StandardCharsets.UTF_8));
    } catch (FileNotFoundException e) {
      throw new RuntimeException(String.format(""Could not create file [%s]."", logFilePath), e);
    } catch (IOException e) {
      throw new RuntimeException(String.format(""Exception wrapping file [%s]."", logFilePath), e);
    }
  }"
4139640,none,"    @Override public ColumnStrategy generationStrategy(RelOptTable table,
        int iColumn) {
      final ModifiableViewTable viewTable =
          table.unwrap(ModifiableViewTable.class);
      assert iColumn < viewTable.columnMapping.size();

      // Use the view constraint to generate the default value if the column is
      // constrained.
      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);
      final RexNode viewConstraint = projectMap.get(mappedOrdinal);
      if (viewConstraint != null) {
        return ColumnStrategy.DEFAULT;
      }

      // Otherwise use the default value of the underlying table.
      final Table schemaTable = viewTable.getTable();
      if (schemaTable instanceof Wrapper) {
        final InitializerExpressionFactory initializerExpressionFactory =
            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);
        if (initializerExpressionFactory != null) {
          return initializerExpressionFactory.generationStrategy(table,
              iColumn);
        }
      }
      return super.generationStrategy(table, iColumn);
    }"
5657118,none,"    @Override
    public Timestamp getTimestamp(int columnIndex) throws SQLException {
        throw unsupportedOperation(""getTimestamp"", columnIndex);
    }"
5702663,none,"    void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector collector,
                 KeyValueState<TaskStream, WindowState> windowState) {
        init(topoConf, context, collector, windowState);
        super.prepare(topoConf, context, collector);
    }"
9379644,none,"    private static Class<?> loadClass2(String className, Class<?> callingClass)
        throws ClassNotFoundException {
        try {
            return Class.forName(className);
        } catch (ClassNotFoundException ex) {
            try {
                if (ClassLoaderUtils.class.getClassLoader() != null) {
                    return ClassLoaderUtils.class.getClassLoader().loadClass(className);
                }
            } catch (ClassNotFoundException exc) {
                if (callingClass != null && callingClass.getClassLoader() != null) {
                    return callingClass.getClassLoader().loadClass(className);
                }
            }
            LOG.debug(ex.getMessage(), ex);
            throw ex;
        }
    }"
6637469,none,"    private static void validateVideo(ShareVideo video, Validator validator) {
        if (video == null) {
            throw new FacebookException(""Cannot share a null ShareVideo"");
        }

        Uri localUri = video.getLocalUrl();
        if (localUri == null) {
            throw new FacebookException(""ShareVideo does not have a LocalUrl specified"");
        }

        if (!Utility.isContentUri(localUri) && !Utility.isFileUri(localUri)) {
            throw new FacebookException(""ShareVideo must reference a video that is on the device"");
        }
    }"
8169457,none,"    protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn)
        throws IOException {
        return wireFormat.looseUnmarshalNestedObject(dataIn);
    }"
8592348,none,"      protected boolean isOneway() {
        return false;
      }"
8894429,none,"  protected FastCheckPrecisionScaleStatus fastCheckPrecisionScale(
      int maxPrecision, int maxScale) {
    return
        FastHiveDecimalImpl.fastCheckPrecisionScale(
            fastSignum, fast0, fast1, fast2,
            fastIntegerDigitCount, fastScale,
            maxPrecision, maxScale);
  }"
9247243,none,"    public static final String getHexBytes(byte[] bytes, int pos, int len) {
        StringBuilder sb = new StringBuilder();
        for (int i = pos; i < (pos+len); i++) {
            int b1 = (bytes[i]>>4) & 0x0f;
            int b2 = bytes[i] & 0x0f;

            sb.append(Integer.toHexString(b1));
            sb.append(Integer.toHexString(b2));
            sb.append(' ');
        }
        return sb.toString();
    }"
7432284,none,"	private void setOptionalAttribute(BeanDefinitionBuilder builder,
				Map<String, Object> providedProperties,
				String propertyPrefix,
				String attributeValue,
				String attributeName) {
		String propertyKey;
		if (""username"".equals(attributeName)) {
			String userKey = (propertyPrefix != null ?
					propertyPrefix + ""user"" :
					""user"");
			if (providedProperties.containsKey(userKey)) {
				propertyKey = userKey;
			}
			else {
				propertyKey = (propertyPrefix != null ?
						propertyPrefix + attributeName :
						attributeName);
			}
		}
		else {
			propertyKey = (propertyPrefix != null ?
					propertyPrefix + attributeToPropertyMap.get(attributeName) :
					attributeToPropertyMap.get(attributeName));
		}

		if (StringUtils.hasText(attributeValue)) {
			if (logger.isDebugEnabled()) {
				if (""password"".equals(attributeName)) {
					logger.debug(""Registering optional attribute "" + attributeToPropertyMap.get(attributeName) +
							"" with attribute value ******"");
				}
				else {
					logger.debug(""Registering optional attribute "" + attributeToPropertyMap.get(attributeName) +
							"" with attribute value "" + attributeValue);
				}
			}
			builder.addPropertyValue(attributeToPropertyMap.get(attributeName), attributeValue);
		}
		else if (providedProperties.containsKey(propertyKey)) {
			if (logger.isDebugEnabled()) {
				logger.debug(""Registering optional attribute "" + attributeToPropertyMap.get(attributeName) +
						"" with property value "" +
						(""password"".equals(attributeName) ? ""******"" : providedProperties.get(propertyKey)));
			}
			builder.addPropertyValue(attributeToPropertyMap.get(attributeName), providedProperties.get(propertyKey));
		}
		removeProvidedProperty(providedProperties, propertyKey);
	}"
3904736,none,"    private ArgumentProcessor getProcessor(
            Class< ? extends ArgumentProcessor> processorClass) {
        ArgumentProcessor processor;
        try {
            processor = processorClass.getConstructor().newInstance();
        } catch (Exception e) {
            throw new BuildException(""The argument processor class""
                    + processorClass.getName()
                    + "" could not be instantiated with a default constructor"",
                    e);
        }
        return processor;
    }"
7747898,none,"    protected Integer getPortIncrement() {
        return entity.getAttribute(JBoss6Server.PORT_INCREMENT);
    }"
6875532,none,"  @Override
  public void selectFile(final String name) throws DebugExceptionWrapper {
    ensureConnection();
    try {
      connection.sendSelectFileMessage(name);
    } catch (final IOException e) {
      throw new DebugExceptionWrapper(e);
    }
  }"
4072654,none,"    private Optional<WatchRequest> nextResume() {
        EtcdWatcher pendingWatcher = this.pendingWatchers.peek();
        if (pendingWatcher != null) {
            return Optional.of(this.toWatchCreateRequest(pendingWatcher));
        }
        return Optional.empty();
    }"
6679515,none,"    public APIRequestGetCustomAudiences(String nodeId, APIContext context) {
      super(context, nodeId, ""/customaudiences"", ""GET"", Arrays.asList(PARAMS));
    }"
4197753,none,"    public static SetMultimap<InetAddressAndPort, Token> loadTokens()
    {
        SetMultimap<InetAddressAndPort, Token> tokenMap = HashMultimap.create();
        for (UntypedResultSet.Row row : executeInternal(""SELECT peer, peer_port, tokens FROM system."" + PEERS_V2))
        {
            InetAddress address = row.getInetAddress(""peer"");
            Integer port = row.getInt(""peer_port"");
            InetAddressAndPort peer = InetAddressAndPort.getByAddressOverrideDefaults(address, port);
            if (row.has(""tokens""))
                tokenMap.putAll(peer, deserializeTokens(row.getSet(""tokens"", UTF8Type.instance)));
        }

        return tokenMap;
    }"
8095977,none,"  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:
        return ((InternalEList<?>)getAddOperands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }"
5414837,none,"    public DescriptiveStatistics(int window) {
        setWindowSize(window);
    }"
8409842,none,"    public int forceCompletionOfGroup(String key) {
        if (processor != null) {
            return processor.forceCompletionOfGroup(key);
        } else {
            return 0;
        }
    }"
4487410,none,"    public void add(RawFragmentBatchWrapper batchWrapper) {
      buffer.add(batchWrapper);
    }"
7621803,none,"	protected IProject getProject(Object obj) {
		IProject project = null;
		if (obj instanceof IProject) {
			project = (IProject) obj;
		} else if (obj instanceof IJavaProject) {
			project = ((IJavaProject) obj).getProject();
		} else if (obj instanceof IAdaptable) {
			project = (IProject) ((IAdaptable) obj).getAdapter(IProject.class);
		} else if (obj instanceof BootDashElement) {
			project = ((BootDashElement) obj).getProject();
		}
		return project;
	}"
5503308,none,"    public static byte[] getIP() {
        try {
            Enumeration allNetInterfaces = NetworkInterface.getNetworkInterfaces();
            InetAddress ip = null;
            byte[] internalIP = null;
            while (allNetInterfaces.hasMoreElements()) {
                NetworkInterface netInterface = (NetworkInterface) allNetInterfaces.nextElement();
                Enumeration addresses = netInterface.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    ip = (InetAddress) addresses.nextElement();
                    if (ip != null && ip instanceof Inet4Address) {
                        byte[] ipByte = ip.getAddress();
                        if (ipByte.length == 4) {
                            if (ipCheck(ipByte)) {
                                if (!isInternalIP(ipByte)) {
                                    return ipByte;
                                } else if (internalIP == null) {
                                    internalIP = ipByte;
                                }
                            }
                        }
                    }
                }
            }
            if (internalIP != null) {
                return internalIP;
            } else {
                throw new RuntimeException(""Can not get local ip"");
            }
        } catch (Exception e) {
            throw new RuntimeException(""Can not get local ip"", e);
        }
    }"
4498016,none,"      @Override
      boolean isValid(LifecycleAware object, Status status) {
        return true;
      }"
3804285,none,"    private Integer findRankOf(Rankable r) {
        Object tag = r.getObject();
        for (int rank = 0; rank < rankedItems.size(); rank++) {
            Object cur = rankedItems.get(rank).getObject();
            if (cur.equals(tag)) {
                return rank;
            }
        }
        return null;
    }"
5671828,none,"  final public IObjectAtom variable() throws ParseException {
  Token t; String var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOTEX:
      jj_consume_token(NOTEX);
      jj_consume_token(LPAR);
      t = jj_consume_token(VARIABLE);
      jj_consume_token(RPAR);
                                                      var=t.image; var=kb.getPrefixURI(""var"") + var.substring(1);
                                                                                                                try{
                                                                                                                        {if (true) return new VariableAtom(new URI(var), true);}
                                                                                                                } catch (URISyntaxException e) {
                                                                                                                        e.printStackTrace();
                                                                                                                        {if (true) return null;}
                                                                                                                }
      break;
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
          var=t.image; var=kb.getPrefixURI(""var"") + var.substring(1);
                                                                                                                try{
                                                                                                                        {if (true) return new VariableAtom(new URI(var), false);}
                                                                                                                } catch (URISyntaxException e) {
                                                                                                                        e.printStackTrace();
                                                                                                                        {if (true) return null;}
                                                                                                                }
      break;
    case BNODE:
      t = jj_consume_token(BNODE);
          var=t.image;  {if (true) return new RuleBlankNode(var);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error(""Missing return statement in function"");
  }"
3945199,none,"  @Override
  public void endWindow()
  {
  }"
3974746,none,"  @Override
  public boolean validate(Schema schema, Object datum) {
    switch (schema.getType()) {
    case ARRAY:
      if (!datum.getClass().isArray())
        return super.validate(schema, datum);
      int length = java.lang.reflect.Array.getLength(datum);
      for (int i = 0; i < length; i++)
        if (!validate(schema.getElementType(),
                      java.lang.reflect.Array.get(datum, i)))
          return false;
      return true;
    default:
      return super.validate(schema, datum);
    }
  }"
3791275,none,"  @Override
  protected void onStopped() {
    updateCurrentPosition();
    audioSink.pause();
    super.onStopped();
  }"
8254484,none,"    public final void entryRuleXBasicForLoopExpression() throws RecognitionException {
        try {
            // InternalEntities.g:1159:1: ( ruleXBasicForLoopExpression EOF )
            // InternalEntities.g:1160:1: ruleXBasicForLoopExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXBasicForLoopExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }"
8953833,none,"    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }"
4911266,none,"  @GET
  @Path(""/create"")
  public String createMetricConfig(@QueryParam(""dataset"") String dataset, @QueryParam(""name"") String name, @QueryParam(""datatype"") String metricType,
      @QueryParam(""active"") boolean active, @QueryParam(""derived"") boolean derived, @QueryParam(""derivedFunctionType"") String derivedFunctionType,
      @QueryParam(""numerator"") String numerator, @QueryParam(""denominator"") String denominator,
      @QueryParam(""derivedMetricExpression"") String derivedMetricExpression, @QueryParam(""inverseMetric"") boolean inverseMetric,
      @QueryParam(""cellSizeExpression"") String cellSizeExpression, @QueryParam(""rollupThreshold"") Double rollupThreshold) {
    try {
      MetricConfigDTO metricConfigDTO = new MetricConfigDTO();
      populateMetricConfig(metricConfigDTO, dataset, name, metricType, active, derived, derivedFunctionType, numerator, denominator, derivedMetricExpression,
          inverseMetric, cellSizeExpression, rollupThreshold);
      Long id = metricConfigDao.save(metricConfigDTO);

      metricConfigDTO.setId(id);
      return JsonResponseUtil.buildResponseJSON(metricConfigDTO).toString();
    } catch (Exception e) {
      LOG.warn(""Failed to create metric:{}"", name, e);
      return JsonResponseUtil.buildErrorResponseJSON(""Failed to create metric:"" + name + "" Message:"" + e.getMessage()).toString();
    }
  }"
9189120,none,"		protected void rollback( )
		{
			data.setAlias( originalAlias );
			data.setRealDisplayName( originalDisplayName );
			data.setDisplayNameKey( originalDisplayNameKey );
		}"
4758737,none,"  private static Method getMethod(String className, String methodName, Class<?>... parameterTypes)
      throws ClassNotFoundException, NoSuchMethodException {
    Class<?> clazz = Class.forName(className);
    return clazz.getMethod(methodName, parameterTypes);
  }"
9403827,none,"    public static <T, R> R[] mapToArray(Collection<T> inputs, Function<? super T, ? extends R> mapper, IntFunction<R[]> arrayGenerator) {
        R[] result = arrayGenerator.apply(inputs.size());
        int idx = 0;
        for (T t : inputs) {
            result[idx++] = mapper.apply(t);
        }
        return result;
    }"
6914478,none,"    public PrepareSource(String tag, MediaSource mediaSource, boolean resetPosition,
        boolean resetState) {
      super(tag, ""PrepareSource"");
      this.mediaSource = mediaSource;
      this.resetPosition = resetPosition;
      this.resetState = resetState;
    }"
4159069,none,"    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.calcite.avatica.proto.Requests.internal_static_CatalogsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.calcite.avatica.proto.Requests.CatalogsRequest.class, org.apache.calcite.avatica.proto.Requests.CatalogsRequest.Builder.class);
    }"
7075067,none,"    public CreateVirtualEnvAction(Project project, PythonDetails pythonDetails,
                                  EditablePythonAbiContainer editablePythonAbiContainer) {
        this.project = project;
        this.pythonDetails = pythonDetails;
        this.editablePythonAbiContainer = editablePythonAbiContainer;
    }"
5873847,none,"    @Override
    public int getMaxVersion() {

        int max = 0;

        for(DataMigration entityMigration: entityDataMigrations){
            max = Math.max( max, entityMigration.getMaxVersion() );
        }

        return max;
    }"
9114817,none,"		public void visitOdaMeasure( OdaMeasure obj )
		{
			DesignVisitorImpl.this.visitOdaMeasure( obj.handle( module ) );
		}"
7320330,none,"    public StringInputDialog(
        final Shell parentShell,
        final String label,
        final String initialValue,
        final String dialogTitle,
        final String purpose) {
        super(parentShell);
        this.label = label;
        text = initialValue;
        this.dialogTitle = dialogTitle;

        /*
         * Set the dialog settings key to be ""purpose"" This allows different
         * uses of the generic DlgInputString to have different settings
         */
        setOptionDialogSettingsKey(StringInputDialog.class.getName() + ""."" + purpose); //$NON-NLS-1$
    }"
9009658,none,"  public PeerSyncWithLeader(SolrCore core, String leaderUrl, int nUpdates) {
    this.core = core;
    this.leaderUrl = leaderUrl;
    this.nUpdates = nUpdates;

    this.doFingerprint = !""true"".equals(System.getProperty(""solr.disableFingerprint""));
    this.uhandler = core.getUpdateHandler();
    this.ulog = uhandler.getUpdateLog();
    HttpClient httpClient = core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();
    this.clientToLeader = new HttpSolrClient.Builder(leaderUrl).withHttpClient(httpClient).build();

    this.updater = new PeerSync.Updater(msg(), core);

    core.getCoreMetricManager().registerMetricProducer(SolrInfoBean.Category.REPLICATION.toString(), this);
  }"
9352823,none,"  public byte getByteAt(long index) {
    return addr.getJByteAt(baseOffset + index);
  }"
8435790,none,"    public MethodNotFoundException(Object pojo, String methodName, Throwable cause) {
        super(""Method with name: "" + methodName + "" not found on bean: "" + pojo + "" of type:"" + ObjectHelper.className(pojo), null, cause);
        this.methodName = methodName;
        this.bean = pojo;
    }"
5297372,none,"  private static int getPageRowCountLimit(Configuration conf) {
    return conf.getInt(PAGE_ROW_COUNT_LIMIT, ParquetProperties.DEFAULT_PAGE_ROW_COUNT_LIMIT);
  }"
5957064,none,"    public void addHttpFilter(HttpListener listener, String regex) {
        synchronized (filterRegistry) {
            if (!filterRegistry.containsKey(regex)) {
                filterRegistry.put(regex, new ArrayList<HttpListener>());
            }
            filterRegistry.get(regex).add(listener);
        }
    }"
9205245,none,"	public String getLayoutString( )
	{
		StringBuffer sb = new StringBuffer( );

		sb.append( ""table "" + table.getFullName( ) + "" layout: \r\n"" ); //$NON-NLS-1$ //$NON-NLS-2$
		sb.append( getHeader( ).getLayoutString( ) );
		sb.append( getGroupHeaders( ).getLayoutString( ) );
		sb.append( getDetail( ).getLayoutString( ) );
		sb.append( getGroupFooters( ).getLayoutString( ) );
		sb.append( getFooter( ).getLayoutString( ) );
		sb.append( ""\r\n"" ); //$NON-NLS-1$

		return sb.toString( );
	}"
4634262,none,"  public String toString() {
    return String.valueOf(layoutVersion) + FIELD_SEPARATOR
         + String.valueOf(namespaceID) + FIELD_SEPARATOR
         + String.valueOf(cTime) + FIELD_SEPARATOR
         + String.valueOf(editsTime) + FIELD_SEPARATOR
         + String.valueOf(checkpointTime) + FIELD_SEPARATOR
         + imageDigest.toString() + FIELD_SEPARATOR
         + clusterID + FIELD_SEPARATOR
         + blockpoolID ;
  }"
8255035,none,"    public final void rule__XIfExpression__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalEntities.g:9109:1: ( rule__XIfExpression__Group__6__Impl )
            // InternalEntities.g:9110:2: rule__XIfExpression__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
9474427,none,"    @Override
    public BODY<T> $onclick(String value) {
      addAttr(""onclick"", value);
      return this;
    }"
5700044,none,"        private void doSmapText(Node n) {
            String text = n.getText();
            int index = 0;
            int next = 0;
            int lineCount = 1;
            int skippedLines = 0;
            boolean slashStarSeen = false;
            boolean beginning = true;

            // Count lines inside text, but skipping comment lines at the
            // beginning of the text.
            while ((next = text.indexOf('\n', index)) > -1) {
                if (beginning) {
                    String line = text.substring(index, next).trim();
                    if (!slashStarSeen && line.startsWith(""/*"")) {
                        slashStarSeen = true;
                    }
                    if (slashStarSeen) {
                        skippedLines++;
                        int endIndex = line.indexOf(""*/"");
                        if (endIndex >= 0) {
                            // End of /* */ comment
                            slashStarSeen = false;
                            if (endIndex < line.length() - 2) {
                                // Some executable code after comment
                                skippedLines--;
                                beginning = false;
                            }
                        }
                    } else if (line.length() == 0 || line.startsWith(""//"")) {
                        skippedLines++;
                    } else {
                        beginning = false;
                    }
                }
                lineCount++;
                index = next + 1;
            }

            doSmap(n, lineCount, 1, skippedLines);
        }"
4308723,none,"    private LdapComparator<?> classLoadComparator( SchemaManager schemaManager, String oid, String className,
        Attribute byteCode ) throws LdapException
    {
        // Try to class load the comparator
        LdapComparator<?> comparator;
        Class<?> clazz;
        String byteCodeStr = StringConstants.EMPTY;

        if ( byteCode == null )
        {
            try
            {
                clazz = Class.forName( className );
            }
            catch ( ClassNotFoundException cnfe )
            {
                LOG.error( I18n.err( I18n.ERR_16056_CANNOT_FIND_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16057_CANNOT_FIND_CMP_CLASS, cnfe.getMessage() ) );
            }
        }
        else
        {
            classLoader.setAttribute( byteCode );
            
            try
            {
                clazz = classLoader.loadClass( className );
            }
            catch ( ClassNotFoundException cnfe )
            {
                LOG.error( I18n.err( I18n.ERR_16058_CANNOT_LOAD_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16059_CANNOT_LOAD_CMP_CLASS, cnfe.getMessage() ) );
            }

            byteCodeStr = new String( Base64.encode( byteCode.getBytes() ) );
        }

        // Create the comparator instance. Either we have a no argument constructor,
        // or we have one which takes an OID. Lets try the one with an OID argument first
        try
        {
            Constructor<?> constructor = clazz.getConstructor( new Class[]
                { String.class } );
            
            try
            {
                comparator = ( LdapComparator<?> ) constructor.newInstance( oid );
            }
            catch ( InvocationTargetException ite )
            {
                LOG.error( I18n.err( I18n.ERR_16060_CANNOT_INVOKE_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16061_CANNOT_INVOKE_CMP_CLASS, ite.getMessage() ) );
            }
            catch ( InstantiationException ie )
            {
                LOG.error( I18n.err( I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16063_CANNOT_INST_CMP_CLASS, ie.getMessage() ) );
            }
            catch ( IllegalAccessException ie )
            {
                LOG.error( I18n.err( I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS, ie.getMessage() ) );
            }
        }
        catch ( NoSuchMethodException nsme )
        {
            // Ok, let's try with the constructor without argument.
            // In this case, we will have to check that the OID is the same than
            // the one we got in the Comparator entry
            try
            {
                clazz.getConstructor();
            }
            catch ( NoSuchMethodException nsme2 )
            {
                LOG.error( I18n.err( I18n.ERR_16066_CANNOT_FIND_CMP_CTOR_METH_CLASS, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16067_CANNOT_FIND_CMP_CTOR_METH, nsme2.getMessage() ) );
            }
            
            try
            { 
                comparator = ( LdapComparator<?> ) clazz.newInstance();
            }
            catch ( InstantiationException ie )
            {
                LOG.error( I18n.err( I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16063_CANNOT_INST_CMP_CLASS, ie.getMessage() ) );
            }
            catch ( IllegalAccessException iae )
            {
                LOG.error( I18n.err( I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS, iae.getMessage() ) );
            }

            if ( !comparator.getOid().equals( oid ) )
            {
                String msg = I18n.err( I18n.ERR_16021_DIFFERENT_COMPARATOR_OID, oid, comparator.getOid() );
                throw new LdapInvalidAttributeValueException( ResultCodeEnum.UNWILLING_TO_PERFORM, msg, nsme );
            }
        }

        // Update the loadable fields
        comparator.setBytecode( byteCodeStr );
        comparator.setFqcn( className );

        // Inject the SchemaManager for the comparator who needs it
        comparator.setSchemaManager( schemaManager );

        return comparator;
    }"
6445781,none,"    private static Map<String, String> load() {
        Map<String, String> attributes = Maps.newConcurrentMap();

        for (URI uri : uris()) {
            try {
                attributes.putAll(load(uri.toURL()));
            } catch (Throwable t) {
                logger.error(""load(): '{}' failed"", uri, t);
            }
        }

        return attributes;
    }"
4057866,none,"    protected void readPayload(ByteBuf in, boolean copyData) throws IOException {
        int length = in.readInt();
        if (length < 0) {
            throw new EOFException(""Log Record is corrupt: Negative length "" + length);
        }
        if (copyData) {
            setPayloadBuf(in.slice(in.readerIndex(), length), true);
        } else {
            setPayloadBuf(in.retainedSlice(in.readerIndex(), length), false);
        }
        in.skipBytes(length);
    }"
4583764,none,"        private void addLetterAdjust(GlyphMapping wordMapping) {
            int letterSpaceCount = wordMapping.letterSpaceCount;
            int wordLength = wordMapping.getWordLength();
            int taAdjust = textArea.getTextLetterSpaceAdjust();
            for (int i = 0, n = wordLength; i < n; i++) {
                int j = letterSpaceAdjustIndex + i;
                if (j > 0) {
                    int k = wordMapping.startIndex + i;
                    MinOptMax adj = (k < letterSpaceAdjustArray.length)
                        ? letterSpaceAdjustArray [ k ] : null;
                    letterSpaceAdjust [ j ] = (adj == null) ? 0 : adj.getOpt();
                }
                if (letterSpaceCount > 0) {
                    letterSpaceAdjust [ j ] += taAdjust;
                    letterSpaceCount--;
                }
            }
            letterSpaceAdjustIndex += wordLength;
        }"
9458075,none,"  private void printCommaUnlessFirst() {
    if (!isFirst) {
      stream.print("","");
    }
    isFirst = false;
  }"
8895014,none,"  public void addToAborted(long elem) {
    if (this.aborted == null) {
      this.aborted = new HashSet<Long>();
    }
    this.aborted.add(elem);
  }"
7910247,none,"  public void transformKeyReferences(RefTransformer visitor) {
    configs.forEach(c -> c.transformKeyReferences(visitor));
  }"
8602498,none,"  public DataBlockEncoder getEncoder() {
    if (encoder == null && id != 0) {
      // lazily create the encoder
      encoder = createEncoder(encoderCls);
    }
    return encoder;
  }"
9093538,none,"        public RBuiltinNode getBuiltin() {
            return builtin;
        }"
5445165,none,"    CompletableFuture<MessageId> getLastMessageIdAsync() {
        if (getState() == State.Closing || getState() == State.Closed) {
            return FutureUtil
                .failedFuture(new PulsarClientException.AlreadyClosedException(""Consumer was already closed""));
        }

        AtomicLong opTimeoutMs = new AtomicLong(client.getConfiguration().getOperationTimeoutMs());
        Backoff backoff = new Backoff(100, TimeUnit.MILLISECONDS,
            opTimeoutMs.get() * 2, TimeUnit.MILLISECONDS,
            0 , TimeUnit.MILLISECONDS);
        CompletableFuture<MessageId> getLastMessageIdFuture = new CompletableFuture<>();

        internalGetLastMessageIdAsync(backoff, opTimeoutMs, getLastMessageIdFuture);
        return getLastMessageIdFuture;
    }"
5525645,none,"	protected T createEntityObject() {
		try {
			return tEntityClass.newInstance();
		} catch (Throwable e) {
			logger.error(""Error instantiating entity class. tEntityClass=""
					+ tEntityClass.toString(), e);
		}
		return null;
	}"
9147019,none,"	public EList<Trigger> getTriggers( )
	{
		if ( triggers == null )
		{
			triggers = new EObjectContainmentEList<Trigger>( Trigger.class,
					this,
					ComponentPackage.MARKER_RANGE__TRIGGERS );
		}
		return triggers;
	}"
6462019,none,"    private void buildNode462()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=13969""), new QualifiedName(0, ""InputArguments""), new LocalizedText(""en"", ""InputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=13968""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=37""), ExpandedNodeId.parse(""svr=0;i=78""), NodeClass.Object, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=13968""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>FileHandle</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
5353485,none,"	@Override
	public void stop(BundleContext context) throws Exception {
		instance = null;
		super.stop(context);
	}"
5416350,none,"    @Test
    public void testGroupByOrderPreservingDescSort() throws Exception {
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(getUrl(), props);
        String tableName = generateUniqueName();
        conn.createStatement().execute(""CREATE TABLE "" + tableName + "" (k1 char(1) not null, k2 char(1) not null,"" +
                "" constraint pk primary key (k1,k2)) split on ('ac','jc','nc')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'a')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'b')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'c')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'd')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'a')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'b')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'c')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'd')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'a')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'b')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'c')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'd')"");
        conn.commit();
        QueryBuilder queryBuilder = new QueryBuilder()
            .setSelectExpression(""K1,COUNT(*)"")
            .setSelectColumns(Lists.newArrayList(""K1""))
            .setFullTableName(tableName)
            .setGroupByClause(""K1"")
            .setOrderByClause(""K1 DESC"");
        ResultSet rs = executeQuery(conn, queryBuilder);
        assertTrue(rs.next());
        assertEquals(""n"", rs.getString(1));
        assertEquals(4, rs.getLong(2));
        assertTrue(rs.next());
        assertEquals(""j"", rs.getString(1));
        assertEquals(4, rs.getLong(2));
        assertTrue(rs.next());
        assertEquals(""a"", rs.getString(1));
        assertEquals(4, rs.getLong(2));
        assertFalse(rs.next());
        String expectedPhoenixPlan = ""CLIENT PARALLEL 1-WAY REVERSE FULL SCAN OVER "" + tableName + ""\n"" +
                ""    SERVER FILTER BY FIRST KEY ONLY\n"" +
                ""    SERVER AGGREGATE INTO ORDERED DISTINCT ROWS BY [K1]"";
        validateQueryPlan(conn, queryBuilder, expectedPhoenixPlan, null);
    }"
8049874,none,"    public final void rule__MandatoryModel__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalUnorderedGroupsTestLanguage.g:1164:1: ( rule__MandatoryModel__Group__2__Impl rule__MandatoryModel__Group__3 )
            // InternalUnorderedGroupsTestLanguage.g:1165:2: rule__MandatoryModel__Group__2__Impl rule__MandatoryModel__Group__3
            {
            pushFollow(FollowSets000.FOLLOW_6);
            rule__MandatoryModel__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FollowSets000.FOLLOW_2);
            rule__MandatoryModel__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
8184933,none,"    public void add(Sequence value) {
        // TODO we can probably optimize this a bit
        for(long i=value.first; i<value.last+1; i++) {
            add(i);
        }
    }"
5903677,none,"    public boolean equals(ExtendedType other)
    {
      try
      {
        return other.nodetype == this.nodetype &&
                other.localName.equals(this.localName) &&
                other.namespace.equals(this.namespace);
      }
      catch(NullPointerException e)
      {
        return false;
      }
    }"
8334098,none,"	void m39(C22 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
5424715,none,"    @Override
    public int add(final T item) {
        int index = -1;

        if (comparator == null) {
            index = getLength();
        } else {
            // Perform a binary search to find the insertion point
            index = Collections.binarySearch(list, item, comparator);
            if (index < 0) {
                index = -(index + 1);
            }
        }

        list.add(index, item);
        listListeners.itemInserted(this, index);

        return index;
    }"
3988942,none,"        public void setX(float value) throws DOMException {
            throw element.createDOMException
                (DOMException.NO_MODIFICATION_ALLOWED_ERR, ""readonly.length"",
                 null);
        }"
7888064,none,"  private static Collection<Path> collectBasePaths(Iterable<? extends BuildTarget> targets) {
    return StreamSupport.stream(targets.spliterator(), false)
        .map(BuildTarget::getBasePath)
        .collect(ImmutableSet.toImmutableSet());
  }"
6459837,none,"    private void buildNode80()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=12664""), new QualifiedName(0, ""InputArguments""), new LocalizedText(""en"", ""InputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=12664""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=12663""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=12664""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=12664""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=12663""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Masks</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
7045316,none,"  public static MetaImage getMetaImage(Vector<Object> src)
  {
    if (src == null) return globalImageCache.get(null);
    if (globalImageCache.containsKey(src))
    {
      MetaImage rv = globalImageCache.get(src);
      return rv;
    }
    {
      // use tmpSrc to avoid needing warning suppression of
      // unchecked conversion at function scope
      @SuppressWarnings(""unchecked"")
      Vector<Object>  tmpSrc = (Vector<Object>) src.clone();
      src = tmpSrc;
    }
    if (DEBUG_MI) System.out.println(""first getMetaImage src="" + src);
    MetaImage rv = new MetaImage(src);
    MetaImage srcImage = (MetaImage) src.get(0);
    rv.initDataStructures(1);
    rv.width[0] = srcImage.getWidth(0);
    rv.height[0] = srcImage.getHeight(0);
    synchronized (globalImageCache)
    {
      if (globalImageCache.containsKey(src)) return globalImageCache.get(src);
      globalImageCache.put(src, rv);
    }
    if (DEBUG_MI) System.out.println(""DONE first getMetaImage src="" + src);
    return rv;
  }"
4249533,none,"    public static String getNamespaceURI(Node node) {
        if (node instanceof Document) {
            node = ((Document) node).getDocumentElement();
        }

        Element element = (Element) node;

        String uri = element.getNamespaceURI();
        if (uri == null) {
            String prefix = getPrefix(node);
            String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;

            Node aNode = node;
            while (aNode != null) {
                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                    Attr attr = ((Element) aNode).getAttributeNode(qname);
                    if (attr != null) {
                        uri = attr.getValue();
                        break;
                    }
                }
                aNode = aNode.getParentNode();
            }
        }
        return """".equals(uri) ? null : uri;
    }"
7939585,none,"    @Override
    public void caseTRParen(@SuppressWarnings(""unused"") TRParen node)
    {
        this.index = 9;
    }"
8574638,none,"  @SuppressWarnings(""unchecked"")
  public E loadInstance(Class<?> implClass) throws IOException {
    // create the instance
    E impl;
    Object o = null;
    try {
      o = implClass.getDeclaredConstructor().newInstance();
      impl = (E)o;
    } catch (Exception e) {
      throw new IOException(e);
    }

    return impl;
  }"
6871109,none,"    public final void rule__DefaultFormalParameter__HasInitializerAssignmentAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalTypesParser.g:15171:1: ( ( ( EqualsSign ) ) )
            // InternalTypesParser.g:15172:2: ( ( EqualsSign ) )
            {
            // InternalTypesParser.g:15172:2: ( ( EqualsSign ) )
            // InternalTypesParser.g:15173:3: ( EqualsSign )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }
            // InternalTypesParser.g:15174:3: ( EqualsSign )
            // InternalTypesParser.g:15175:4: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
7294889,none,"	public static void schedule(Job job) {
		job.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().buildRule());
		job.setPriority(Job.BUILD);
		job.schedule();
	}"
4788662,none,"  public boolean equals(TListSentryPrivilegesRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true;
    boolean that_present_protocol_version = true;
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (this.protocol_version != that.protocol_version)
        return false;
    }

    boolean this_present_requestorUserName = true && this.isSetRequestorUserName();
    boolean that_present_requestorUserName = true && that.isSetRequestorUserName();
    if (this_present_requestorUserName || that_present_requestorUserName) {
      if (!(this_present_requestorUserName && that_present_requestorUserName))
        return false;
      if (!this.requestorUserName.equals(that.requestorUserName))
        return false;
    }

    boolean this_present_roleName = true && this.isSetRoleName();
    boolean that_present_roleName = true && that.isSetRoleName();
    if (this_present_roleName || that_present_roleName) {
      if (!(this_present_roleName && that_present_roleName))
        return false;
      if (!this.roleName.equals(that.roleName))
        return false;
    }

    boolean this_present_authorizableHierarchy = true && this.isSetAuthorizableHierarchy();
    boolean that_present_authorizableHierarchy = true && that.isSetAuthorizableHierarchy();
    if (this_present_authorizableHierarchy || that_present_authorizableHierarchy) {
      if (!(this_present_authorizableHierarchy && that_present_authorizableHierarchy))
        return false;
      if (!this.authorizableHierarchy.equals(that.authorizableHierarchy))
        return false;
    }

    return true;
  }"
4917464,none,"        @Override
        public int compare(PropertyDescriptor d1, PropertyDescriptor d2) {
            String g1 = group(d1);
            String g2 = group(d2);
            Integer go1 = groupOrder(g1);
            Integer go2 = groupOrder(g2);

            int result = go1.compareTo(go2);
            if (result != 0) {
                return result;
            }

            result = g1.compareTo(g2);
            if (result != 0) {
                return result;
            }

            Integer po1 = propertyOrder(d1);
            Integer po2 = propertyOrder(d2);
            result = po1.compareTo(po2);
            if (result != 0) {
                return result;
            }

            return d1.getName().compareTo(d2.getName());
        }"
7257899,none,"    public LongRect getSelectionBounds(ItemSelection selection, ChartContext context) {

        XYItemSelection sel = (XYItemSelection)selection;
        XYItem item  = sel.getItem();
        int selectedValueIndex = sel.getValueIndex();

        if (selectedValueIndex == -1 ||
            selectedValueIndex >= item.getValuesCount())
            // This happens on reset - bounds of the selection are unknown, let's clear whole area
            return new LongRect(0, 0, context.getViewportWidth(),
                                context.getViewportHeight());
        else
            return getViewBounds(item, selectedValueIndex, context);
    }"
8845708,none,"      public org.apache.airavata.sharing.registry.models.Entity getResult() throws org.apache.airavata.sharing.registry.models.SharingRegistryException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException(""Method call not finished!"");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntity();
      }"
4480085,none,"    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.drill.exec.proto.UserBitShared.NamePart)) {
        return super.equals(obj);
      }
      org.apache.drill.exec.proto.UserBitShared.NamePart other = (org.apache.drill.exec.proto.UserBitShared.NamePart) obj;

      boolean result = true;
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasChild() == other.hasChild());
      if (hasChild()) {
        result = result && getChild()
            .equals(other.getChild());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }"
5767507,none,"    @Override
    public PrivilegeTO getPrivilegeTO(final Privilege privilege) {
        PrivilegeTO privilegeTO = new PrivilegeTO();
        privilegeTO.setKey(privilege.getKey());
        privilegeTO.setDescription(privilege.getDescription());
        privilegeTO.setApplication(privilege.getApplication().getKey());
        privilegeTO.setSpec(privilege.getSpec());
        return privilegeTO;
    }"
5473580,none,"    private Collection<LinkDefinition<Source, Target>> performUpdate(final LinkStoreUpdater updater,
                                                                     Collection<LinkDefinition<Source, Target>> linkDefinitions,
                                                                     final ModelVersion storedVersion,
                                                                     final ModelVersion currentVersion)
            throws SQLException
    {
        linkDefinitions = updater.update(storedVersion.toString(), linkDefinitions);
        Connection connection = getConnection();
        try
        {
            connection.setAutoCommit(false);

            try (Statement statement = connection.createStatement())
            {
                statement.execute(""DELETE FROM "" + getLinksTableName());
            }

            for (LinkDefinition<? extends BaseSource, ? extends BaseTarget> linkDefinition : linkDefinitions)
            {
                insert(connection, generateLinkKey(linkDefinition), linkDefinition);
            }
            updateVersion(connection, currentVersion);
            connection.commit();
        }
        catch (SQLException e)
        {
            try
            {
                connection.rollback();
            }
            catch (SQLException re)
            {
                LOGGER.debug(""Cannot rollback transaction"", re);
            }
            throw e;
        }
        finally
        {
            JdbcUtils.closeConnection(connection, LOGGER);
        }
        return linkDefinitions;
    }"
8027029,none,"  public EAttribute getThirdLevelB1_Name()
  {
    return (EAttribute)thirdLevelB1EClass.getEStructuralFeatures().get(0);
  }"
7949921,none,"	private void processInfoOutput(final BufferedReader stdout) {
		Matcher matcher;

		final MainControllerElement tempRoot = new MainControllerElement(""Temporal root"", this);
		readFullLineOnly(stdout);
		if (fastLine == null) {
			return;
		}
		matcher = MC_STATE_PATTERN.matcher(fastLine);
		if (matcher.matches()) {
			final String mcStateName = matcher.group(1);
			tempRoot.setStateInfo(new InformationElement(""State: "" + mcStateName));
			readFullLineOnly(stdout);

			suspectedLastState = getMCStateFromName(mcStateName);
		} else {
			fastLine = null;
			return;
		}
		if (fastLine != null && "" host information:"".equals(fastLine)) {
			readFullLineOnly(stdout);
		} else {
			fastLine = null;
			return;
		}
		if (fastLine != null) {
			if (fastLine.startsWith(""  -"")) {
				// host list
				while (fastLine != null && fastLine.startsWith(""  -"")) {
					processInfoOutputHC(stdout, tempRoot);
				}
			} else if (""  no HCs are connected"".equals(fastLine)) {
				readFullLineOnly(stdout);
			}
		} else {
			fastLine = null;
			return;
		}

		if (fastLine != null && PAUSE_PATTERN.matcher(fastLine).matches()) {
			tempRoot.setPauseInfo(new InformationElement(fastLine.trim()));
			readFullLineOnly(stdout);
		} else {
			fastLine = null;
			return;
		}
		if (fastLine != null && CONSOLE_LOGGING_PATTERN.matcher(fastLine).matches()) {
			tempRoot.setConsoleLoggingInfo(new InformationElement(fastLine.trim()));
		} else {
			fastLine = null;
			return;
		}
		if (mainControllerRoot != null) {
			mainControllerRoot.children().clear();
			mainControllerRoot.transferData(tempRoot);
		}

	}"
9523258,none,"    @Override
    public CODE<T> $class(String value) {
      addAttr(""class"", value);
      return this;
    }"
6923170,none,"    @Override
    public State computeBreaks(CommentsHelper commentsHelper, int maxWidth, State state) {
      text = commentsHelper.rewrite(tok, maxWidth, state.column);
      int firstLineLength = text.length() - Iterators.getLast(Newlines.lineOffsetIterator(text));
      return state.withColumn(state.column + firstLineLength);
    }"
4259369,none,"    @Override
    public Map<String,Integer> getNumWaitersByKey() {
        final Map<String,Integer> result = new HashMap<>();

        for (final Map.Entry<K, ObjectDeque<T>> entry : poolMap.entrySet()) {
            final K k = entry.getKey();
            final ObjectDeque<T> deque = entry.getValue();
            if (deque != null) {
                if (getBlockWhenExhausted()) {
                    result.put(k.toString(), Integer.valueOf(
                            deque.getIdleObjects().getTakeQueueLength()));
                } else {
                    result.put(k.toString(), Integer.valueOf(0));
                }
            }
        }
        return result;
    }"
6666668,none,"  public ProductItemCommerceInsights() {
  }"
8756041,none,"  boolean isProcessTreeOverLimit(String containerId,
                                  long currentMemUsage,
                                  long curMemUsageOfAgedProcesses,
                                  long vmemLimit) {
    boolean isOverLimit = false;

    if (currentMemUsage > (2 * vmemLimit)) {
      LOG.warn(""Process tree for container: "" + containerId
          + "" running over twice "" + ""the configured limit. Limit="" + vmemLimit
          + "", current usage = "" + currentMemUsage);
      isOverLimit = true;
    } else if (curMemUsageOfAgedProcesses > vmemLimit) {
      LOG.warn(""Process tree for container: "" + containerId
          + "" has processes older than 1 ""
          + ""iteration running over the configured limit. Limit="" + vmemLimit
          + "", current usage = "" + curMemUsageOfAgedProcesses);
      isOverLimit = true;
    }

    return isOverLimit;
  }"
7784926,none,"		public void supportSessionSerialization(ISerializer serializer)
		{
			this.serializer = Args.notNull(serializer, ""serializer"");
		}"
7515654,none,"    @Test
    public void run0() throws Throwable {
        runTest(""test"", -1);
    }"
8271243,none,"    public final Boolean entryRuleType() throws RecognitionException {
        Boolean current = false;

        Boolean iv_ruleType = null;


        try {
            // PsiInternalSDomain.g:284:46: (iv_ruleType= ruleType EOF )
            // PsiInternalSDomain.g:285:2: iv_ruleType= ruleType EOF
            {
             markComposite(elementTypeProvider.getTypeElementType()); 
            pushFollow(FOLLOW_1);
            iv_ruleType=ruleType();

            state._fsp--;

             current =iv_ruleType; 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return current;
    }"
7755095,none,"    @JsonInclude(Include.NON_EMPTY)
    public List<LinkDto> getPlatformComponents() {
        return platformComponents;
    }"
4031529,none,"    static <T> Sketch<T> create(CountMinSketch sketch) {
      int width = (int) Math.ceil(2 / sketch.getRelativeError());
      int depth = (int) Math.ceil(-Math.log(1 - sketch.getConfidence()) / Math.log(2));
      return new AutoValue_SketchFrequencies_Sketch<>(depth, width, sketch);
    }"
5907756,none,"    static ClassLoader findClassLoader()
        throws ConfigurationError
    { 
        // Figure out which ClassLoader to use for loading the provider
        // class.  If there is a Context ClassLoader then use it.
        ClassLoader context = SecuritySupport.getContextClassLoader();
        ClassLoader system = SecuritySupport.getSystemClassLoader();

        ClassLoader chain = system;
        while (true) {
            if (context == chain) {
                // Assert: we are on JDK 1.1 or we have no Context ClassLoader
                // or any Context ClassLoader in chain of system classloader
                // (including extension ClassLoader) so extend to widest
                // ClassLoader (always look in system ClassLoader if Xalan
                // is in boot/extension/system classpath and in current
                // ClassLoader otherwise); normal classloaders delegate
                // back to system ClassLoader first so this widening doesn't
                // change the fact that context ClassLoader will be consulted
                ClassLoader current = ObjectFactory.class.getClassLoader();

                chain = system;
                while (true) {
                    if (current == chain) {
                        // Assert: Current ClassLoader in chain of
                        // boot/extension/system ClassLoaders
                        return system;
                    }
                    if (chain == null) {
                        break;
                    }
                    chain = SecuritySupport.getParentClassLoader(chain);
                }

                // Assert: Current ClassLoader not in chain of
                // boot/extension/system ClassLoaders
                return current;
            }

            if (chain == null) {
                // boot ClassLoader reached
                break;
            }

            // Check for any extension ClassLoaders in chain up to
            // boot ClassLoader
            chain = SecuritySupport.getParentClassLoader(chain);
        };

        // Assert: Context ClassLoader not in chain of
        // boot/extension/system ClassLoaders
        return context;
    } // findClassLoader():ClassLoader"
5393638,none,"        @Override
        public Object instantiate(String className) throws ReflectionException, MBeanException {
            return null;
        }"
4953209,none,"   @Override
   public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null || getClass() != obj.getClass()) return false;
      EmailAlias that = EmailAlias.class.cast(obj);
      return Objects.equal(this.alias, that.alias);
   }"
8949635,none,"  public void setWmCountersDone() {
    if (wmCounters != null) {
      wmCounters.changeStateDone();
    }
  }"
7958322,none,"	private void createColumns(final Composite parent) {

		final String[] titles = { ""Passing type"", ""Typename"", ""Name"" };
		final int[] bounds = { 100, 200, 280 };

		// pass type
		TableViewerColumn col = createTableViewerColumn(titles[0], bounds[0]);
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				final ParamTableItem p = (ParamTableItem) element;
				return p.getPassType();
			}
		});

		// type name
		col = createTableViewerColumn(titles[1], bounds[1]);
		col.setLabelProvider(new ColumnLabelProvider() {

			@Override
			public String getText(final Object element) {
				final ParamTableItem p = (ParamTableItem) element;
				return p.getType();
			}
		});

		// name
		col = createTableViewerColumn(titles[2], bounds[2]);
		col.setEditingSupport(new NameEditingSupport(col.getViewer()));
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				final ParamTableItem p = (ParamTableItem) element;
				return p.getName();
			}
		});
	}"
5184123,none,"  protected Put buildPut(Document update) throws IOException {
    Key k = new Key(update.getGuid(), update.getSensorType());
    Put put = new Put(Key.toBytes(k));
    long ts = update.getTimestamp() == null || update.getTimestamp() == 0 ? System.currentTimeMillis() : update.getTimestamp();
    byte[] columnQualifier = Bytes.toBytes(ts);
    byte[] doc = JSONUtils.INSTANCE.toJSONPretty(update.getDocument());
    put.addColumn(cf, columnQualifier, doc);
    return put;
  }"
6632851,none,"  @Override
  public String getType() {
    return getString(""@type"");
  }"
7196784,none,"        @com.fasterxml.jackson.annotation.JsonValue
        public String getValue() {
            return value;
        }"
5749626,none,"  private int calculateFanout(int remainInputChunks, int inputNum, int outputNum, int startIdx) {
    int computedFanout = Math.min(remainInputChunks, defaultFanout);

    // Why should we detect an opportunity for unbalanced merge?
    //
    // Assume that a fanout is given by 8 and there are 10 chunks.
    // If we firstly merge 3 chunks into one chunk, there remain only 8 chunks.
    // Then, we can just finish the merge phase even though we don't complete merge phase on all chunks.
    if (checkIfCanBeUnbalancedMerged(inputNum - (startIdx + computedFanout), outputNum + 1)) {
      int candidateFanout = computedFanout;
      while (checkIfCanBeUnbalancedMerged(inputNum - (startIdx + candidateFanout), outputNum + 1)) {
        candidateFanout--;
      }
      int beforeFanout = computedFanout;
      if (computedFanout > candidateFanout + 1) {
        computedFanout = candidateFanout + 1;
        info(LOG, ""Fanout reduced for unbalanced merge: "" + beforeFanout + "" -> "" + computedFanout);
      }
    }

    return computedFanout;
  }"
7111061,none,"    private void addSqlite() {

        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {
            @Override
            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {
                HashSet<String> ctorSignatures = new HashSet<String>();
                ctorSignatures.add(""(Lorg/sqlite/SQLiteConnection;Ljava/lang/String;)V"");
                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);
                metaData1.sqlStringInCtor = 2;
                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);
            }
        };

        String className = ""org/sqlite/core/CorePreparedStatement"";
        ClassInstrumentationData data =
                new ClassInstrumentationData(className, InstrumentedClassType.SQL, classVisitorFactory)
                        .setReportCaughtExceptions(false)
                        .setReportExecutionTime(true);
        data.addMethod(""executeBatch"", ""()[I"", false, true, 0, new MethodVisitorFactory() {
            @Override
            public MethodVisitor create(MethodInstrumentationDecision decision, int access, String desc, String owner, String methodName, MethodVisitor methodVisitor, ClassToMethodTransformationData additionalData) {
                return new PreparedStatementMethodForExecuteBatchVisitor(access, desc, owner, methodName, methodVisitor, null);
            }
        });
        classesToInstrument.put(className, data);

        doAdd(null, ""org/sqlite/jdbc3/JDBC3PreparedStatement"");
    }"
8904678,none,"  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NS:
      return isSetNs();
    }
    throw new IllegalStateException();
  }"
6639778,none,"    public LoginButton(Context context) {
        super(
                context,
                null,
                0,
                0,
                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,
                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);
    }"
6530288,none,"    public LifxLightStateChanger(LifxLightContext context, LifxLightCommunicationHandler communicationHandler) {
        this.logId = context.getLogId();
        this.product = context.getProduct();
        this.fadeTime = context.getConfiguration().getFadeTime();
        this.pendingLightState = context.getPendingLightState();
        this.scheduler = context.getScheduler();
        this.communicationHandler = communicationHandler;
    }"
7197234,none,"        public Builder freeformTags(java.util.Map<String, String> freeformTags) {
            this.freeformTags = freeformTags;
            this.__explicitlySet__.add(""freeformTags"");
            return this;
        }"
6839392,none,"	public void markAsToHoist(FunctionDeclaration element) {
		tag(Tag.toHoist, element);
	}"
8420313,none,"    public SynchronizedValueFactory<Long> getNonceFactory() {
        return delegate.getNonceFactory();
    }"
5402098,none,"    @Override
    public long spill() {
        // Make sure we have something to spill.  Don't create empty
        // files, as that will make a mess.
        if (mContents.size() == 0) return 0;

        // Lock the container before I spill, so that iterators aren't
        // trying to read while I'm mucking with the container.
        long spilled = 0;
        synchronized (mContents) {
            DataOutputStream out = null;
            try {
                out = getSpillFile();
            }  catch (IOException ioe) {
                // Do not remove last file from spilled array. It was not
                // added as File.createTmpFile threw an IOException
                warn(
                    ""Unable to create tmp file to spill to disk"", PigWarning.UNABLE_TO_CREATE_FILE_TO_SPILL, ioe);
                return 0;
            }
            try {
                Iterator<Tuple> i = mContents.iterator();
                while (i.hasNext()) {
                    SEDES.writeDatum(out, i.next(), DataType.TUPLE);
                    spilled++;
                    // This will spill every 16383 records.
                    if ((spilled & 0x3fff) == 0) reportProgress();
                }
                out.flush();
                out.close();
                out = null;
                mContents.clear();
            } catch (Throwable e) {
                // Remove the last file from the spilled array, since we failed to
                // write to it.
                mSpillFiles.remove(mSpillFiles.size() - 1);
                warn(
                    ""Unable to spill contents to disk"", PigWarning.UNABLE_TO_SPILL, e);
                return 0;
            } finally {
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e) {
                        warn(""Error closing spill"", PigWarning.UNABLE_TO_CLOSE_SPILL_FILE, e);
                    }
                }
            }
        }
        // Increment the spill count
        incSpillCount(PigCounters.SPILLABLE_MEMORY_MANAGER_SPILL_COUNT);
        return spilled;
    }"
4222354,none,"        public Builder add(TableMetadata table)
        {
            tables.put(table.name, table);

            tablesById.put(table.id, table);

            table.indexes
                 .stream()
                 .filter(i -> !i.isCustom())
                 .map(i -> CassandraIndex.indexCfsMetadata(table, i))
                 .forEach(i -> indexTables.put(i.indexName().get(), i));

            return this;
        }"
7158488,none,"    final int readIntBigEndian() throws SQLServerException {
        if (payloadOffset + 4 <= currentPacket.payloadLength) {
            int value = Util.readIntBigEndian(currentPacket.payload, payloadOffset);
            payloadOffset += 4;
            return value;
        }

        return Util.readIntBigEndian(readWrappedBytes(4), 0);
    }"
5719331,none,"    private static Field getLabelField(final String name) {
        try {
            Field f = Label.class.getDeclaredField(name);
            f.setAccessible(true);
            return f;
        } catch (NoSuchFieldException e) {
            return null;
        }
    }"
7875037,none,"  private static void doRawReceiveFile(File path, int size, InputStream clientInput)
      throws IOException {
    // Create a temp file to receive the payload, so we don't need to worry about
    // partially-received files.  The host takes care of deleting temp files.
    File tempfile =
        File.createTempFile(
            AgentUtil.TEMP_PREFIX + path.getName() + ""-"", "".tmp"", path.getParentFile());
    FileOutputStream output = new FileOutputStream(tempfile);

    // Keep track of our starting time so we can enforce a timeout on slow but steady uploads.
    long receiveStartMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
    // Keep track of the total received size to verify the payload.
    long totalSize = 0;
    long totalReceiveTimeoutMs =
        RECEIVE_TIMEOUT_MS + TOTAL_RECEIVE_TIMEOUT_MS_PER_MB * (size / 1024 / 1024);
    try {
      int bufferSize = 128 * 1024;
      byte[] buf = new byte[bufferSize];
      while (true) {
        long currentTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
        if (currentTimeMs - receiveStartMs > totalReceiveTimeoutMs) {
          throw new RuntimeException(""Receive failed to complete before timeout."");
        }
        int remaining = size - (int) totalSize;
        if (remaining == 0) {
          break;
        }
        int want = bufferSize;
        if (want > remaining) {
          want = remaining;
        }
        int got = clientInput.read(buf, 0, want);
        if (got == -1) {
          break;
        }
        output.write(buf, 0, got);
        totalSize += got;
      }
    } finally {
      output.close();
    }
    if (totalSize != size) {
      throw new RuntimeException(""Received only "" + totalSize + "" of "" + size + "" bytes."");
    }
    boolean success = tempfile.renameTo(path);
    if (!success) {
      throw new RuntimeException(""Failed to rename temp file."");
    }
  }"
7699101,none,"    @Override
    public boolean is2G(){
        LuaJavaNetworkState state = new LuaJavaNetworkState(mRapidID, mRapidView);

        return state.isNetworkActive();
    }"
5384197,none,"    private void removeAndReconnect(MapReduceOper mr, MapReduceOper newMR) throws VisitorException {
        List<MapReduceOper> mapperSuccs = getPlan().getSuccessors(mr);
        List<MapReduceOper> mapperPreds = getPlan().getPredecessors(mr);

        // make a copy before removing operator
        ArrayList<MapReduceOper> succsCopy = null;
        ArrayList<MapReduceOper> predsCopy = null;
        if (mapperSuccs != null) {
            succsCopy = new ArrayList<MapReduceOper>(mapperSuccs);
        }
        if (mapperPreds != null) {
            predsCopy = new ArrayList<MapReduceOper>(mapperPreds);
        }
        getPlan().remove(mr);

        // reconnect the mapper's successors
        if (succsCopy != null) {
            for (MapReduceOper succ : succsCopy) {
                try {
                    getPlan().connect(newMR, succ);
                } catch (PlanException e) {
                    int errCode = 2133;
                    String msg = ""Internal Error. Unable to connect map plan with successors for optimization."";
                    throw new OptimizerException(msg, errCode, PigException.BUG, e);
                }
            }
        }

        // reconnect the mapper's predecessors
        if (predsCopy != null) {
            for (MapReduceOper pred : predsCopy) {
                if (newMR.getOperatorKey().equals(pred.getOperatorKey())) {
                    continue;
                }
                try {
                    getPlan().connect(pred, newMR);
                } catch (PlanException e) {
                    int errCode = 2134;
                    String msg = ""Internal Error. Unable to connect map plan with predecessors for optimization."";
                    throw new OptimizerException(msg, errCode, PigException.BUG, e);
                }
            }
        }

        mergeMROperProperties(mr, newMR);
    }"
4311186,none,"    @Override
    public boolean isValidSyntax( Object value )
    {
        String strValue;

        if ( value == null )
        {
            if ( LOG.isDebugEnabled() )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, ""null"" ) );
            }
            
            return false;
        }

        if ( value instanceof String )
        {
            strValue = ( String ) value;
        }
        else if ( value instanceof byte[] )
        {
            strValue = Strings.utf8ToString( ( byte[] ) value );
        }
        else
        {
            strValue = value.toString();
        }

        // We must have at least '(cp)', '(xr)' or '(ca)'
        if ( strValue.length() < 4 )
        {
            if ( LOG.isDebugEnabled() )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
            }
            
            return false;
        }

        // Check the opening and closing parenthesis
        if ( ( strValue.charAt( 0 ) != '(' )
            || ( strValue.charAt( strValue.length() - 1 ) != ')' ) )
        {
            if ( LOG.isDebugEnabled() )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
            }
            
            return false;
        }

        Set<String> keywords = new HashSet<>();
        int len = strValue.length() - 1;
        boolean needKeyword = true;

        // 
        for ( int i = 1; i < len; /* */)
        {
            // Skip spaces
            while ( ( i < len ) && ( strValue.charAt( i ) == ' ' ) )
            {
                i++;
            }

            int pos = i;

            // Search for a keyword
            while ( ( i < len ) && Chars.isAlphaASCII( strValue, pos ) )
            {
                pos++;
            }

            if ( pos == i )
            {
                // No keyword : error
                if ( LOG.isDebugEnabled() )
                {
                    LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
                }
                
                return false;
            }

            String keyword = strValue.substring( i, pos );
            i = pos;

            if ( !DSE_BITS.contains( keyword ) )
            {
                // Unknown keyword
                if ( LOG.isDebugEnabled() )
                {
                    LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
                }
                
                return false;
            }

            // Check that the keyword has not been met
            if ( keywords.contains( keyword ) )
            {
                if ( LOG.isDebugEnabled() )
                {
                    LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
                }
                
                return false;
            }

            keywords.add( keyword );
            needKeyword = false;

            // Skip spaces
            while ( ( i < len ) && ( strValue.charAt( i ) == ' ' ) )
            {
                i++;
            }

            // Do we have another keyword ?
            if ( ( i < len ) && ( strValue.charAt( i ) == '$' ) )
            {
                // yes
                i++;
                needKeyword = true;
            }
        }

        // We are done
        if ( LOG.isDebugEnabled() )
        {
            if ( needKeyword )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
            }
            else
            {
                LOG.debug( I18n.msg( I18n.MSG_13701_SYNTAX_VALID, value ) );
            }
        }

        return !needKeyword;
    }"
8579440,none,"    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAll_args)
        return this.equals((deleteAll_args)that);
      return false;
    }"
4865255,none,"    public QPropertyDefinition[] getMandatoryQPropertyDefinitions() {
        // since mandatory items must have a name,
        // we're only searching the named item definitions
        if (namedItemDefs.size() == 0) {
            return QPropertyDefinition.EMPTY_ARRAY;
        }
        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
        for (List<QItemDefinition> list : namedItemDefs.values()) {
            for (QItemDefinition qDef : list) {
                if (!qDef.definesNode() && qDef.isMandatory()) {
                    defs.add(qDef);
                }
            }
        }
        if (defs.size() == 0) {
            return QPropertyDefinition.EMPTY_ARRAY;
        }
        return defs.toArray(new QPropertyDefinition[defs.size()]);
    }"
7114027,none,"    public static String join(CharSequence delimiter, Iterable tokens) {
        StringBuilder sb = new StringBuilder();
        boolean firstTime = true;
        for (Object token: tokens) {
            if (firstTime) {
                firstTime = false;
            } else {
                sb.append(delimiter);
            }
            sb.append(token);
        }
        return sb.toString();
    }"
7074773,none,"  public static void main(String[] args) throws Exception {
    new DegradedExperienceExample().runExample();
  }"
4473015,none,"  public static void main(String args[]) throws UIMAException, IOException, URISyntaxException
  {
    if (args.length != 2)
    {
      System.err.format(""Syntax: %s input_directory output_directory%n"", RunZoner.class.getName());
    }
    
    File inputDirectory = new File(args[0]);
    File outputDirectory = new File(args[1]);
    
    List<File> inputFiles = listContentsAll(inputDirectory);
    
    RunZoner runner = new RunZoner();
    runner.setInputDirectory(inputDirectory);
    runner.setInputFiles(inputFiles);
    runner.setOutputDirectory(outputDirectory);
    
    runner.execute();
  }"
6957824,none,"  @VisibleForTesting
  static String getClassName(String filename) {
    int classNameEnd = filename.length() - CLASS_FILE_NAME_EXTENSION.length();
    return filename.substring(0, classNameEnd).replace('/', '.');
  }"
3834247,none,"      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNamespaceIteratorSetting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new IteratorSetting();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.ouch3 = new NamespaceNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }"
7141504,none,"  @Deprecated
  @Override
  public <T> void sendRestRequest(final Request<T> request, RequestContext requestContext,
      Callback<RestResponse> callback) {
    if (_restClient == null) {
      throw new UnsupportedOperationException(""sendRestRequest is not supported by the ForwardingRestClient"");
    }
    _restClient.sendRestRequest(request, requestContext, callback);
  }"
8963199,none,"  private byte[] byteVars() {
    if (byteVars.length == size) {
      byte[] newVars = new byte[size << 1];
      System.arraycopy(byteVars, 0, newVars, 0, size);
      return byteVars = newVars;
    }
    return byteVars;
  }"
9219509,none,"    static JComponent getPaintingOrigin(JComponent c) {
        Container p = c;
        while ((p = p.getParent()) instanceof JComponent) {
            JComponent jp = (JComponent) p;
            if (jp.isPaintingOrigin()) {
                return jp;
            }
        }
        return null;
    }"
7210387,none,"  public void severe(String msg, Object... params) {
    if (isSevereEnabled()) {
      CallerDetails details = inferCaller();
      logger.logp(Level.SEVERE, details.clazz, details.method, msg, params);
    }
  }"
6795278,none,"  @Override
  int recursionUnsafeHashCode() {
    return System.identityHashCode(this);
  }"
4144475,none,"  protected List<RexFieldCollation> visitFieldCollations(
      List<RexFieldCollation> collations, boolean[] update) {
    ImmutableList.Builder<RexFieldCollation> clonedOperands =
        ImmutableList.builder();
    for (RexFieldCollation collation : collations) {
      RexNode clonedOperand = collation.left.accept(this);
      if ((clonedOperand != collation.left) && (update != null)) {
        update[0] = true;
        collation =
            new RexFieldCollation(clonedOperand, collation.right);
      }
      clonedOperands.add(collation);
    }
    return clonedOperands.build();
  }"
8430991,none,"    public void setLoggingLevel(String level) {
        backlogDebugger.setLoggingLevel(level);
    }"
8033367,none,"    public final void mRULE_ML_COMMENT() throws RecognitionException {
        try {
            int _type = RULE_ML_COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalCrossReferenceProposalTestLanguage.g:169:17: ( '/*' ( options {greedy=false; } : . )* '*/' )
            // InternalCrossReferenceProposalTestLanguage.g:169:19: '/*' ( options {greedy=false; } : . )* '*/'
            {
            match(""/*""); 

            // InternalCrossReferenceProposalTestLanguage.g:169:24: ( options {greedy=false; } : . )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0=='*') ) {
                    int LA7_1 = input.LA(2);

                    if ( (LA7_1=='/') ) {
                        alt7=2;
                    }
                    else if ( ((LA7_1>='\u0000' && LA7_1<='.')||(LA7_1>='0' && LA7_1<='\uFFFF')) ) {
                        alt7=1;
                    }


                }
                else if ( ((LA7_0>='\u0000' && LA7_0<=')')||(LA7_0>='+' && LA7_0<='\uFFFF')) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // InternalCrossReferenceProposalTestLanguage.g:169:52: .
            	    {
            	    matchAny(); 

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            match(""*/""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
7228404,none,"        @Override
        public Flux<?> flux() {
            sender = sender(senderOptions());
            Flux<Person> srcFlux = source().flux();
            return sender
                    .sendTransactionally(srcFlux.map(p -> records(p)))
                    .concatMap(r -> r)
                    .doOnNext(r -> log.info(""Sent record successfully {}"", r))
                    .doOnError(e -> log.error(""Send failed, terminating."", e))
                    .doOnCancel(() -> close());
        }"
6291892,none,"        private boolean notifyContent(ByteBuffer buffer)
        {
            try
            {
                return listener.onContent(request, FCGI.StreamType.STD_OUT, buffer);
            }
            catch (Throwable x)
            {
                if (LOG.isDebugEnabled())
                    LOG.debug(""Exception while invoking listener "" + listener, x);
                return false;
            }
        }"
7563795,none,"	@Override
	public TypedValue read(EvaluationContext context, @Nullable Object target, String name) throws AccessException {
		Assert.state(target != null, ""Target must not be null"");
		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass());

		if (type.isArray() && name.equals(""length"")) {
			if (target instanceof Class) {
				throw new AccessException(""Cannot access length on array class itself"");
			}
			return new TypedValue(Array.getLength(target));
		}

		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class);
		InvokerPair invoker = this.readerCache.get(cacheKey);
		this.lastReadInvokerPair = invoker;

		if (invoker == null || invoker.member instanceof Method) {
			Method method = (Method) (invoker != null ? invoker.member : null);
			if (method == null) {
				method = findGetterForProperty(name, type, target);
				if (method != null) {
					// Treat it like a property...
					// The readerCache will only contain gettable properties (let's not worry about setters for now).
					Property property = new Property(type, method, null);
					TypeDescriptor typeDescriptor = new TypeDescriptor(property);
					invoker = new InvokerPair(method, typeDescriptor);
					this.lastReadInvokerPair = invoker;
					this.readerCache.put(cacheKey, invoker);
				}
			}
			if (method != null) {
				try {
					ReflectionUtils.makeAccessible(method);
					Object value = method.invoke(target);
					return new TypedValue(value, invoker.typeDescriptor.narrow(value));
				}
				catch (Exception ex) {
					throw new AccessException(""Unable to access property '"" + name + ""' through getter method"", ex);
				}
			}
		}

		if (invoker == null || invoker.member instanceof Field) {
			Field field = (Field) (invoker == null ? null : invoker.member);
			if (field == null) {
				field = findField(name, type, target);
				if (field != null) {
					invoker = new InvokerPair(field, new TypeDescriptor(field));
					this.lastReadInvokerPair = invoker;
					this.readerCache.put(cacheKey, invoker);
				}
			}
			if (field != null) {
				try {
					ReflectionUtils.makeAccessible(field);
					Object value = field.get(target);
					return new TypedValue(value, invoker.typeDescriptor.narrow(value));
				}
				catch (Exception ex) {
					throw new AccessException(""Unable to access field '"" + name + ""'"", ex);
				}
			}
		}

		throw new AccessException(""Neither getter method nor field found for property '"" + name + ""'"");
	}"
6281757,none,"    protected void findScheduler() throws Exception
    {
        if (_scheduler == null)
        {
            if (_sessionIdManager instanceof DefaultSessionIdManager)
            {
                //try and use a common scheduler, fallback to own
                _scheduler = ((DefaultSessionIdManager)_sessionIdManager).getServer().getBean(Scheduler.class);
            }

            if (_scheduler == null)
            {
                _scheduler = new ScheduledExecutorScheduler(String.format(""Session-HouseKeeper-%x"",hashCode()),false);
                _ownScheduler = true;
                _scheduler.start();
                if (LOG.isDebugEnabled()) LOG.debug(""Using own scheduler for scavenging"");
            }
            else if (!_scheduler.isStarted())
                throw new IllegalStateException(""Shared scheduler not started"");
        }
    }"
5241294,none,"  private static void closeStream(final Channel closeable) {
    if (closeable != null) {
      try {
        closeable.close();
      } catch (IOException e) {
        // ignore
      }
    }
  }"
4303100,none,"    public static void validate(EncryptionKey encKey, ApRep apRep, ApReq apReqSent) throws KrbException {
        EncAPRepPart encPart = EncryptionUtil.unseal(apRep.getEncryptedEncPart(),
                encKey, KeyUsage.AP_REP_ENCPART, EncAPRepPart.class);
        apRep.setEncRepPart(encPart);
        if (apReqSent != null) {
            Authenticator auth = apReqSent.getAuthenticator();
            if (!encPart.getCtime().equals(auth.getCtime())
                    || encPart.getCusec() != auth.getCusec()) {
                throw new KrbException(KrbErrorCode.KRB_AP_ERR_MUT_FAIL);
            }
        }
    }"
8631904,none,"    private BPlusTree.TreeRowClosure<H2Row, H2Row> filter(QueryContext qctx) {
        if (qctx == null) {
            assert !cctx.mvccEnabled();

            return null;
        }

        IndexingQueryFilter f = qctx.filter();
        IndexingQueryCacheFilter p = f == null ? null : f.forCache(getTable().cacheName());
        MvccSnapshot v = qctx.mvccSnapshot();

        assert !cctx.mvccEnabled() || v != null;

        if(p == null && v == null)
            return null;

        return new H2TreeFilterClosure(p, v, cctx, log);
    }"
6431696,none,"    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add(""Affected"", affected)
            .add(""AffectedType"", affectedType)
            .add(""Verb"", verb)
            .toString();
    }"
6246396,none,"    public MqttQoS getQos() {
        return qos;
    }"
7341500,none,"    @Override
    public char[] getRawScheme() {
        return (_scheme == null) ? null : HttpURL.DEFAULT_SCHEME;
    }"
9267168,none,"    public static ValueNode create(ValueNode forValue, ConstantReflectionProvider constantReflection) {
        if (forValue instanceof NewArrayNode) {
            NewArrayNode newArray = (NewArrayNode) forValue;
            return newArray.length();
        }

        ValueNode length = readArrayLength(forValue, constantReflection);
        if (length != null) {
            return length;
        }
        return new ArrayLengthNode(forValue);
    }"
6445236,none,"        @Override
        public ContentFilter decode(UaDecoder decoder) throws UaSerializationException {
            ContentFilterElement[] elements =
                decoder.readBuiltinStructArray(
                    ""Elements"",
                    ContentFilterElement.class
                );

            return new ContentFilter(elements);
        }"
8904560,none,"  @Override
  public SerDeStats getSerDeStats() {
    // No support for statistics. That seems to be a popular answer.
    return null;
  }"
9121203,none,"	private ICompletionProposal[] getRelevantProposals( ITextViewer viewer,
			int offset ) throws BadLocationException
	{
		if ( lastProposals != null )
		{
			ArrayList relevantProposals = new ArrayList( 10 );

			String word = ( findWord( viewer, offset - 1 ) ).toLowerCase( );
			//Search for this word in the list

			for ( int n = 0; n < lastProposals.length; n++ )
			{
				if ( stripQuotes( lastProposals[n].getDisplayString( )
						.toLowerCase( ) ).startsWith( word ) )
				{
					CompletionProposal proposal = new CompletionProposal( lastProposals[n].getDisplayString( ),
							offset - word.length( ),
							word.length( ),
							lastProposals[n].getDisplayString( ).length( ) );
					relevantProposals.add( proposal );
				}
			}

			if ( relevantProposals.size( ) > 0 )
			{
				return (ICompletionProposal[]) relevantProposals.toArray( new ICompletionProposal[]{} );
			}
		}

		return null;
	}"
7491946,none,"        private ExternalLibrary(String name, Path path, boolean isNative, boolean isInternal) {
            this.name = name;
            this.path = path;
            this.isNative = isNative;
            this.isInternal = isInternal;
        }"
5738914,none,"    private void handleControlMessage(ChannelHandlerContext ctx, ControlMessage controlMessage) throws Exception {
        Channel channel = ctx.channel();
        KerberosSaslNettyClient saslNettyClient = getChannelSaslClient(channel);
        if (controlMessage == ControlMessage.SASL_COMPLETE_REQUEST) {
            LOG.debug(""Server has sent us the SaslComplete message. Allowing normal work to proceed."");

            if (!saslNettyClient.isComplete()) {
                String errorMessage =
                    ""Server returned a Sasl-complete message, but as far as we can tell, we are not authenticated yet."";
                LOG.error(errorMessage);
                throw new Exception(errorMessage);
            }
            ctx.pipeline().remove(this);
            this.client.channelReady(channel);

            // We call fireChannelRead since the client is allowed to
            // perform this request. The client's request will now proceed
            // to the next pipeline component namely StormClientHandler.
            ctx.fireChannelRead(controlMessage);
        } else {
            LOG.warn(""Unexpected control message: {}"", controlMessage);
        }
    }"
8785814,none,"  @Override
  public int run(String[] args) throws IOException {
    if (args.length == 0) {
      printUsage(false);
      return 1;
    }
    final Command command = determineCommand(args[0]);
    if (command == null) {
      System.err.println(""Can't understand command '"" + args[0] + ""'"");
      if (!args[0].startsWith(""-"")) {
        System.err.println(""Command names must start with dashes."");
      }
      printUsage(false);
      return 1;
    }
    final List<String> argsList = new LinkedList<String>();
    for (int j = 1; j < args.length; j++) {
      argsList.add(args[j]);
    }
    try {
      return command.run(getConf(), argsList);
    } catch (IllegalArgumentException e) {
      System.err.println(prettifyException(e));
      return -1;
    }
  }"
7792077,none,"		Provision resolve()
		{

			if (pageId != null)
			{
				IRequestablePage stored = getPageSource().getPageInstance(pageId);
				if (stored != null && (pageClass == null || pageClass.equals(stored.getClass())))
				{

					page = stored;

					if (renderCount != null && page.getRenderCount() != renderCount)
						throw new StalePageException(page);
				}

				failedToFindStoredPage = page == null;
			}

			return this;
		}"
7501278,none,"		private DeleteCommand(@Nullable ByteBuffer key, List<RecordId> recordIds) {

			super(key);
			this.recordIds = recordIds;
		}"
7893144,none,"  public CxxToolFlags getNonIncludePathFlags(
      SourcePathResolver resolver, Optional<PrecompiledHeaderData> pch, Preprocessor preprocessor) {
    ExplicitCxxToolFlags.Builder builder = CxxToolFlags.explicitBuilder();
    ExplicitCxxToolFlags.addCxxToolFlags(builder, getOtherFlags());
    if (pch.isPresent()) {
      builder.addAllRuleFlags(
          StringArg.from(
              preprocessor.prefixOrPCHArgs(
                  pch.get().isPrecompiled(), resolver.getAbsolutePath(pch.get().getHeader()))));
    }
    return builder.build();
  }"
8537914,none,"    @Override
    public String getVMPassword(final GetVMPasswordCmd cmd) {
        final Account caller = getCaller();

        final UserVmVO vm = _userVmDao.findById(cmd.getId());
        if (vm == null) {
            final InvalidParameterValueException ex = new InvalidParameterValueException(""No VM with specified id found."");
            ex.addProxyObject(cmd.getId().toString(), ""vmId"");
            throw ex;
        }

        // make permission check
        _accountMgr.checkAccess(caller, null, true, vm);

        _userVmDao.loadDetails(vm);
        final String password = vm.getDetail(""Encrypted.Password"");
        if (password == null || password.equals("""")) {
            final InvalidParameterValueException ex = new InvalidParameterValueException(
                    ""No password for VM with specified id found. "" + ""If VM is created from password enabled template and SSH keypair is assigned to VM then only password can be retrieved."");
            ex.addProxyObject(vm.getUuid(), ""vmId"");
            throw ex;
        }

        return password;
    }"
6933669,none,"  @Override
  protected void validate() {
  }"
3784303,none,"        @Override
        public void execute(Tuple tuple, Object state, TimeWindow window) {
            LOG.info(""executing on window:{}"", window);
            Map<String, Integer> counts = (Map<String, Integer>) state;
            List<Object> partialWordCounts = tuple.getValues();
            for (Object partialWordCount : partialWordCounts) {
                Pair<String, Integer> pair = (Pair<String, Integer>) partialWordCount;
                counts.put(pair.getFirst(), pair.getSecond());
            }
        }"
4817472,none,"  public static String getRequiredAPIElements(int iRequestType)
  {
    String strElements = """";
    
    // cases higher up in the list are supersets of those that come below -
    // hence no ""break"" statements are required, because 'falling through' the
    // switch statement is the desired behaviour in this case
    switch (iRequestType) {
      case Resource.REQUEST_FULL_PREVIEW:
        strElements += ""created-at,updated-at,internal-pack-items,external-pack-items,tags,comments,"";
      case Resource.REQUEST_FULL_LISTING:
        strElements += ""owner,"";
      case Resource.REQUEST_SHORT_LISTING:
        strElements += ""id,title,description,privileges"";
    }
    
    return (strElements);
  }"
8615362,none,"    public HadoopTaskOutput output(HadoopTaskContext taskCtx) throws IgniteCheckedException {
        switch (taskCtx.taskInfo().type()) {
            case MAP:
                assert !job.info().hasCombiner() : ""The output creation is allowed if combiner has not been defined."";

            case COMBINE:
                return new PartitionedOutput(taskCtx);

            default:
                throw new IllegalStateException(""Illegal type: "" + taskCtx.taskInfo().type());
        }
    }"
7748712,none,"    public void setReuseSessions(boolean reuseSessions) {
        this.reuseSessions = reuseSessions;
    }"
7540579,none,"    public static int run() {
        List<Integer> integers = Arrays.asList(1, 2, 3, 4);
        List<Integer> mapped = integers.stream().map(n -> n).collect(Collectors.toList());
        return mapped.size();
    }"
6514981,none,"        @Override
        public void unitKept(IInstallableUnit unit) {
            super.unitKept(unit);
            logger.debug(""  Keeping unit "" + unit.getId() + ""/"" + unit.getVersion());
        }"
7618843,none,"	public static void main(String[] args) throws Exception {
		try(AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Application.class)) {
			context.getBean(NettyContext.class).onClose().block();
		}
	}"
7577346,none,"	@Override
	public void handleRequest(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
			throws ServletException, IOException {

		ServerHttpRequest request = new ServletServerHttpRequest(servletRequest);
		ServerHttpResponse response = new ServletServerHttpResponse(servletResponse);

		try {
			this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.webSocketHandler);
		}
		catch (Throwable ex) {
			throw new SockJsException(""Uncaught failure in SockJS request, uri="" + request.getURI(), ex);
		}
	}"
6177738,none,"  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!(obj instanceof StatusMessage)) {
      return false;
    }
    StatusMessage that = (StatusMessage) obj;

    return Objects.equals(message, that.message)
        && Objects.equals(type, that.type)
        && isAccessible == that.isAccessible;
  }"
6972360,none,"    @Override
    public boolean equals(@Nullable Object object) {
      if (object instanceof Multiset.Entry) {
        Multiset.Entry<?> that = (Multiset.Entry<?>) object;
        return this.getCount() == that.getCount()
            && Objects.equal(this.getElement(), that.getElement());
      }
      return false;
    }"
7810336,none,"  private void rehash(Entry[] oldMap, int newCount, int newCapacity) {
    int oldCapacity = oldMap.length;

    Entry newMap[] = new Entry[newCapacity];

    synchronized (rehashLock) {
      for (int i = oldCapacity; i-- > 0;) {
        for (Entry old = oldMap[i]; old != null;) {
          Entry e = old;
          old = old.next;

          if (e.value != null && e.value instanceof WeakReference) {
            WeakReference r = (WeakReference) e.value;
            if (r.get() == null) {
              // don't copy this one into the new table since its value was gc'd
              newCount--;
              continue;
            }
          }
          int index = Math.abs(e.key) % newCapacity;
          e.next = newMap[index];
          newMap[index] = e;
        }
      }

      threshold = (int) (newCapacity * loadFactor);
      count = newCount;
      table = newMap;
    }
  }"
4110001,none,"    private synchronized void checkHealth() {
        CalculatedStatus status = calculateStatus();
        boolean healthy = status.isHealthy();
        long now = System.currentTimeMillis();

        if (healthy) {
            stateLastGood.set(now);
            if (lastPublished == LastPublished.FAILED) {
                if (currentRecoveryStartTime == null) {
                    LOG.info(""{} check for {}, now recovering: {}"", new Object[] {this, entity, getDescription(status)});
                    currentRecoveryStartTime = now;
                    schedulePublish();
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, continuing recovering: {}"", new Object[] {this, entity, getDescription(status)});
                }
            } else {
                if (currentFailureStartTime != null) {
                    LOG.info(""{} check for {}, now healthy: {}"", new Object[] {this, entity, getDescription(status)});
                    currentFailureStartTime = null;
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, still healthy: {}"", new Object[] {this, entity, getDescription(status)});
                }
            }
        } else {
            stateLastFail.set(now);
            if (lastPublished != LastPublished.FAILED) {
                if (currentFailureStartTime == null) {
                    LOG.info(""{} check for {}, now failing: {}"", new Object[] {this, entity, getDescription(status)});
                    currentFailureStartTime = now;
                    schedulePublish();
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, continuing failing: {}"", new Object[] {this, entity, getDescription(status)});
                }
            } else {
                if (currentRecoveryStartTime != null) {
                    LOG.info(""{} check for {}, now failing: {}"", new Object[] {this, entity, getDescription(status)});
                    currentRecoveryStartTime = null;
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, still failed: {}"", new Object[] {this, entity, getDescription(status)});
                }
            }
        }
    }"
7720851,none,"        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(""name: "").append(this.name);
            sb.append("", id: "").append(this.id);
            sb.append("", subnet range link: "").append(this.subnetRangeLink);
            sb.append("", resource link: "").append(this.connectedResourceLink);
            sb.append("", IP address: "").append(this.ipAddress);
            sb.append("", IP version: "").append(this.ipVersion);
            sb.append("", status: "").append(this.ipAddressStatus);

            return sb.toString();
        }"
5986705,none,"    public Region signingRegion() {
        return signingRegion;
    }"
7436139,none,"    private static void registerUnaryMath(Registration r, String name, UnaryOperation operation) {
        r.register1(name, Double.TYPE, new InvocationPlugin() {
            @Override
            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {
                b.push(JavaKind.Double, b.append(UnaryMathIntrinsicNode.create(value, operation)));
                return true;
            }
        });
    }"
7644249,none,"	public void decide(Authentication authentication, Object object,
			Collection<ConfigAttribute> configAttributes) throws AccessDeniedException {
		int deny = 0;

		for (AccessDecisionVoter voter : getDecisionVoters()) {
			int result = voter.vote(authentication, object, configAttributes);

			if (logger.isDebugEnabled()) {
				logger.debug(""Voter: "" + voter + "", returned: "" + result);
			}

			switch (result) {
			case AccessDecisionVoter.ACCESS_GRANTED:
				return;

			case AccessDecisionVoter.ACCESS_DENIED:
				deny++;

				break;

			default:
				break;
			}
		}

		if (deny > 0) {
			throw new AccessDeniedException(messages.getMessage(
					""AbstractAccessDecisionManager.accessDenied"", ""Access is denied""));
		}

		// To get this far, every AccessDecisionVoter abstained
		checkAllowIfAllAbstainDecisions();
	}"
7344807,none,"    public _ClientService3Soap_SyncExternalStructures(final String projectURI)
    {
        // TODO : Call super() instead of setting all fields directly?
        setProjectURI(projectURI);
    }"
6287432,none,"    @Override
    public DocumentDeleteQuery getQuery() {
        return query;
    }"
3986050,none,"    @Override
    public Object invoke( Object proxy, Method method, Object[] args )
            throws Throwable
    {
        CircuitBreaker circuitBreaker = serviceCircuitBreaker.circuitBreaker();
        try
        {
            if( !circuitBreaker.isOn() )
            {
                throw circuitBreaker.lastThrowable();
            }

            Object result = next.invoke( proxy, method, args );
            circuitBreaker.success();
            return result;
            
        } catch( Throwable throwable )
        {
            circuitBreaker.throwable( throwable );
            throw throwable;
        }
    }"
9118161,none,"	private DataSetHandle getDataSet( ScalarParameterHandle handle )
	{
		if ( !isSingle( ) )
		{
			if ( handle != null && handle.getDataSet( ) != null )
			{
				return handle.getDataSet( );
			}
			return null;
		}
		return inputParameterGroup.getDataSet( );
	}"
5130121,none,"    private Collection<MavenProject> getAggregatedProjects()
    {
        Map<Path, MavenProject> reactorProjectsMap = new HashMap<>();
        for ( MavenProject reactorProject : this.reactorProjects )
        {
            reactorProjectsMap.put( reactorProject.getBasedir().toPath(), reactorProject );
        }

        return modulesForAggregatedProject( project, reactorProjectsMap );
    }"
4330910,none,"    @Override
    public void close() throws IOException
    {
        if ( IS_DEBUG )
        {
            LOG_CURSOR.debug( ""Closing LessEqCursor {}"", this );
        }

        super.close();

        if ( userIdxCursor != null )
        {
            userIdxCursor.close();
        }
        else
        {
            uuidIdxCursor.close();
            uuidCandidate = null;
        }
    }"
6310643,none,"    @Override
    public String toString() {
        return getSchema() + ""://"" + getDns() + "":"" + getPort();
    }"
7313745,none,"    public CandidatesTable getTable() {
        return table;
    }"
8996125,none,"  @Override
  public void setup(Http2SolrClient http2Client) {
    HttpAuthenticationStore authenticationStore = new HttpAuthenticationStore();
    authenticationStore.addAuthentication(createSPNEGOAuthentication());
    http2Client.getHttpClient().setAuthenticationStore(authenticationStore);
    http2Client.getProtocolHandlers().put(new WWWAuthenticationProtocolHandler(http2Client.getHttpClient()));
  }"
5698044,none,"    private Object getValue(Map context, Object value) {
         Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);
         String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);
         if (lastClass == null || lastProperty == null) {
             return value;
         }
         Class elementClass = objectTypeDeterminer.getElementClass(lastClass, lastProperty, null);
         if (elementClass == null) {
             return value; // nothing is specified, we assume it will be the value passed in.
         }
         return xworkConverter.convertValue(context, value, elementClass);
    }"
6311678,none,"    @Then(""^I find (\\d+) devices?$"")
    public void checkDeviceListLength(int cnt) {
        Assert.assertNotNull(stepData.get(""DeviceList""));
        Assert.assertEquals(cnt, ((DeviceListResultImpl) stepData.get(""DeviceList"")).getSize());
    }"
3703084,none,"    public static Header parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }"
8039112,none,"  @Override
  protected EClass eStaticClass()
  {
    return Bug287941TestLanguagePackage.Literals.REFERENCE_ALIAS_WHERE_ENTRY;
  }"
3882178,none,"  @RequiresSession
  public List<ClusterConfigEntity> getLatestConfigurations(long clusterId,
      StackId stackId) {
    StackEntity stackEntity = stackDAO.find(stackId.getStackName(),
        stackId.getStackVersion());

    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createNamedQuery(
        ""ClusterConfigEntity.findLatestConfigsByStack"",
        ClusterConfigEntity.class);

    query.setParameter(""clusterId"", clusterId);
    query.setParameter(""stack"", stackEntity);

    return daoUtils.selectList(query);
  }"
3831179,none,"      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGIN
            return LOGIN;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // VERSIONING_ITER
            return VERSIONING_ITER;
          case 4: // TYPE
            return TYPE;
          default:
            return null;
        }
      }"
3848916,none,"    public void setLocal(boolean local) {
        this.local = local;
    }"
3856345,none,"    private static void printAllExcludes(ModuleDescriptor md, PrintWriter out) {
        ExcludeRule[] excludes = md.getAllExcludeRules();
        if (excludes.length > 0) {
            for (ExcludeRule exclude : excludes) {
                out.print(String.format(""\t\t<exclude org=\""%s\"" module=\""%s\"" artifact=\""%s\"" type=\""%s\"" ext=\""%s\"""",
                        XMLHelper.escape(exclude.getId().getModuleId().getOrganisation()),
                        XMLHelper.escape(exclude.getId().getModuleId().getName()),
                        XMLHelper.escape(exclude.getId().getName()),
                        XMLHelper.escape(exclude.getId().getType()),
                        XMLHelper.escape(exclude.getId().getExt())));
                String[] ruleConfs = exclude.getConfigurations();
                if (!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))) {
                    out.print(listToPrefixedString(ruleConfs, "" conf=\""""));
                }
                out.print("" matcher=\"""" + XMLHelper.escape(exclude.getMatcher().getName()) + ""\"""");
                out.println(""/>"");
            }
        }
    }"
6496450,none,"	public String[] getPath(final TreeItem swtTreeItem) {
		return Display.syncExec(new ResultRunnable<String[]>() {
			@Override
			public String[] run() {
				org.eclipse.swt.widgets.TreeItem swttiDummy = swtTreeItem;
				LinkedList<String> items = new LinkedList<String>();
				while (swttiDummy != null) {
					items.addFirst(swttiDummy.getText());
					swttiDummy = swttiDummy.getParentItem();
				}
				return items.toArray(new String[0]);
			}
		});
	}"
5768802,none,"    @Override
    public void delete(final String key) {
        ReportExec execution = find(key);
        if (execution == null) {
            return;
        }

        delete(execution);
    }"
7337628,none,"    private static String[] getColumnProperties() {
        final String[] columnProperties = new String[COLUMN_DATA.length];
        for (int i = 0; i < columnProperties.length; i++) {
            columnProperties[i] = COLUMN_DATA[i].name;
        }
        return columnProperties;
    }"
6248023,none,"    private Pattern getPatternFindAnyCharacter() {
        final String regexCharacters = characters.stream().map(RegexChar::getRegExp)
                .collect(Collectors.joining());
        final String regularExpression = String.format("".*[%s]+.*"", regexCharacters);
        return Pattern.compile(regularExpression);
    }"
4320364,none,"	public ResultSet getUpdateVTIResultSet(NoPutResultSet source)
			throws StandardException
	{
		Activation activation = source.getActivation();
		getAuthorizer(activation).authorize(activation, Authorizer.SQL_WRITE_OP);
		return new UpdateVTIResultSet(source, activation);
	}"
7255045,none,"    public static boolean isWindows(String osName) {
        return (getOperatingSystem(osName) & OS_WINDOWS_MASK) != 0;
    }"
6839966,none,"  @Override
  public int hashCode() {
    return uri.hashCode();
  }"
5762348,none,"    @PreAuthorize(""hasRole('"" + StandardEntitlement.REPORT_TEMPLATE_DELETE + ""')"")
    public ReportTemplateTO delete(final String key) {
        ReportTemplate reportTemplate = reportTemplateDAO.find(key);
        if (reportTemplate == null) {
            LOG.error(""Could not find report template '"" + key + ""'"");

            throw new NotFoundException(key);
        }

        List<Report> reports = reportDAO.findByTemplate(reportTemplate);
        if (!reports.isEmpty()) {
            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);
            sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));
            throw sce;
        }

        ReportTemplateTO deleted = getReportTemplateTO(key);
        reportTemplateDAO.delete(key);
        return deleted;
    }"
5747163,none,"    @org.apache.storm.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // EXPIRATION_TIME_MILLIS
          return EXPIRATION_TIME_MILLIS;
        default:
          return null;
      }
    }"
9433104,none,"    private void writeObject(ObjectOutputStream s)
      throws java.io.IOException
    {
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      s.writeObject(null);
    }"
4436948,none,"    public static Date getImportInitalInstance(org.apache.falcon.entity.v0.feed.Cluster feedCluster) {
        return feedCluster.getValidity().getStart();
    }"
9007287,none,"  @Override
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first){
      throw new IOException(String.format(Locale.ROOT,""Unable to %s(...) with a null numerator"", constructingFactory.getFunctionName(getClass())));
    }
    
    if(null == second){
      throw new IOException(String.format(Locale.ROOT,""Unable to %s(...) with a null denominator"", constructingFactory.getFunctionName(getClass())));
    }

    BigDecimal numerator = (BigDecimal)first;
    BigDecimal denominator = (BigDecimal)second;
        
    if(0 == denominator.compareTo(BigDecimal.ZERO)){
      throw new IOException(String.format(Locale.ROOT,""Unable to %s(...) with a 0 denominator"", constructingFactory.getFunctionName(getClass())));
    }
    
    return numerator.divide(denominator, MathContext.DECIMAL64);
  }"
6945437,none,"    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }"
3998684,none,"        protected String getEventType(String eventName) {
            if (eventName.equals(""focusin"")) {
                return ""DOMFocusIn"";
            } else if (eventName.equals(""focusout"")) {
                return ""DOMFocusOut"";
            } else if (eventName.equals(""activate"")) {
                return ""DOMActivate"";
            }
            if (isSVG12) {
                if (animationEventNames12.contains(eventName)) {
                    return eventName;
                }
            } else {
                if (animationEventNames11.contains(eventName)) {
                    return eventName;
                }
            }
            return null;
        }"
5723559,none,"    protected static void copyBlobStoreKeys(BlobStore bsFrom, Subject whoFrom, BlobStore bsTo, Subject whoTo) throws AuthorizationException, KeyAlreadyExistsException, IOException, KeyNotFoundException {
        Iterable<String> lfsKeys = () -> bsFrom.listKeys();
        for(String key : lfsKeys) {
            ReadableBlobMeta readable_meta = bsFrom.getBlobMeta(key, whoFrom);
            SettableBlobMeta meta = readable_meta.get_settable();
            InputStream in = bsFrom.getBlob(key, whoFrom);
            System.out.println(""COPYING BLOB "" + key + "" FROM "" + bsFrom + "" TO "" + bsTo);
            bsTo.createBlob(key, in, meta, whoTo);
            System.out.println(""DONE CREATING BLOB "" + key);
        }
    }"
6840313,none,"	public TagTitle getTitle() {
		return title;
	}"
4287634,none,"  @Before
  public void setUp() throws Exception {
    Configuration conf = HBaseConfiguration.create(tmpDir.getDefaultConfiguration());
    conf.set(HConstants.TEMPORARY_FS_DIRECTORY_KEY, tmpDir.getFile(""hbase-staging"").getAbsolutePath());
    hbaseTestUtil = new HBaseTestingUtility(conf);
    hbaseTestUtil.startMiniCluster();
  }"
7038229,none,"  public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy) {
    this.fieldNamingPolicy = fieldNamingStrategy;
    return this;
  }"
5497852,none,"    public BooleanLessEqual(final List expr) throws QmfException
    {
        super(2, expr);
    }"
7087370,none,"  public int getRoot()
  {
  	if(null != m_iter)
    	return m_iter.getRoot();
  	else
  	{
  		// NodeSetDTM will call this, and so it's not a good thing to throw 
  		// an assertion here.
  		// assertion(false, ""Can not get the root from a non-iterated NodeSequence!"");
  		return DTM.NULL;
  	}
  }"
7205731,none,"        public Builder cfBackupHandle(String cfBackupHandle) {
            this.cfBackupHandle = cfBackupHandle;
            this.__explicitlySet__.add(""cfBackupHandle"");
            return this;
        }"
5737047,none,"    public SimpleFileNameFormat withTimeFormat(String timeFormat) {
        //check format
        try {
            new SimpleDateFormat(timeFormat);
        } catch (Exception e) {
            throw new IllegalArgumentException(""invalid timeFormat: "" + e.getMessage());
        }
        this.timeFormat = timeFormat;
        return this;
    }"
7962366,none,"    public final void ruleXDoWhileExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXImportSectionTestLang.g:1067:2: ( ( ( rule__XDoWhileExpression__Group__0 ) ) )
            // InternalXImportSectionTestLang.g:1068:2: ( ( rule__XDoWhileExpression__Group__0 ) )
            {
            // InternalXImportSectionTestLang.g:1068:2: ( ( rule__XDoWhileExpression__Group__0 ) )
            // InternalXImportSectionTestLang.g:1069:3: ( rule__XDoWhileExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getGroup()); 
            }
            // InternalXImportSectionTestLang.g:1070:3: ( rule__XDoWhileExpression__Group__0 )
            // InternalXImportSectionTestLang.g:1070:4: rule__XDoWhileExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
6515617,none,"    private Object getApplicationToRun(String[] args) throws CoreException {
        String configuredApplication = getConfiguredApplication(args);
        if (configuredApplication == null) {
            configuredApplication = DEFAULT_APP_3_0;
        } else {
            System.out.println(""Launching application "" + configuredApplication + ""..."");
        }

        // Assume we are in 3.0 mode.
        // Find the name of the application as specified by the PDE JUnit launcher.
        // If no application is specified, the 3.0 default workbench application
        // is returned.
        IExtension extension = Platform.getExtensionRegistry().getExtension(Platform.PI_RUNTIME,
                Platform.PT_APPLICATIONS, configuredApplication);

        // If no 3.0 extension can be found, search the registry
        // for the pre-3.0 default workbench application, i.e. org.eclipse ui.workbench
        // Set the deprecated flag to true
        if (extension == null) {
            return null;
        }

        // If the extension does not have the correct grammar, return null.
        // Otherwise, return the application object.
        IConfigurationElement[] elements = extension.getConfigurationElements();
        if (elements.length > 0) {
            IConfigurationElement[] runs = elements[0].getChildren(""run""); //$NON-NLS-1$
            if (runs.length > 0) {
                return runs[0].createExecutableExtension(""class""); //$NON-NLS-1$
            }
        }
        return null;
    }"
4222807,none,"        public MerkleTrees deserialize(DataInputPlus in, int version) throws IOException
        {
            IPartitioner partitioner = null;
            int nTrees = in.readInt();
            Collection<MerkleTree> trees = new ArrayList<>(nTrees);
            if (nTrees > 0)
            {
                for (int i = 0; i < nTrees; i++)
                {
                    MerkleTree tree = MerkleTree.serializer.deserialize(in, version);
                    trees.add(tree);

                    if (partitioner == null)
                        partitioner = tree.partitioner();
                    else
                        assert tree.partitioner() == partitioner;
                }
            }

            return new MerkleTrees(partitioner, trees);
        }"
8443434,none,"    private Region messageToRegion(Message message) {
        Region region = message.getBody(Region.class);
        if (region == null) {
            Map headers = message.getHeaders();
            RegionBuilder builder = Builders.region();

            if (headers.containsKey(KeystoneConstants.DESCRIPTION)) {
                builder.description(message.getHeader(KeystoneConstants.DESCRIPTION, String.class));
            }

            region = builder.build();
        }

        return region;
    }"
9294785,none,"        private void setElem(final int index, final double elem) {
            try {
                if (index < nb.limit()) {
                    nb.put(index, elem);
                }
            } catch (final IndexOutOfBoundsException e) {
                throw new ClassCastException();
             }
        }"
4786049,none,"  @Override
  public void clear() {
    this.status = null;
    this.privileges = null;
  }"
5020389,none,"    public void stop() throws Exception {
        service.stopInstance(name);
    }"
4479936,none,"  public static LogicalExpression getIntervalDay(long intervalInMillis) {
      return new IntervalDayExpression(intervalInMillis);
  }"
3879673,none,"  protected DeleteAlertGroupRequestAuditEvent() {
  }"
7530504,none,"	public S userFlag(String userFlag) {
		assertReceiver();
		this.receiver.setUserFlag(userFlag);
		return _this();
	}"
9523314,none,"    @Override
    public CODE<T> a(String selector, String href, String anchorText) {
      return setSelector(a(), selector).$href(href)._(anchorText)._();
    }"
5048033,none,"    private static Var asVar(Node node)
    {
        if ( Var.isVar(node) )
            return Var.alloc(node) ;
        return null ;
    }"
4162330,none,"    protected String getCsrfHeader() {
        Object csrfHeaderObject = getSession().get(SessionParameter.CSRF_HEADER);
        if (csrfHeaderObject instanceof String) {
            return (String) csrfHeaderObject;
        }

        return null;
    }"
3917547,none,"    public renameNamespace_args setNewNamespaceName(@org.apache.thrift.annotation.Nullable java.lang.String newNamespaceName) {
      this.newNamespaceName = newNamespaceName;
      return this;
    }"
3924454,none,"    public void unsetTinfo() {
      this.tinfo = null;
    }"
6328926,none,"    public boolean hasPermission(String domain, GwtSessionPermissionAction action, GwtSessionPermissionScope targetScope) {
        return hasPermission(new GwtSessionPermission(domain, action, targetScope));
    }"
5450234,none,"    default boolean hasDataFromHttp() {
        return false;
    }"
9249537,none,"    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
        return new ScheduledThreadPoolExecutor(corePoolSize);
    }"
8334400,none,"    public static void main (String[] args) {
    }"
7526716,none,"	protected D createModelWithId(Object id, T entity) {
		return createModelWithId(id, entity, new Object[0]);
	}"
3829184,none,"   public void resetHistory() {
      int max = dayCounterMax;

      setHistoryLimit(0);
      setHistoryLimit(max);
   }"
7659358,none,"	protected void notifyStateChanged(StateMachineContext<S, E> context) {
		if (log.isTraceEnabled()) {
			log.trace(""Notify notifyStateChanged "" + context);
		}
		ensembleListener.stateChanged(context);
	}"
7834476,none,"  public long getConnectionId() {
    return connectionId;
  }"
6605818,none,"    public BiologicalDataItemResourceType getType() {
        return fileType;
    }"
5988833,none,"    @JsonProperty(value = ""credentialScope"")
    public void setCredentialScope(CredentialScope credentialScope) {
        this.credentialScope = credentialScope;
    }"
4849361,none,"    public Address buildAddress(ASTaddress node, DecodeMonitor monitor) throws ParseException {
        ChildNodeIterator it = new ChildNodeIterator(node);
        Node n = it.next();
        if (n instanceof ASTaddr_spec) {
            return buildAddrSpec((ASTaddr_spec) n);
        } else if (n instanceof ASTangle_addr) {
            return buildAngleAddr((ASTangle_addr) n);
        } else if (n instanceof ASTphrase) {
            String name = buildString((ASTphrase) n, false);
            Node n2 = it.next();
            if (n2 instanceof ASTgroup_body) {
                return new Group(name, buildGroupBody((ASTgroup_body) n2, monitor));
            } else if (n2 instanceof ASTangle_addr) {
                try {
                    name = DecoderUtil.decodeEncodedWords(name, monitor);
                } catch (IllegalArgumentException e) {
                    throw new ParseException(e);
                }
                Mailbox mb = buildAngleAddr((ASTangle_addr) n2);
                return new Mailbox(name, mb.getRoute(), mb.getLocalPart(),
                        mb.getDomain());
            } else {
                throw new ParseException(""Address \""group_body\"" or \""angle_addr\"" is expected but got \"""" + n + ""\"""");
            }
        } else {
            throw new ParseException(""Address \""phrase\"" is expected but got \"""" + n + ""\"""");
        }
    }"
6615560,none,"public static String
toString(byte [] b) {
	ByteArrayOutputStream os = new ByteArrayOutputStream();

	for (int i = 0; i < b.length; i++) {
		short value = (short) (b[i] & 0xFF);
		byte high = (byte) (value >> 4);
		byte low = (byte) (value & 0xF);
		os.write(Base16.charAt(high));
		os.write(Base16.charAt(low));
	}
	return new String(os.toByteArray());
}"
7267070,none,"        boolean hasClasses() {
            Enumeration<? extends FileObject> e = pkg.getData(false);
            while (e.hasMoreElements())
                if (e.nextElement().getExt().equalsIgnoreCase(""class"")) // NOI18N
                    return true;
            return false;
        }"
4045338,none,"    private static void insertInitialDataverses(MetadataTransactionContext mdTxnCtx) throws AlgebricksException {
        String dataFormat = NonTaggedDataFormat.NON_TAGGED_DATA_FORMAT;
        MetadataManager.INSTANCE.addDataverse(mdTxnCtx,
                new Dataverse(MetadataConstants.METADATA_DATAVERSE_NAME, dataFormat, MetadataUtil.PENDING_NO_OP));
        MetadataManager.INSTANCE.addDataverse(mdTxnCtx, MetadataBuiltinEntities.DEFAULT_DATAVERSE);
    }"
5497900,none,"    public QmfEvent createUnsubscribeEvent()
    {
        QmfEvent unsubscribe = new QmfEvent(_unsubscribeSchema);
        unsubscribe.setSeverity(""info"");
        unsubscribe.setValue(""dest"", getStringValue(""name""));
        // TODO Not sure of a way to get these for Java Broker Subscription.
        //unsubscribe.setValue(""rhost"", _connection.getName());
        //unsubscribe.setValue(""user"", getStringValue(""authIdentity""));
        return unsubscribe;
    }"
4354720,none,"	private void bindSQRTABS()
			throws StandardException
	{
		TypeId	operandType;
		int 	jdbcType;

		/*
		** Check the type of the operand 
		*/
		operandType = operand.getTypeId();

		/*
	 	 * If the operand is not a build-in type, generate a bound conversion
		 * tree to build-in types.
		 */
		if (operandType.userType() )
		{
			operand = operand.genSQLJavaSQLTree();
		}
		/* DB2 doesn't cast string types to numeric types for numeric functions  */

		jdbcType = operandType.getJDBCTypeId();

		/* Both SQRT and ABS are only allowed on numeric types */
		if (!operandType.isNumericTypeId())
			throw StandardException.newException(
						SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
						getOperatorString(), operandType.getSQLTypeName());

		/* For SQRT, if operand is not a DOUBLE, convert it to DOUBLE */
       if (kind == K_SQRT &&
            jdbcType != Types.DOUBLE)
		{
            operand = new CastNode(
					operand,
					new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.DOUBLE), true),
					getContextManager());
			((CastNode) operand).bindCastNodeOnly();
		}
	}"
7638064,none,"	private String getMessage(Exception _e) {
		Throwable e = ExceptionUtil.getDeepestCause(_e);

		// If value parse exception, do not append any additional information
		if (e instanceof ValueParseException) {
			String msg = e.getMessage();
			if (StringUtil.hasText(msg)) {
				return msg;
			} else {
				return ""An error occurred: "" + getSimpleError(e);
			}
		} else {
			return ExceptionUtil.getMessage(e);
		}
	}"
5989223,none,"    @BeforeClass
    public static void setUp() throws Exception {
        s3 = s3ClientBuilder().build();
        s3Async = s3AsyncClientBuilder().build();
    }"
7114490,none,"  public void setOutputProperty(String name, String value)
          throws IllegalArgumentException
  {

    synchronized (m_reentryGuard)
    {

      // Get the output format that was set by the user, otherwise get the 
      // output format from the stylesheet.
      if (null == m_outputFormat)
      {
        m_outputFormat =
          (OutputProperties) getStylesheet().getOutputComposed().clone();
      }

      if (!OutputProperties.isLegalPropertyKey(name))
        throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED, new Object[]{name})); //""output property not recognized: ""
                                           //+ name);

      m_outputFormat.setProperty(name, value);
    }
  }"
6858458,none,"  @Override
  public IHelpInformation getHelpInformation() {
    return new CPasswordHelp();
  }"
3926659,none,"    public getSiteConfiguration_args(
      java.nio.ByteBuffer login)
    {
      this();
      this.login = org.apache.thrift.TBaseHelper.copyBinary(login);
    }"
8904876,none,"    @Override
    public void clear() {
      this.cr = null;
    }"
4395308,none,"    public PullPoint create(String queueName) throws UnableToCreatePullPointFault {
        org.oasis_open.docs.wsn.b_2.CreatePullPoint request
            = new org.oasis_open.docs.wsn.b_2.CreatePullPoint();
        request.getOtherAttributes().put(NotificationBroker.QNAME_PULLPOINT_QUEUE_NAME, queueName);
        CreatePullPointResponse response = createPullPoint.createPullPoint(request);
        return new PullPoint(response.getPullPoint());
    }"
6290471,none,"    public void setAsyncWriteTimeout(long ms)
    {
        assertLessThan(""AsyncWriteTimeout"",ms,""IdleTimeout"",idleTimeout);
        this.asyncWriteTimeout = ms;
    }"
3811653,none,"   @Override
   public MessageReference copy(final Queue queue) {
      return new MessageReferenceImpl(this, queue);
   }"
5490526,none,"        @Override
        public void writeToBuffer(QpidByteBuffer buffer)
        {
            _type.writeToBuffer(_value, buffer);
        }"
4301341,none,"    public GSSCredentialSpi getCredentialElement(GSSNameSpi name,
                                                 int initLifetime,
                                                 int acceptLifetime,
                                                 int usage)
            throws GSSException {
        if (name != null && !(name instanceof GssNameElement)) {
            name = GssNameElement.getInstance(name.toString(), name.getStringNameType());
        }

        GssCredElement credElement;

        if (usage == GSSCredential.INITIATE_ONLY) {
            credElement = GssInitCred.getInstance(caller, (GssNameElement) name, initLifetime);
        } else if (usage == GSSCredential.ACCEPT_ONLY) {
            credElement = GssAcceptCred.getInstance(caller, (GssNameElement) name, acceptLifetime);
        } else if (usage == GSSCredential.INITIATE_AND_ACCEPT) {
            throw new GSSException(GSSException.FAILURE, -1, ""Unsupported usage mode: INITIATE_AND_ACCEPT"");
        } else {
            throw new GSSException(GSSException.FAILURE, -1, ""Unknown usage mode: "" + usage);
        }

        return credElement;
    }"
9491268,none,"  @Override
  public void handleFailedContainer(TaskAttemptId attemptID) {
    toBePreempted.remove(attemptID);
    checkpoints.remove(attemptID.getTaskId());
  }"
4918125,none,"    protected static boolean isNonProxy(String host){
        return nonProxyHostFull.contains(host) || isPartialMatch(host);
    }"
5040675,none,"    @Override
    public void sync() {
        if ( dirty )
            writeState();
    }"
7356604,none,"    public void addConstantSet(
        final int rootConstantID,
        final boolean oneLevel,
        final boolean twoPlusLevels,
        final boolean leaf,
        final boolean interior,
        final IConstantSet constantSet) {
        metadata.addConstantSet(rootConstantID, oneLevel, twoPlusLevels, leaf, interior, constantSet);
    }"
4566202,none,"    @Override
    protected GraphicsNode createImageGraphicsNode(
                BridgeContext ctx, Element imageElement, ParsedURL purl) {
        AbstractFOPBridgeContext bridgeCtx = (AbstractFOPBridgeContext)ctx;

        ImageManager manager = bridgeCtx.getImageManager();
        ImageSessionContext sessionContext = bridgeCtx.getImageSessionContext();
        try {
            ImageInfo info = manager.getImageInfo(purl.toString(), sessionContext);
            ImageFlavor[] supportedFlavors = getSupportedFlavours();
            Image image = manager.getImage(info, supportedFlavors, sessionContext);

            //TODO color profile overrides aren't handled, yet!
            //ICCColorSpaceExt colorspaceOverride = extractColorSpace(e, ctx);
            AbstractGraphicsNode specializedNode = null;
            if (image instanceof ImageXMLDOM) {
                ImageXMLDOM xmlImage = (ImageXMLDOM)image;
                if (xmlImage.getDocument() instanceof SVGDocument) {
                    //Clone DOM because the Batik's CSS Parser attaches to the DOM and is therefore
                    //not thread-safe.
                    SVGDocument clonedDoc = (SVGDocument)BatikUtil.cloneSVGDocument(
                            xmlImage.getDocument());
                    return createSVGImageNode(ctx, imageElement, clonedDoc);
                } else {
                    //Convert image to Graphics2D
                    image = manager.convertImage(xmlImage,
                            new ImageFlavor[] {ImageFlavor.GRAPHICS2D});
                }
            }
            if (image instanceof ImageRawJPEG) {
                specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);
            } else if (image instanceof ImageRawCCITTFax) {
                specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);
            } else if (image instanceof ImageGraphics2D) {
                ImageGraphics2D g2dImage = (ImageGraphics2D)image;
                specializedNode = new Graphics2DNode(g2dImage);
            } else {
                ctx.getUserAgent().displayError(
                        new ImageException(""Cannot convert an image to a usable format: "" + purl));
            }

            if (specializedNode != null) {
                Rectangle2D imgBounds = getImageBounds(ctx, imageElement);
                Rectangle2D bounds = specializedNode.getPrimitiveBounds();
                float [] vb = new float[4];
                vb[0] = 0; // x
                vb[1] = 0; // y
                vb[2] = (float) bounds.getWidth(); // width
                vb[3] = (float) bounds.getHeight(); // height

                // handles the 'preserveAspectRatio', 'overflow' and 'clip'
                // and sets the appropriate AffineTransform to the image node
                initializeViewport(ctx, imageElement, specializedNode, vb, imgBounds);
                return specializedNode;
            }
        } catch (Exception e) {
            ctx.getUserAgent().displayError(e);
        }

        //Fallback
        return superCreateGraphicsNode(ctx, imageElement, purl);
    }"
9024733,none,"  protected void doDeleteById(DeleteUpdateCommand cmd) throws IOException {

    setupRequest(cmd);

    boolean dropCmd = false;
    if (!forwardToLeader) {
      dropCmd  = versionDelete(cmd);
    }

    if (dropCmd) {
      // TODO: do we need to add anything to the response?
      return;
    }

    doDistribDeleteById(cmd);

    // cmd.getIndexId == null when delete by query
    // TODO: what to do when no idField?
    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {
      if (deleteResponse == null) {
        deleteResponse = new NamedList<>(1);
        rsp.add(""deletes"",deleteResponse);
      }
      if (scratch == null) scratch = new CharsRefBuilder();
      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);
      deleteResponse.add(scratch.toString(), cmd.getVersion());  // we're returning the version of the delete.. not the version of the doc we deleted.
    }
  }"
9128649,none,"	private void fireEvent( Event event )
	{
		for ( int i = 0; i < vListeners.size( ); i++ )
		{
			vListeners.get( i ).handleEvent( event );
		}
	}"
6532406,none,"    public Double[] getPrecipitation() {
        return precipitation;
    }"
6306509,none,"    public String getDeviceDisplayName() {
        String displayName = """";
        if (this.properties == null) {
            return displayName;
        }
        String deviceDisplayNameOption = (String) this.properties.get(DEVICE_DISPLAY_NAME);

        // Use the device name from SystemService. This should be kura.device.name from
        // the properties file.
        if (""device-name"".equals(deviceDisplayNameOption)) {
            displayName = this.systemService.getDeviceName();
        }
        // Try to get the device hostname
        else if (""hostname"".equals(deviceDisplayNameOption)) {
            displayName = this.systemService.getHostname();
        }
        // Return the custom field defined by the user
        else if (""custom"".equals(deviceDisplayNameOption)
                && this.properties.get(DEVICE_CUSTOM_NAME) instanceof String) {
            displayName = (String) this.properties.get(DEVICE_CUSTOM_NAME);
        }
        // Return empty string to the server
        else if (""server"".equals(deviceDisplayNameOption)) {
            displayName = """";
        }

        return displayName;
    }"
7044394,none,"  public CaptureDeviceInput activateInput(CaptureDeviceInput activateMe) throws EncodingException
  {
    // NOTE: This was removed so we always set the input before we start capture. There was a bug where the audio was
    // getting cut out of some recordings due to the audio standard not being set correctly. This will hopefully
    // resolve that.
    // if (activeSource == activateMe) return activeSource;
    super.activateInput(activateMe);
    if (activeSource != null && isLoaded())
    {
      boolean savePrefsAfter = (activeSource.getBrightness() < 0) || (activeSource.getContrast() < 0) ||
          (activeSource.getHue() < 0) || (activeSource.getSaturation() < 0) || (activeSource.getSharpness() < 0);

      synchronized (devlock)
      {
        setChannel0(pHandle, Integer.toString(activeSource.getIndex()));
      }
      int[] defaultColors = updateColors();
      activeSource.setDefaultColors(defaultColors[0], defaultColors[1], defaultColors[2], defaultColors[3],
          defaultColors[4]);

      if (savePrefsAfter)
        writePrefs();
    }
    return activeSource;
  }"
7372565,none,"		private AnnotationMetadata getAnnotationMetadata() {
			if (this.annotationMetadata == null) {
				try {
					MetadataReader metadataReader = this.metadataReaderFactory
							.getMetadataReader(this.className);
					this.annotationMetadata = metadataReader.getAnnotationMetadata();
				}
				catch (IOException ex) {
					throw new IllegalStateException(
							""Unable to read meta-data for class "" + this.className, ex);
				}
			}
			return this.annotationMetadata;
		}"
7246708,none,"    public static synchronized HeapDumpOnOOMEAction instance() {
        if (instance == null) 
            instance = new HeapDumpOnOOMEAction();
        return instance;
    }"
3952980,none,"  public void setWindowDataManager(WindowDataManager windowDataManager)
  {
    this.windowDataManager = windowDataManager;
  }"
6917328,none,"  public String readNullTerminatedString(int length) {
    if (length == 0) {
      return """";
    }
    int stringLength = length;
    int lastIndex = position + length - 1;
    if (lastIndex < limit && data[lastIndex] == 0) {
      stringLength--;
    }
    String result = Util.fromUtf8Bytes(data, position, stringLength);
    position += length;
    return result;
  }"
8931105,none,"    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_VERSION:
        return getSchemaVersion();

      }
      throw new IllegalStateException();
    }"
7102262,none,"    public String toString() {

        if (subject == null || pubKey == null || interval == null
            || issuer == null || algId == null || serialNum == null) {
                throw new NullPointerException(""X.509 cert is incomplete"");
        }
        StringBuilder sb = new StringBuilder();

        sb.append(""[\n"");
        sb.append(""  "" + version.toString() + ""\n"");
        sb.append(""  Subject: "" + subject.toString() + ""\n"");
        sb.append(""  Signature Algorithm: "" + algId.toString() + ""\n"");
        sb.append(""  Key:  "" + pubKey.toString() + ""\n"");
        sb.append(""  "" + interval.toString() + ""\n"");
        sb.append(""  Issuer: "" + issuer.toString() + ""\n"");
        sb.append(""  "" + serialNum.toString() + ""\n"");

        // optional v2, v3 extras
        if (issuerUniqueId != null) {
            sb.append(""  Issuer Id:\n"" + issuerUniqueId.toString() + ""\n"");
        }
        if (subjectUniqueId != null) {
            sb.append(""  Subject Id:\n"" + subjectUniqueId.toString() + ""\n"");
        }
        if (extensions != null) {
            Collection<Extension> allExts = extensions.getAllExtensions();
            Extension[] exts = allExts.toArray(new Extension[0]);
            sb.append(""\nCertificate Extensions: "" + exts.length);
            for (int i = 0; i < exts.length; i++) {
                sb.append(""\n["" + (i+1) + ""]: "");
                Extension ext = exts[i];
                try {
                    if (OIDMap.getClass(ext.getExtensionId()) == null) {
                        sb.append(ext.toString());
                        byte[] extValue = ext.getExtensionValue();
                        if (extValue != null) {
                            DerOutputStream out = new DerOutputStream();
                            out.putOctetString(extValue);
                            extValue = out.toByteArray();
                            HexDumpEncoder enc = new HexDumpEncoder();
                            sb.append(""Extension unknown: ""
                                      + ""DER encoded OCTET string =\n""
                                      + enc.encodeBuffer(extValue) + ""\n"");
                        }
                    } else
                        sb.append(ext.toString()); //sub-class exists
                } catch (Exception e) {
                    sb.append("", Error parsing this extension"");
                }
            }
            Map<String,Extension> invalid = extensions.getUnparseableExtensions();
            if (invalid.isEmpty() == false) {
                sb.append(""\nUnparseable certificate extensions: "" + invalid.size());
                int i = 1;
                for (Extension ext : invalid.values()) {
                    sb.append(""\n["" + (i++) + ""]: "");
                    sb.append(ext);
                }
            }
        }
        sb.append(""\n]"");
        return sb.toString();
    }"
7726305,none,"    public ResourceOperationSpecService() {
        super(ResourceOperationSpec.class);
        super.toggleOption(ServiceOption.PERSISTENCE, true);
        super.toggleOption(ServiceOption.REPLICATION, true);
        super.toggleOption(ServiceOption.OWNER_SELECTION, true);
        super.toggleOption(ServiceOption.IDEMPOTENT_POST, true);
    }"
9440897,none,"    @Override
    public void accept( final Visitor v ) {
        v.visitStackConsumer(this);
        v.visitExceptionThrower(this);
        v.visitTypedInstruction(this);
        v.visitArrayInstruction(this);
        v.visitIASTORE(this);
    }"
7906258,none,"    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
      return fields;
    }"
6161020,none,"  public Path removeLastSegments(int count) {
    if (count == 0) return this;
    if (count >= segments.length) {
      // result will have no trailing separator
      return new Path(device, NO_SEGMENTS, separators & (HAS_LEADING | IS_UNC));
    }
    checkArgument(count > 0);
    int newSize = segments.length - count;
    String[] newSegments = new String[newSize];
    System.arraycopy(this.segments, 0, newSegments, 0, newSize);
    return new Path(device, newSegments, separators & (HAS_LEADING | IS_UNC));
  }"
8182379,none,"    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {

        MessageDispatchNotification info = (MessageDispatchNotification)o;

        int rc = super.tightMarshal1(wireFormat, o, bs);
        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
        rc += tightMarshalLong1(wireFormat, info.getDeliverySequenceId(), bs);
        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);

        return rc + 0;
    }"
7142098,none,"  List<ResourceDefinitionListener> getResourceDefinitionListeners()
  {
    return _resourceDefinitionListeners;
  }"
8424288,none,"    public DnsDigProducer(Endpoint endpoint) {
        super(endpoint);
    }"
7221713,none,"		@Override
		public void onComplete() {
			if (done) {
				return;
			}
			done = true;

			C b = buffer;

			if (b != null && !b.isEmpty()) {
				actual.onNext(b);
			}
			actual.onComplete();
		}"
6917981,none,"    private DiffList computeDiffEntries(
        Repository repo, GitilesView view, RevWalk walk, RevCommit commit) throws IOException {
      DiffList result = new DiffList();
      result.revision =
          view.getRevision().matches(commit)
              ? view.getRevision()
              : Revision.peeled(commit.name(), commit);

      AbstractTreeIterator oldTree;
      switch (commit.getParentCount()) {
        case 0:
          result.oldRevision = Revision.NULL;
          oldTree = new EmptyTreeIterator();
          break;
        case 1:
          result.oldRevision =
              Revision.peeled(result.revision.getName() + ""^"", commit.getParent(0));
          oldTree = getTreeIterator(walk, commit.getParent(0));
          break;
        default:
          // TODO(dborowitz): handle merges
          return result;
      }
      AbstractTreeIterator newTree = getTreeIterator(walk, commit);

      try (DiffFormatter diff = new DiffFormatter(NullOutputStream.INSTANCE)) {
        diff.setRepository(repo);
        diff.setDetectRenames(true);
        result.entries = diff.scan(oldTree, newTree);
        return result;
      }
    }"
5642265,none,"    @Override
    public List<Cookie> parse(Header header, CookieOrigin origin) throws MalformedCookieException {
        List<Cookie> cookies = super.parse(header, origin);
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(StickyCookieHolder.COOKIE_NAME)) {
                // store it in the TestStickySessionRule threadlocal var
                StickyCookieHolder.setTestStickySessionCookie(cookie);
            }
        }
        return cookies;
    }"
8244590,none,"    public static int getAttributeAsInteger(Element element, 
            String attributeName) throws Exception {
        String attrValue = getAttribute(element, attributeName);
        try {
            return Integer.parseInt(attrValue);
        } catch (NumberFormatException e) {
            throw new Exception(""Cannot parse the value \"""" + attrValue + 
                    ""\"" as an integer in the attribute \"""" + attributeName + 
                    ""\"" on the element \"""" + element.getTagName() + 
                    ""\"" at "" + getLocation(element));
        }
    }"
7009433,none,"  @Provides
  @Parameter(""fields"")
  static Optional<String> provideFields(HttpServletRequest req) {
    return extractOptionalParameter(req, ListObjectsAction.FIELDS_PARAM);
  }"
8067122,none,"		public TitanBoolean constGet_at( final int index_value ) {
			must_bound( ""Accessing an element in an unbound value of type @PreGenRecordOf.PREGEN_SET_OF_BOOLEAN_OPTIMIZED."" );
			if (index_value < 0) {
				throw new TtcnError( ""Accessing an element of type @PreGenRecordOf.PREGEN_SET_OF_BOOLEAN_OPTIMIZED using a negative index: ""+index_value+""."");
			}
			final int nofElements = n_elem().get_int();
			if ( index_value >= nofElements ) {
				throw new TtcnError( ""Index overflow in a value of type @PreGenRecordOf.PREGEN_SET_OF_BOOLEAN_OPTIMIZED: The index is ""+index_value+"", but the value has only ""+nofElements+"" elements."" );
			}

			final TitanBoolean elem = valueElements.get( index_value );
			return ( elem == null ) ? get_unbound_elem(): elem ;
		}"
6793253,none,"  @Nullable
  public final QualifiedName getQualifiedNameObject() {
    return isQualifiedName() ? new QualifiedName.NodeQname(this) : null;
  }"
7294422,none,"		public BorderFillLayout(int borderSize) {
			if (borderSize < 0)
				throw new IllegalArgumentException();
			fBorderSize = borderSize;
		}"
5202532,none,"        public RequestItem(final String requestString) {
            final List<String> reqComponents = Arrays.asList(requestString.split("":""));
            final int numComponents = reqComponents.size();
            if (numComponents < EXPECTED_REQUEST_COMPONENTS) {
                throw new IllegalArgumentException(String.format(""Cannot perform a FlowStatusQuery request for '%s'.  Expected at least %d components but got %d."",
                        requestString, EXPECTED_REQUEST_COMPONENTS, numComponents));
            }
            this.queryType = reqComponents.get(0).toLowerCase();
            if (numComponents == 2) {
                this.options = reqComponents.get(1);
            } else {
                this.identifier = reqComponents.get(1);
                this.options = reqComponents.get(2);
            }
            // normalize options
            this.options = this.options.toLowerCase();
        }"
8330187,none,"	public static boolean is14VMOrGreater() {
		return 1.4 <= vmVersion;
	}"
5275875,none,"    @Override
    public Object copy(Object paramObject) {
        return new HashSet((Collection) paramObject);
    }"
6721230,none,"  @Override
  public @Nullable Object dispatchOnEvent(EventHandler eventHandler, Object eventState) {
    if (ComponentsConfiguration.enableOnErrorHandling && eventHandler.id == ERROR_EVENT_HANDLER_ID) {
      ((Component) this).getErrorHandler().dispatchEvent(((ErrorEvent) eventState));
    }

    // Don't do anything by default, unless we're handling an error.
    return null;
  }"
6507301,none,"	public CordovaCLIResult version(final IProgressMonitor monitor) throws CoreException{
		final CordovaCLIStreamListener streamListener = new CordovaCLIStreamListener();
		IProcess process = startShell(streamListener, monitor, getLaunchConfiguration(""cordova -version""));
		String cordovaCommand = ""cordova -version\n"";
		sendCordovaCommand(process, cordovaCommand, monitor);
		CordovaCLIResult result = new CordovaCLIResult(streamListener.getMessage());
		return result;		
	}"
9242897,none,"    protected void baselineLayout(int targetSpan, int axis, int[] offsets, int[] spans) {
        int totalAscent = (int)(targetSpan * getAlignment(axis));
        int totalDescent = targetSpan - totalAscent;

        int n = getViewCount();

        for (int i = 0; i < n; i++) {
            View v = getView(i);
            float align = v.getAlignment(axis);
            float viewSpan;

            if (v.getResizeWeight(axis) > 0) {
                // if resizable then resize to the best fit

                // the smallest span possible
                float minSpan = v.getMinimumSpan(axis);
                // the largest span possible
                float maxSpan = v.getMaximumSpan(axis);

                if (align == 0.0f) {
                    // if the alignment is 0 then we need to fit into the descent
                    viewSpan = Math.max(Math.min(maxSpan, totalDescent), minSpan);
                } else if (align == 1.0f) {
                    // if the alignment is 1 then we need to fit into the ascent
                    viewSpan = Math.max(Math.min(maxSpan, totalAscent), minSpan);
                } else {
                    // figure out the span that we must fit into
                    float fitSpan = Math.min(totalAscent / align,
                                             totalDescent / (1.0f - align));
                    // fit into the calculated span
                    viewSpan = Math.max(Math.min(maxSpan, fitSpan), minSpan);
                }
            } else {
                // otherwise use the preferred spans
                viewSpan = v.getPreferredSpan(axis);
            }

            offsets[i] = totalAscent - (int)(viewSpan * align);
            spans[i] = (int)viewSpan;
        }
    }"
6829907,none,"    public final void rule__FunctionTypeExpressionOLD__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__FunctionTypeExpressionOLD__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
3742330,none,"    private static void makeAllColumnsPrimaryKeysIfNoPrimaryKeysFound(Table table) {
        if ((table != null) && (table.getPrimaryKeyColumns() != null) && (table.getPrimaryKeyColumns().length == 0)) {
            Column[] allCoumns = table.getColumns();

            for (Column column : allCoumns) {
                column.setPrimaryKey(true);
            }
        }
    }"
4413486,none,"    private void setupHeaders(BindingOperationInfo op,
                              BindingMessageInfo bMsg,
                              BindingMessageInfo unwrappedBMsg,
                              MessageInfo msg,
                              SoapBindingConfiguration config) {
        List<MessagePartInfo> parts = new ArrayList<>();
        for (MessagePartInfo part : msg.getMessageParts()) {
            if (config.isHeader(op, part)) {
                SoapHeaderInfo headerInfo = new SoapHeaderInfo();
                headerInfo.setPart(part);
                headerInfo.setUse(config.getUse());

                bMsg.addExtensor(headerInfo);
            } else {
                parts.add(part);
            }
        }
        unwrappedBMsg.setMessageParts(parts);
    }"
4950142,none,"	@Override /* BeanContextBuilder */
	public JsonSchemaGeneratorBuilder useInterfaceProxies(boolean value) {
		super.useInterfaceProxies(value);
		return this;
	}"
9142325,none,"	protected void okPressed( )
	{
		if ( canSelect )
		{
			setResult( selectedColumnName );
			if ( inputElement instanceof DataItemHandle )
			{
				try
				{
					( (DataItemHandle) inputElement ).setResultSetColumn( selectedColumnName );
				}
				catch ( SemanticException e )
				{
					ExceptionHandler.handle( e );
				}
			}
		}
		if( getSelectColumnHandle( ) != null && ExtendedDataModelUIAdapterHelper.isBoundToExtendedData( inputElement ) )
		{
			DataModelAdapterStatus status = DataModelAdapterUtil.validateRelativeTimePeriod( inputElement, getSelectColumnHandle( ));
			if( status.getStatus( ) == DataModelAdapterStatus.Status.FAIL )
			{
				MessageDialog.openError( UIUtil.getDefaultShell( ), null, status.getMessage( ) );
				return;
			}
		}
		super.okPressed( );
	}"
8574983,none,"  public static KeyValue createKeyValueFromKey(final ByteBuffer bb) {
    return createKeyValueFromKey(bb.array(), bb.arrayOffset(), bb.limit());
  }"
8602161,none,"    public deleteAll_result deepCopy() {
      return new deleteAll_result(this);
    }"
4106430,none,"	public int size()
	{
		return trajectory.size();
	}"
7730792,none,"    @Override
    public T get(Duration duration) throws InterruptedException, ExecutionException, TimeoutException {
        long start = System.currentTimeMillis();
        Long end  = duration==null ? null : start + duration.toMillisecondsRoundingUp();
        while (end==null || end > System.currentTimeMillis()) {
            if (cancelled) throw new CancellationException();
            if (internalFuture == null) {
                synchronized (this) {
                    long remaining = end - System.currentTimeMillis();
                    if (internalFuture==null && remaining>0)
                        wait(remaining);
                }
            }
            if (internalFuture != null) break;
        }
        Long remaining = end==null ? null : end -  System.currentTimeMillis();
        if (isDone()) {
            return internalFuture.get(1, TimeUnit.MILLISECONDS);
        } else if (remaining == null) {
            return internalFuture.get();
        } else if (remaining > 0) {
            return internalFuture.get(remaining, TimeUnit.MILLISECONDS);
        } else {
            throw new TimeoutException();
        }
    }"
9279084,none,"    private JPEGImageMetadataFormat() {
        super(JPEG.nativeImageMetadataFormatName,
              CHILD_POLICY_ALL);

        addElement(""JPEGvariety"",
                   JPEG.nativeImageMetadataFormatName,
                   CHILD_POLICY_CHOICE);

        addElement(""markerSequence"",
                   JPEG.nativeImageMetadataFormatName,
                   CHILD_POLICY_SEQUENCE);

        addElement(""app0JFIF"", ""JPEGvariety"", CHILD_POLICY_SOME);

        addStreamElements(""markerSequence"");

        addElement(""app14Adobe"", ""markerSequence"", CHILD_POLICY_EMPTY);

        addElement(""sof"", ""markerSequence"", 1, 4);

        addElement(""sos"", ""markerSequence"", 1, 4);

        addElement(""JFXX"", ""app0JFIF"", 1, Integer.MAX_VALUE);

        addElement(""app0JFXX"", ""JFXX"", CHILD_POLICY_CHOICE);

        addElement(""app2ICC"", ""app0JFIF"", CHILD_POLICY_EMPTY);

        addAttribute(""app0JFIF"",
                     ""majorVersion"",
                     DATATYPE_INTEGER,
                     false,
                     ""1"",
                     ""0"", ""255"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""minorVersion"",
                     DATATYPE_INTEGER,
                     false,
                     ""2"",
                     ""0"", ""255"",
                     true, true);
        List<String> resUnits = new ArrayList<>();
        resUnits.add(""0"");
        resUnits.add(""1"");
        resUnits.add(""2"");
        addAttribute(""app0JFIF"",
                     ""resUnits"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     resUnits);
        addAttribute(""app0JFIF"",
                     ""Xdensity"",
                     DATATYPE_INTEGER,
                     false,
                     ""1"",
                     ""1"", ""65535"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""Ydensity"",
                     DATATYPE_INTEGER,
                     false,
                     ""1"",
                     ""1"", ""65535"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""thumbWidth"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""255"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""thumbHeight"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""255"",
                     true, true);

        addElement(""JFIFthumbJPEG"", ""app0JFXX"", CHILD_POLICY_SOME);
        addElement(""JFIFthumbPalette"", ""app0JFXX"", CHILD_POLICY_EMPTY);
        addElement(""JFIFthumbRGB"", ""app0JFXX"", CHILD_POLICY_EMPTY);

        List<String> codes = new ArrayList<>();
        codes.add(""16""); // Hex 10
        codes.add(""17""); // Hex 11
        codes.add(""19""); // Hex 13
        addAttribute(""app0JFXX"",
                     ""extensionCode"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     codes);

        addChildElement(""markerSequence"", ""JFIFthumbJPEG"");

        addAttribute(""JFIFthumbPalette"",
                     ""thumbWidth"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""JFIFthumbPalette"",
                     ""thumbHeight"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);

        addAttribute(""JFIFthumbRGB"",
                     ""thumbWidth"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""JFIFthumbRGB"",
                     ""thumbHeight"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);

        addObjectValue(""app2ICC"", ICC_Profile.class, false, null);

        addAttribute(""app14Adobe"",
                     ""version"",
                     DATATYPE_INTEGER,
                     false,
                     ""100"",
                     ""100"", ""255"",
                     true, true);
        addAttribute(""app14Adobe"",
                     ""flags0"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""65535"",
                     true, true);
        addAttribute(""app14Adobe"",
                     ""flags1"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""65535"",
                     true, true);

        List<String> transforms = new ArrayList<>();
        transforms.add(""0"");
        transforms.add(""1"");
        transforms.add(""2"");
        addAttribute(""app14Adobe"",
                     ""transform"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     transforms);

        addElement(""componentSpec"", ""sof"", CHILD_POLICY_EMPTY);

        List<String> procs = new ArrayList<>();
        procs.add(""0"");
        procs.add(""1"");
        procs.add(""2"");
        addAttribute(""sof"",
                     ""process"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     procs);
        addAttribute(""sof"",
                     ""samplePrecision"",
                     DATATYPE_INTEGER,
                     false,
                     ""8"");
        addAttribute(""sof"",
                     ""numLines"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""65535"",
                     true, true);
        addAttribute(""sof"",
                     ""samplesPerLine"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""65535"",
                     true, true);
        List<String> comps = new ArrayList<>();
        comps.add(""1"");
        comps.add(""2"");
        comps.add(""3"");
        comps.add(""4"");
        addAttribute(""sof"",
                     ""numFrameComponents"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     comps);

        addAttribute(""componentSpec"",
                     ""componentId"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""componentSpec"",
                     ""HsamplingFactor"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""1"", ""255"",
                     true, true);
        addAttribute(""componentSpec"",
                     ""VsamplingFactor"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""1"", ""255"",
                     true, true);
        List<String> tabids = new ArrayList<>();
        tabids.add(""0"");
        tabids.add(""1"");
        tabids.add(""2"");
        tabids.add(""3"");
        addAttribute(""componentSpec"",
                     ""QtableSelector"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     tabids);

        addElement(""scanComponentSpec"", ""sos"", CHILD_POLICY_EMPTY);

        addAttribute(""sos"",
                     ""numScanComponents"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     comps);
        addAttribute(""sos"",
                     ""startSpectralSelection"",
                      DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""63"",
                     true, true);
        addAttribute(""sos"",
                     ""endSpectralSelection"",
                      DATATYPE_INTEGER,
                     false,
                     ""63"",
                     ""0"", ""63"",
                     true, true);
        addAttribute(""sos"",
                     ""approxHigh"",
                      DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""15"",
                     true, true);
        addAttribute(""sos"",
                     ""approxLow"",
                      DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""15"",
                     true, true);

        addAttribute(""scanComponentSpec"",
                     ""componentSelector"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""scanComponentSpec"",
                     ""dcHuffTable"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     tabids);
        addAttribute(""scanComponentSpec"",
                     ""acHuffTable"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     tabids);
    }"
7475455,none,"    @Override
    public void emitNullCheck(Value address, LIRFrameState state) {
        if (address.getValueKind().getPlatformKind() == AArch64Kind.DWORD) {
            CompressEncoding encoding = config.getOopEncoding();
            Value uncompressed = emitUncompress(address, encoding, false);
            append(new AArch64Move.NullCheckOp(asAddressValue(uncompressed), state));
        } else {
            super.emitNullCheck(address, state);
        }
    }"
6247819,none,"    public ActionCreatedEvent() {
        // for serialization libs like jackson
    }"
8501404,none,"    @Override
    public boolean start() {
        return true;
    }"
8574748,none,"  public static void concurrentVisitReferencedFiles(final Configuration conf, final FileSystem fs,
      final SnapshotManifest manifest, final String desc, final StoreFileVisitor visitor)
      throws IOException {

    final Path snapshotDir = manifest.getSnapshotDir();
    List<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();
    if (regionManifests == null || regionManifests.isEmpty()) {
      LOG.debug(""No manifest files present: "" + snapshotDir);
      return;
    }

    ExecutorService exec = SnapshotManifest.createExecutor(conf, desc);

    try {
      concurrentVisitReferencedFiles(conf, fs, manifest, exec, visitor);
    } finally {
      exec.shutdown();
    }
  }"
6536158,none,"    public SunZodiac getZodiac(Calendar calendar) {
        int year = calendar.get(Calendar.YEAR);
        List<SunZodiac> zodiacs = zodiacsByYear.get(year);
        if (zodiacs == null) {
            zodiacs = calculateZodiacs(year);
            zodiacsByYear.clear();
            zodiacsByYear.put(year, zodiacs);
        }

        for (SunZodiac zodiac : zodiacs) {
            if (zodiac.isValid(calendar)) {
                return zodiac;
            }
        }

        return null;
    }"
8574365,none,"      public mutateRows_call(java.nio.ByteBuffer tableName, java.util.List<BatchMutation> rowBatches, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableName = tableName;
        this.rowBatches = rowBatches;
        this.attributes = attributes;
      }"
9173266,none,"		public static ContentProvider newInstance( LegendData lgData )
				throws ChartException
		{
			LegendItemType itemType = lgData.lg.getItemType( );
			if ( itemType.getValue( ) == LegendItemType.CATEGORIES )
			{
				return new CategoryContentProvider( lgData );
			}
			else if ( itemType.getValue( ) == LegendItemType.SERIES )
			{
				return new ValueContentProvider( lgData );
			}
			else
			{
				throw new ChartException( ChartEnginePlugin.ID,
						ChartException.GENERATION,
						""exception.illegal.rendering.legend.itemtype"", //$NON-NLS-1$
						new Object[]{
							itemType
						},
						Messages.getResourceBundle( lgData.rtc.getULocale( ) ) );
			}

		}"
7399310,none,"    @Fallback
    TruffleObject doOther(@SuppressWarnings(""unused"") Object pointer) {
        if (allowNonForeign) {
            return null;
        } else {
            throw new LLVMPolyglotException(this, ""Pointer does not point to a polyglot value."");
        }
    }"
7198476,none,"    @Override
    public void setRegion(String regionId) {
        regionId = regionId.toLowerCase(Locale.ENGLISH);
        try {
            com.oracle.bmc.Region region = com.oracle.bmc.Region.fromRegionId(regionId);
            setRegion(region);
        } catch (IllegalArgumentException e) {
            LOG.info(""Unknown regionId '{}', falling back to default endpoint format"", regionId);
            String endpoint = com.oracle.bmc.Region.formatDefaultRegionEndpoint(SERVICE, regionId);
            setEndpoint(endpoint);
        }
    }"
3700134,none,"    public NamedThreadFactory(String name, boolean daemon){
        this.name = name;
        this.daemon = daemon;
        SecurityManager s = System.getSecurityManager();
        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
    }"
4171343,none,"    @Override
    public String getPresentationName() {
        return ""Create DataNode"";
    }"
6444284,none,"	protected boolean downloadLog(HttpServletRequest request,
			HttpServletResponse response, ILogService logService,
			String appenderName) throws ServletException {

		FileAppender<ILoggingEvent> appender = logService
				.getFileAppender(appenderName);
		if (appender == null) {
			String msg = NLS.bind(""Appender not found: {0}"", appenderName);
			final ServerStatus error = new ServerStatus(IStatus.ERROR,
					HttpServletResponse.SC_NOT_FOUND, msg, null);
			return statusHandler.handleRequest(request, response, error);
		}

		File logFile = new File(appender.getFile());
		try {
			LogUtils.provideLogFile(logFile, response);
		} catch (Exception ex) {
			String msg = NLS.bind(""An error occured when looking for log {0}."",
					logFile.getName());
			final ServerStatus error = new ServerStatus(IStatus.ERROR,
					HttpServletResponse.SC_INTERNAL_SERVER_ERROR, msg, ex);

			LogHelper.log(error);
			return statusHandler.handleRequest(request, response, error);
		}

		return true;
	}"
7255679,none,"    private void initPluginService(String pluginPath) {
        if (pluginPath.length() > 0) {
            try {
                ClassLoader pluginCL = new URLClassLoader(
                        pathToURLs(pluginPath),
                        JConsolePluginWrapper.class.getClassLoader());
                ServiceLoader<JConsolePlugin> plugins =
                        ServiceLoader.load(JConsolePlugin.class, pluginCL);
                // Validate all plugins
                for (JConsolePlugin p : plugins) {
                    LOGGER.finer(""JConsole plugin "" + p.getClass().getName() + "" loaded.""); // NOI18N
                }
                pluginService = plugins;
            } catch (ServiceConfigurationError e) {
                // Error occurs during initialization of plugin
                LOGGER.warning(""Fail to load JConsole plugin: "" + e.getMessage()); // NOI18N
                LOGGER.throwing(JConsolePluginWrapper.class.getName(), ""initPluginService"", e); // NOI18N
            } catch (MalformedURLException e) {
                LOGGER.warning(""Invalid JConsole plugin path: "" + e.getMessage()); // NOI18N
                LOGGER.throwing(JConsolePluginWrapper.class.getName(), ""initPluginService"", e); // NOI18N
            }
        }
        if (pluginService == null) {
            initEmptyPlugin();
        }
    }"
4273565,none,"    @Override
    public void init() throws FileSystemException {
        addCapabilities(caps);
    }"
5186909,none,"  public static String getMessageHash(JSONObject message, Collection<String> hashFields) {
    List<String> hashElements = hashFields.stream().map(errorField ->
            String.format(""%s-%s"", errorField, message.get(errorField))).collect(Collectors.toList());
    return DigestUtils.sha256Hex(String.join(""|"", hashElements).getBytes(UTF_8));
  }"
7585761,none,"  private File getPath(final LogicalPath logicalPath) {
    final Pom pom = pomManagementService.getPomFromModuleName(logicalPath.getModule());
    final File moduleRoot = getModuleRoot(logicalPath.getModule(), pom);
    final String pathRelativeToPom = logicalPath.getPathRelativeToPom(pom);
    return new File(moduleRoot, pathRelativeToPom);
  }"
5660411,none,"    @Override
    public CartesianCS createCartesianCS(final Map<String,?> properties,
            final CoordinateSystemAxis axis0,
            final CoordinateSystemAxis axis1,
            final CoordinateSystemAxis axis2) throws FactoryException
    {
        final DefaultCartesianCS cs;
        try {
            cs = new DefaultCartesianCS(complete(properties), axis0, axis1, axis2);
        } catch (IllegalArgumentException exception) {
            throw new InvalidGeodeticParameterException(exception);
        }
        return unique(""createCartesianCS"", cs);
    }"
6491821,none,"	public BufferedGroupingRDFHandler(RDFHandler... handlers) {
		this(DEFAULT_BUFFER_SIZE, handlers);
	}"
6623499,none,"    public List<HarPostDataParam> getParams() {
        return params;
    }"
4618565,none,"    public String getLabel() {
        return label;
    }"
8007508,none,"    public final EObject ruleScenario1() throws RecognitionException {
        EObject current = null;

        EObject this_Scenario1_0 = null;



        	enterRule();

        try {
            // InternalParametersTestLanguageEx.g:102:2: (this_Scenario1_0= superScenario1 )
            // InternalParametersTestLanguageEx.g:103:2: this_Scenario1_0= superScenario1
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getScenario1Access().getScenario1ParserRuleCall());
              	
            }
            pushFollow(FollowSets000.FOLLOW_2);
            this_Scenario1_0=superScenario1();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Scenario1_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
7710744,none,"    @Override
    public ByteBuf encodeHeader(ByteBufAllocator allocator) {
        ByteBuf buffer = allocator.buffer(31);

        // ttl:4
        buffer.writeInt((int) getTTL());

        // tracing:25
        CodecUtils.encodeTrace(getTracing(), buffer);

        // why~2
        CodecUtils.encodeString(getWhy(), buffer);

        return buffer;
    }"
9251958,none,"    public StringList getErrorCodes() {
        if (fErrors == null || fErrors.length == 0) {
            return StringListImpl.EMPTY_LIST;
        }
        return new PSVIErrorList(fErrors, true);
    }"
8437805,none,"    public String getUriAuthority() {
        return uriAuthority;
    }"
9396435,none,"    public void XRCompositeRectangles(XRSurfaceData dst, GrowableRectArray rects) {
        int srcPict = getCurrentSource().picture;

        for(int i=0; i < rects.getSize(); i++) {
            int x = rects.getX(i);
            int y = rects.getY(i);
            int width = rects.getWidth(i);
            int height = rects.getHeight(i);

            con.renderComposite(compRule, srcPict, XRUtils.None, dst.picture, x, y, 0, 0, x, y, width, height);
        }
    }"
6826288,none,"    private static void assertFinishedOnce(boolean[] finishedOut, SSLEngineResult result) {
        if (result.getHandshakeStatus() == HandshakeStatus.FINISHED) {
            assertFalse(""should only return FINISHED once"", finishedOut[0]);
            finishedOut[0] = true;
        }
    }"
9515902,none,"    InetSocketAddress getAddress() {
      return (InetSocketAddress)acceptChannel.socket().getLocalSocketAddress();
    }"
8604349,none,"        private void advance() {
            while (nextIdx < locParts.length()) {
                GridDhtLocalPartition part = locParts.get(nextIdx);

                if (part != null && part.state().active()) {
                    nextPart = part;
                    return;
                }

                nextIdx++;
            }
        }"
9517356,none,"  private void writeRawBytes(Writable writable) throws IOException {
    if (writable instanceof BytesWritable) {
      BytesWritable bw = (BytesWritable) writable;
      byte[] bytes = bw.getBytes();
      int length = bw.getLength();
      clientOut.writeInt(length);
      clientOut.write(bytes, 0, length);
    } else {
      bufferOut.reset();
      writable.write(bufferDataOut);
      byte[] bytes = bufferOut.toByteArray();
      clientOut.writeInt(bytes.length);
      clientOut.write(bytes);
    }
  }"
4218453,none,"    public Expression setUpper(Bound newUpper)
    {
        upper = newUpper == null ? null : new Bound(newUpper.value, newUpper.inclusive);
        return this;
    }"
8203593,none,"    public final boolean synpred9_PsiInternalSimpleBeeLangTestLanguage() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_PsiInternalSimpleBeeLangTestLanguage_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println(""impossible: ""+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }"
8331771,none,"  public static void m() {
    C c = new C();
    E1 e1 = new E1();
    E2 e2 = new E2();
    c.foo(e1,e2.getClass());
  }"
3859697,none,"    public synchronized void setDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
    }"
7492060,none,"	@Override
	public LinkRelation getItemResourceRel() {

		LinkRelation fallback = domainTypeMapping.getItemResourceRel();

		if (repositoryAnnotation != null) {
			String rel = repositoryAnnotation.itemResourceRel();
			return StringUtils.hasText(rel) ? LinkRelation.of(rel) : fallback;
		}

		return fallback;
	}"
3722097,none,"    private final int register_mime_types(F filter, String prefix) {
        final Iterator<String> i = filter.typesIterator();
        if (i == null) {
            return 0;
        }

        int num = 0;
        while (i.hasNext()) {
            String name = i.next();
            num++;
            String baseName = name;
            final int slashpos = name.indexOf('/');
            if (slashpos > 0) {
                baseName = name.substring(0, slashpos).intern();
            } else {
                name = name + ""/*"";
            }

            addFilter(mTypeToFilter, name, filter);

            if (slashpos > 0) {
                addFilter(mBaseTypeToFilter, baseName, filter);
            } else {
                addFilter(mWildTypeToFilter, baseName, filter);
            }
        }

        return num;
    }"
6600350,none,"    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mSpinner = (Spinner) view.findViewById(R.id.spinner);
        mResult = (TextView) view.findViewById(R.id.result);
        mSeekBar = (SeekBar) view.findViewById(R.id.seekBar);
        mRatingBar = (RatingBar) view.findViewById(R.id.ratingBar);
        mSwitchBtn = (Switch) view.findViewById(R.id.switchBtn);

        mSeekBar.setOnSeekBarChangeListener(this);
        mRatingBar.setOnRatingBarChangeListener(this);
        mSpinner.setOnItemSelectedListener(this);
        mSwitchBtn.setOnCheckedChangeListener(this);

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getContext(), android.R.layout.simple_spinner_item, data);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        mSpinner.setAdapter(adapter);
        mSpinner.setSelection(2);


    }"
7835135,none,"  @Override
  public Serializable getRoutingObject(EntryOperation opDetails) {
    Date date = (Date) opDetails.getKey();
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    int month = cal.get(Calendar.MONTH);
    // if(true){
    // return month;
    // }
    switch (month) {
      case 0:
        return ""January"";
      case 1:
        return ""February"";
      case 2:
        return ""March"";
      case 3:
        return ""April"";
      case 4:
        return ""May"";
      case 5:
        return ""June"";
      case 6:
        return ""July"";
      case 7:
        return ""August"";
      case 8:
        return ""September"";
      case 9:
        return ""October"";
      case 10:
        return ""November"";
      case 11:
        return ""December"";
      default:
        return null;
    }

  }"
8097613,none,"    public final void rule__Action__OperatorAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXtextGrammarTestLanguage.g:6076:1: ( ( ( rule__Action__OperatorAlternatives_2_2_0 ) ) )
            // InternalXtextGrammarTestLanguage.g:6077:2: ( ( rule__Action__OperatorAlternatives_2_2_0 ) )
            {
            // InternalXtextGrammarTestLanguage.g:6077:2: ( ( rule__Action__OperatorAlternatives_2_2_0 ) )
            // InternalXtextGrammarTestLanguage.g:6078:3: ( rule__Action__OperatorAlternatives_2_2_0 )
            {
             before(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0()); 
            // InternalXtextGrammarTestLanguage.g:6079:3: ( rule__Action__OperatorAlternatives_2_2_0 )
            // InternalXtextGrammarTestLanguage.g:6079:4: rule__Action__OperatorAlternatives_2_2_0
            {
            pushFollow(FOLLOW_2);
            rule__Action__OperatorAlternatives_2_2_0();

            state._fsp--;


            }

             after(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
8328444,none,"	void m54(C17 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
7542000,none,"	public static long run() {
		Foo f = null;
		f = (i) -> i*33;
		return f.m(3);
	}"
8455135,none,"    public GoraEndpoint(final String uri,
                        final GoraComponent goraComponent,
                        final GoraConfiguration config,
                        final DataStore<Object, Persistent> dataStore) {

        super(uri, goraComponent);
        this.configuration = config;
        this.dataStore = dataStore;
    }"
8543153,none,"    @Override
    public void execute() {
        CallContext.current().setEventDetails(""Virtual router element Id: "" + getEntityId());
        VirtualRouterProvider result = _service.get(0).getInternalLoadBalancerElement(getEntityId());
        if (result != null) {
            InternalLoadBalancerElementResponse response = _responseGenerator.createInternalLbElementResponse(result);
            response.setResponseName(getCommandName());
            this.setResponseObject(response);
        } else {
            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ""Failed to add Virtual Router entity to physical network"");
        }
    }"
4502504,none,"    private final boolean sameDevice(String udn, String urn)
    {
        String _udn = this.udn;
        String _urn = this.urn;
        if (_udn == null || _urn == null)
            return false; // not subscribed
        return _udn.equals(udn) && _urn.equals(urn);
    }"
5241829,none,"  @XmlElementWrapper(name = ""references"")
  @XmlElement(name = ""reference"")
  public List<ReferenceResource> getReferenceResources()
  {
    return referenceResources;
  }"
4493485,none,"	private static Function<EventMention, String> getPropertyGetter(final String propertyName) {
		return new Function<EventMention, String>() {
			@Override
			public String apply(EventMention eventMention) {
				EventProperties eventProperties = eventMention.getEvent().getProperties();
				Feature feature = eventProperties.getType().getFeatureByBaseName(propertyName);
				return eventProperties.getFeatureValueAsString(feature);
			}
		};
	}"
6329948,none,"    public void onKapuaEvent(ServiceEvent kapuaEvent) throws KapuaException {
        if (kapuaEvent == null) {
            //service bus error. Throw some exception?
        }

        LOG.info(""GroupService: received kapua event from {}, operation {}"", kapuaEvent.getService(), kapuaEvent.getOperation());
        if (""account"".equals(kapuaEvent.getService()) && ""delete"".equals(kapuaEvent.getOperation())) {
            deleteGroupByAccountId(kapuaEvent.getScopeId(), kapuaEvent.getEntityId());
        }
    }"
4032154,none,"    private QuantileBuffer<T> collapse(Iterable<QuantileBuffer<T>> buffers) {
      int newLevel = 0;
      long newWeight = 0;
      for (QuantileBuffer<T> buffer : buffers) {
        // As presented in the paper, there should always be at least two
        // buffers of the same (minimal) level to collapse, but it is possible
        // to violate this condition when combining buffers from independently
        // computed shards.  If they differ we take the max.
        newLevel = Math.max(newLevel, buffer.level + 1);
        newWeight += buffer.weight;
      }
      List<T> newElements = interpolate(buffers, bufferSize, newWeight, offset(newWeight));
      return new QuantileBuffer<>(newLevel, newWeight, newElements);
    }"
4445017,none,"    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSqlQuery()) {
        hash = (37 * hash) + SQL_QUERY_FIELD_NUMBER;
        hash = (53 * hash) + getSqlQuery().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }"
9158528,none,"	private void createImageMapContainer( int x, int y, int width, int height,
			IHyperlinkAction link )
	{
		ReportContent reportContent = (ReportContent) image.getReportContent( );
		IContainerContent mapContent = reportContent.createContainerContent( );
		mapContent.setHyperlinkAction( link );
		BlockContainerArea area = (BlockContainerArea) AreaFactory
				.createBlockContainer( mapContent );
		area.setPosition( x, y );
		area.setWidth( width );
		area.setHeight( height );
		root.addChild( area );
	}"
7700031,none,"    public void write(short[] shorts) {
        ensureBufferSize(shorts.length * SizeOf.USHORT);
        for (short s : shorts) {
            writeShort(s);
        }
        if (this.data.position() > this.dataBound) {
            this.dataBound = this.data.position();
        }
    }"
8970572,none,"  default BooleanConsumer andThen(BooleanConsumer after) {
    Objects.requireNonNull(after);
    return (boolean t) -> { accept(t); after.accept(t); };
  }"
6312967,none,"    public void setBluetoothLeService(BluetoothLeService bluetoothLeService) {
        this.bluetoothLeService = bluetoothLeService;
    }"
7671750,none,"	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);

		// // 
		// OpUIManager.getDefaultOutputParamList();
	}"
3819885,none,"    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITIONAL_WRITER:
        return getConditionalWriter();

      case UPDATES:
        return getUpdates();

      }
      throw new java.lang.IllegalStateException();
    }"
4457261,none,"  DirectScanPrel(RelOptCluster cluster, RelTraitSet traits,
                 GroupScan groupScan, RelDataType rowType) {
    super(cluster, traits);
    this.groupScan = groupScan;
    this.rowType = rowType;
  }"
4316776,none,"	public long update(long t)
	{
		counter = t;
		//		System.out.println(""counter updated to "" + this);
		initialized = true;
		return counter;
	}"
7540312,none,"	public String run() throws Exception {
		Method m = Class.class.getMethod(""getDeclaredMethods"");
		Method[] m2 = (Method[]) m.invoke(JLCGetDecMethods.class);
		//		Method m2 = (Method) m.invoke(JLCGetDecMethod.class, ""foo"", new Class[] { String.class, Integer.TYPE });
		return format(m2);
	}"
5025893,none,"  private
  void writeObject(ObjectOutputStream oos) throws java.io.IOException {
    // Aside from returning the current thread name the wgetThreadName
    // method sets the threadName variable.
    this.getThreadName();

    // This sets the renders the message in case it wasn't up to now.
    this.getRenderedMessage();

    // This call has a side effect of setting this.ndc and
    // setting ndcLookupRequired to false if not already false.
    this.getNDC();

    // This call has a side effect of setting this.mdcCopy and
    // setting mdcLookupRequired to false if not already false.
    this.getMDCCopy();

    // This sets the throwable sting representation of the event throwable.
    this.getThrowableStrRep();

    oos.defaultWriteObject();

    // serialize this event's level
    writeLevel(oos);
  }"
7375581,none,"	private LogLevel coerceLogLevel(String level) {
		String trimmedLevel = level.trim();
		if (""false"".equalsIgnoreCase(trimmedLevel)) {
			return LogLevel.OFF;
		}
		return LogLevel.valueOf(trimmedLevel.toUpperCase(Locale.ENGLISH));
	}"
5206791,none,"  @Override
  protected void encodeBadge(FacesContext facesContext, AbstractUICommand command) throws IOException {
    final AbstractUIButton button = (AbstractUIButton) command;

    for (final UIComponent child : button.getChildren()) {
      if (child instanceof AbstractUIBadge) {
        child.encodeAll(facesContext);
      }
    }
  }"
7030257,none,"  public SocketServer(NetworkConfig config, SSLConfig sslConfig, MetricRegistry registry, ArrayList<Port> portList) {
    this.host = config.hostName;
    this.port = config.port;
    this.numProcessorThreads = config.numIoThreads;
    this.maxQueuedRequests = config.queuedMaxRequests;
    this.sendBufferSize = config.socketSendBufferBytes;
    this.recvBufferSize = config.socketReceiveBufferBytes;
    this.maxRequestSize = config.socketRequestMaxBytes;
    processors = new ArrayList<Processor>(numProcessorThreads);
    requestResponseChannel = new SocketRequestResponseChannel(numProcessorThreads, maxQueuedRequests);
    metrics = new ServerNetworkMetrics(requestResponseChannel, registry, processors);
    this.acceptors = new ArrayList<Acceptor>();
    this.ports = new HashMap<PortType, Port>();
    this.validatePorts(portList);
    this.initializeSSLFactory(sslConfig);
  }"
7628568,none,"		@Override
		public boolean select(Viewer viewer, Object parentElement, Object element) {
			if (matcher==null) {
				return true;
			} else {
				String label = labelProvider.getText(element);
				if (match(label)) {
					return true;
				} else if (element instanceof Describable) {
					String description = ((Describable) element).getDescription();
					return match(description);
				}
				return false;
			}
		}"
8661979,none,"    @Override public void clear() {
        if (delegate == null)
            delegate = new ArrayList<>();
        else
            delegate.clear();
    }"
8443651,none,"    @Override
    protected void doStart() throws Exception {
        if (gson == null) {
            GsonBuilder builder = new GsonBuilder();
            if (exclusionStrategies != null && !exclusionStrategies.isEmpty()) {
                ExclusionStrategy[] strategies = exclusionStrategies.toArray(new ExclusionStrategy[exclusionStrategies.size()]);
                builder.setExclusionStrategies(strategies);
            }
            if (longSerializationPolicy != null) {
                builder.setLongSerializationPolicy(longSerializationPolicy);
            }
            if (fieldNamingPolicy != null) {
                builder.setFieldNamingPolicy(fieldNamingPolicy);
            }
            if (fieldNamingStrategy != null) {
                builder.setFieldNamingStrategy(fieldNamingStrategy);
            }
            if (serializeNulls) {
                builder.serializeNulls();
            }
            if (prettyPrint) {
                builder.setPrettyPrinting();
            }
            if (dateFormatPattern != null) {
                builder.setDateFormat(dateFormatPattern);
            }
            gson = builder.create();
        }
    }"
3851625,none,"  public int compareColumnQualifier(Text cq) {
    return WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0,
        cq.getLength());
  }"
5790828,none,"    private void handleHeaderFooter(Range[] ranges, String type, HWPFDocument document,
                                    PicturesSource pictures, PicturesTable pictureTable, XHTMLContentHandler xhtml)
            throws SAXException, IOException, TikaException {
        if (countParagraphs(ranges) > 0) {
            xhtml.startElement(""div"", ""class"", type);
            ListManager listManager = new ListManager(document);
            for (Range r : ranges) {
                if (r != null) {
                    for (int i = 0; i < r.numParagraphs(); i++) {
                        Paragraph p = r.getParagraph(i);

                        i += handleParagraph(p, 0, r, document,
                                FieldsDocumentPart.HEADER, pictures, pictureTable, listManager, xhtml);
                    }
                }
            }
            xhtml.endElement(""div"");
        }
    }"
9314457,none,"    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append(Constants.INDENT);
        sb.append(""kdf: 0x"");
        sb.append(Functions.toFullHexString(kdf));
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pSharedDataLen: "");
        sb.append(pSharedData.length);
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pSharedData: "");
        sb.append(Functions.toHexString(pSharedData));
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pPublicDataLen: "");
        sb.append(pPublicData.length);
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pPublicData: "");
        sb.append(Functions.toHexString(pPublicData));
        //buffer.append(Constants.NEWLINE);

        return sb.toString();
    }"
3735879,none,"    public void setDdlSchemaName(String ddlSchemaName) {
        this.ddlSchemaName = ddlSchemaName;
    }"
7706698,none,"    public RaveError(Class<?> clazz, String item, String errorMsg) {
        this.clazz = clazz;
        this.errorMsg = errorMsg;
        classElement = item;
    }"
7533998,none,"	public Object aggregate(Collection<Object> results) {
		for (Object o : results) {
			if (o instanceof MessagingException) {
				return new ConsolidatedResultsException(results);
			}
		}
		return results;
	}"
5870587,none,"    @Override
    public void run() {
      mTableViewer.getTree().selectAll();
      mTableViewer.setSelection(mTableViewer.getSelection());
    }"
4700005,none,"    public final HttpAsyncClientBuilder disableAutomaticRetries() {
        automaticRetriesDisabled = true;
        return this;
    }"
7759750,none,"  @Override
  public ParseSpec withTimestampSpec(TimestampSpec spec)
  {
    return new TimeAndDimsParseSpec(spec, getDimensionsSpec());
  }"
7787254,none,"	@Override
	public List<String> getSuffixes()
	{
		return Arrays.asList(""css"");
	}"
8430479,none,"    public String getType() {
        return type;
    }"
8978350,none,"  @Override
  public void close() throws IOException {
    boolean success = false;
    try {
      if (meta != null) {
        meta.writeInt(-1); // write EOF marker
        CodecUtil.writeFooter(meta); // write checksum
      }
      if (data != null) {
        CodecUtil.writeFooter(data); // write checksum
      }
      success = true;
    } finally {
      if (success) {
        IOUtils.close(data, meta);
      } else {
        IOUtils.closeWhileHandlingException(data, meta);
      }
      meta = data = null;
    }
  }"
7880496,none,"    public void write(org.apache.thrift.protocol.TProtocol oprot, AppendBuildSlaveEventsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }"
4356398,none,"    @Override
    ValueNode preprocess(int numTables,
								FromList outerFromList,
								SubqueryList outerSubqueryList,
								PredicateList outerPredicateList) 
					throws StandardException
	{
		/* Only preprocess this node once.  We may get called multiple times
		 * due to tree transformations.
		 */
		if (preprocessed)
		{
			return this;
		}
		preprocessed = true;

		boolean		flattenable;
		ValueNode	topNode = this;

        final boolean haveOrderBy; // need to remember for flattening decision

        // Push the order by list down to the ResultSet
        if (orderByList != null) {
            haveOrderBy = true;
            // If we have more than 1 ORDERBY columns, we may be able to
            // remove duplicate columns, e.g., ""ORDER BY 1, 1, 2"".
            if (orderByList.size() > 1)
            {
                orderByList.removeDupColumns();
            }

            resultSet.pushOrderByList(orderByList);
            orderByList = null;
        } else {
            haveOrderBy = false;
        }

        resultSet = resultSet.preprocess(numTables, null, (FromList) null);

        if (leftOperand != null)
        {
            leftOperand = leftOperand.preprocess(numTables,
                    outerFromList, outerSubqueryList, outerPredicateList);
        }

		// Eliminate any unnecessary DISTINCTs
		if (resultSet instanceof SelectNode)
		{
			if (((SelectNode) resultSet).hasDistinct())
			{
				((SelectNode) resultSet).clearDistinct();
				/* We need to remember to check for single unique value
				 * at execution time for expression subqueries.
				 */
				if  (subqueryType == EXPRESSION_SUBQUERY)
				{
					distinctExpression = true;
				}
			}
		}

		/* Lame transformation - For IN/ANY subqueries, if
		 * result set is guaranteed to return at most 1 row
		 * and it is not correlated
		 * then convert the subquery into the matching expression
		 * subquery type.  For example:
		 *	c1 in (select min(c1) from t2)
		 * becomes:
		 *	c1 = (select min(c1) from t2)
		 * (This actually showed up in an app that a potential customer
		 * was porting from SQL Server.)
		 * The transformed query can then be flattened if appropriate.
		 */
		if ((isIN() || isANY()) &&
			resultSet.returnsAtMostOneRow())
		{
			if (! hasCorrelatedCRs())
			{
				changeToCorrespondingExpressionType();
			}
		}

		/* NOTE: Flattening occurs before the pushing of
		 * the predicate, since the pushing will add a node 
		 * above the SubqueryNode.
		 */

		/* Values subquery is flattenable if:
		 *  o It is not under an OR.
         *  o It is not a subquery in a having clause (DERBY-3257)
		 *  o It is an expression subquery on the right side
		 *	  of a BinaryComparisonOperatorNode.
		 *  o Either a) it does not appear within a WHERE clause, or 
		 *           b) it appears within a WHERE clause but does not itself 
		 *              contain a WHERE clause with other subqueries in it. 
		 *          (DERBY-3301)
		 */
		flattenable = (resultSet instanceof RowResultSetNode) &&
					  underTopAndNode && !havingSubquery &&
                      !haveOrderBy &&
                      offset == null &&
                      fetchFirst == null &&
					  !isWhereExistsAnyInWithWhereSubquery() &&
                      parentComparisonOperator != null;

		if (flattenable)
		{
			/* If we got this far and we are an expression subquery
			 * then we want to set leftOperand to be the left side
			 * of the comparison in case we pull the comparison into
			 * the flattened subquery.
			 */
			leftOperand = parentComparisonOperator.getLeftOperand();
			// Flatten the subquery
			RowResultSetNode rrsn = (RowResultSetNode) resultSet;
            FromList fl = new FromList(getContextManager());

			// Remove ourselves from the outer subquery list
			outerSubqueryList.removeElement(this);

			/* We only need to add the table from the subquery into 
			 * the outer from list if the subquery itself contains
			 * another subquery.  Otherwise, it just becomes a constant.
			 */
			if (rrsn.subquerys.size() != 0)
			{
				fl.addElement(rrsn);
				outerFromList.destructiveAppend(fl);
			}

			/* Append the subquery's subquery list to the 
			 * outer subquery list.
			 */
			outerSubqueryList.destructiveAppend(rrsn.subquerys);

			/* return the new join condition 
			 * If we are flattening an EXISTS then there is no new join
			 * condition since there is no leftOperand.  Simply return
			 * TRUE.
			 *
			 * NOTE: The outer where clause, etc. has already been normalized,
			 * so we simply return the BinaryComparisonOperatorNode above
			 * the new join condition.
			 */
			return getNewJoinCondition(leftOperand, getRightOperand());
		}

		/* Select subquery is flattenable if:
		 *  o It is not under an OR.
		 *  o The subquery type is IN, ANY or EXISTS or
		 *    an expression subquery on the right side
		 *	  of a BinaryComparisonOperatorNode.
		 *  o There are no aggregates in the select list
		 *  o There is no group by clause or having clause.
		 *  o There is a uniqueness condition that ensures
		 *	  that the flattening of the subquery will not
		 *	  introduce duplicates into the result set.
         *  o The subquery is not part of a having clause (DERBY-3257)
		 *  o There are no windows defined on it
		 *
		 *	OR,
		 *  o The subquery is NOT EXISTS, NOT IN, ALL (beetle 5173).
		 *  o Either a) it does not appear within a WHERE clause, or 
		 *           b) it appears within a WHERE clause but does not itself 
		 *              contain a WHERE clause with other subqueries in it. 
		 *          (DERBY-3301)
		 */
		boolean flattenableNotExists = (isNOT_EXISTS() || canAllBeFlattened());

		flattenable = (resultSet instanceof SelectNode) &&
 			          !((SelectNode)resultSet).hasWindows() &&
                      !haveOrderBy &&
                      offset == null &&
                      fetchFirst == null &&
					  underTopAndNode && !havingSubquery &&
					  !isWhereExistsAnyInWithWhereSubquery() &&
					  (isIN() || isANY() || isEXISTS() || flattenableNotExists ||
                       parentComparisonOperator != null);

		if (flattenable)
		{
			SelectNode	select = (SelectNode) resultSet;
			if ((!select.hasAggregatesInSelectList()) &&
			    (select.havingClause == null))
			{
				ValueNode origLeftOperand = leftOperand;

				/* Check for uniqueness condition. */
				/* Is the column being returned by the subquery
				 * a candidate for an = condition?
				 */
				boolean additionalEQ =
							(subqueryType == IN_SUBQUERY) ||
							(subqueryType == EQ_ANY_SUBQUERY);


				additionalEQ = additionalEQ &&
								((leftOperand instanceof ConstantNode) ||
								 (leftOperand instanceof ColumnReference) ||
								 (leftOperand.requiresTypeFromContext()));
				/* If we got this far and we are an expression subquery
				 * then we want to set leftOperand to be the left side
				 * of the comparison in case we pull the comparison into
				 * the flattened subquery.
				 */
                if (parentComparisonOperator != null)
				{
					leftOperand = parentComparisonOperator.getLeftOperand();
				}
				/* Never flatten to normal join for NOT EXISTS.
				 */

				if ((! flattenableNotExists) && select.uniqueSubquery(additionalEQ))
				{
					// Flatten the subquery
					return flattenToNormalJoin(numTables,
										   outerFromList, outerSubqueryList,
										   outerPredicateList);
				}
				/* We can flatten into an EXISTS join if all of the above
				 * conditions except for a uniqueness condition are true
				 * and:
				 *	o Subquery only has a single entry in its from list
				 *	  and that entry is a FromBaseTable
				 *	o All predicates in the subquery's where clause are
				 *	  pushable.
				 *  o The leftOperand, if non-null, is pushable.
				 * If the subquery meets these conditions then we will flatten
				 * the FBT into an EXISTS FBT, pushd the subquery's
				 * predicates down to the PRN above the EBT and
				 * mark the predicates to say that they cannot be pulled 
				 * above the PRN. (The only way that we can guarantee correctness
				 * is if the predicates do not get pulled up.  If they get pulled
				 * up then the single next logic for an EXISTS join does not work
				 * because that row may get disqualified at a higher level.)
                 * DERBY-4001: Extra conditions to allow flattening to a NOT
                 * EXISTS join (in a NOT EXISTS join it does matter on which
                 * side of the join predicates/restrictions are applied):
                 *  o All the predicates must reference the FBT, otherwise
                 *    predicates meant for the right side of the join may be
                 *    applied to the left side of the join.
                 *  o The right operand (in ALL and NOT IN) must reference the
                 *    FBT, otherwise the generated join condition may be used
                 *    to restrict the left side of the join.
				 */
				else if ( (isIN() || isANY() || isEXISTS() || flattenableNotExists) &&
						  ((leftOperand == null) ? true :
							 leftOperand.categorize(new JBitSet(numTables), false)) &&
						  select.getWherePredicates().allPushable())
				{
                    FromBaseTable fbt =
                            singleFromBaseTable(select.getFromList());

                    if (fbt != null && (!flattenableNotExists ||
                         (select.getWherePredicates().allReference(fbt) &&
                          rightOperandFlattenableToNotExists(numTables, fbt))))
                    {
                        return flattenToExistsJoin(numTables,
                                outerFromList, outerSubqueryList,
                                outerPredicateList, flattenableNotExists);
                    }
				}

				// restore leftOperand to its original value
				leftOperand = origLeftOperand;
			}
		}

        resultSet.pushQueryExpressionSuffix();

        resultSet.pushOffsetFetchFirst( offset, fetchFirst, hasJDBClimitClause );

		/* We transform the leftOperand and the select list for quantified 
		 * predicates that have a leftOperand into a new predicate and push it
		 * down to the subquery after we preprocess the subquery's resultSet.
		 * We must do this after preprocessing the underlying subquery so that
		 * we know where to attach the new predicate.
		 * NOTE - If we pushed the predicate before preprocessing the underlying
		 * subquery, then the point of attachment would depend on the form of
		 * that subquery.  (Where clause?  Having clause?)
		 */
		if (leftOperand != null)
		{
			topNode = pushNewPredicate(numTables);
			pushedNewPredicate = true;
		}
        /* EXISTS and NOT EXISTS subqueries that haven't been flattened, need
         * an IS [NOT] NULL node on top so that they return a BOOLEAN. Other
         * cases are taken care of in pushNewPredicate.
		 */
        else if (isEXISTS() || isNOT_EXISTS())
		{
            topNode = genIsNullTree(isEXISTS());
			subqueryType = EXISTS_SUBQUERY;
		}

		/*
		** Do inVariant and correlated checks now.  We
		** aren't going to use the results here, but they
		** have been stashed away by isInvariant() and hasCorrelatedCRs()
		*/
		isInvariant();
		hasCorrelatedCRs();

		/* If parentComparisonOperator is non-null then we are an
		 * expression subquery that was considered to be a candidate 
		 * for flattening, but we didn't get flattened.  In that case
		 * we are the rightOperand of the parent.  We need to update
		 * the parent's rightOperand with the new topNode and return
		 * the parent because the parent is letting us decide whether
		 * or not to replace the entire comparison, which we can do
		 * if we flatten.  Otherwise we simply return the new top node.
		 */
		if (parentComparisonOperator != null)
		{
			parentComparisonOperator.setRightOperand(topNode);
			return parentComparisonOperator;
		}

		return topNode;
	}"
4062999,none,"    @Override
    @SuppressWarnings(""unchecked"")
    public void processElement(Object untypedElem) throws Exception {
      WindowedValue<T> elem = (WindowedValue<T>) untypedElem;

      Collection<W> windows =
          windowFn.assignWindows(
              windowFn.new AssignContext() {
                @Override
                public T element() {
                  return elem.getValue();
                }

                @Override
                public Instant timestamp() {
                  return elem.getTimestamp();
                }

                @Override
                public BoundedWindow window() {
                  return Iterables.getOnlyElement(elem.getWindows());
                }
              });

      WindowedValue<T> res =
          WindowedValue.of(elem.getValue(), elem.getTimestamp(), windows, elem.getPane());
      receiver.process(res);
    }"
8917324,none,"  @Override
  protected void initializeOp(Configuration hconf) throws HiveException {

    // If there is a sort-merge join followed by a regular join, the SMBJoinOperator may not
    // get initialized at all. Consider the following query:
    // A SMB B JOIN C
    // For the mapper processing C, The SMJ is not initialized, no need to close it either.
    initDone = true;

    super.initializeOp(hconf);

    closeCalled = false;

    this.firstFetchHappened = false;
    this.inputFileChanged = false;

    // get the largest table alias from order
    int maxAlias = 0;
    for (byte pos = 0; pos < order.length; pos++) {
      if (pos > maxAlias) {
        maxAlias = pos;
      }
    }
    maxAlias += 1;

    nextGroupStorage = new RowContainer[maxAlias];
    candidateStorage = new RowContainer[maxAlias];
    keyWritables = new ArrayList[maxAlias];
    nextKeyWritables = new ArrayList[maxAlias];
    fetchDone = new boolean[maxAlias];
    foundNextKeyGroup = new boolean[maxAlias];

    int bucketSize;

    // For backwards compatibility reasons we honor the older
    // HIVEMAPJOINBUCKETCACHESIZE if set different from default.
    // By hive 0.13 we should remove this code.
    int oldVar = HiveConf.getIntVar(hconf, HiveConf.ConfVars.HIVEMAPJOINBUCKETCACHESIZE);
    if (oldVar != 100) {
      bucketSize = oldVar;
    } else {
      bucketSize = HiveConf.getIntVar(hconf, HiveConf.ConfVars.HIVESMBJOINCACHEROWS);
    }

    for (byte pos = 0; pos < order.length; pos++) {
      RowContainer<List<Object>> rc = JoinUtil.getRowContainer(hconf,
          rowContainerStandardObjectInspectors[pos],
          pos, bucketSize,spillTableDesc, conf, !hasFilter(pos),
          reporter);
      nextGroupStorage[pos] = rc;
      RowContainer<List<Object>> candidateRC = JoinUtil.getRowContainer(hconf,
          rowContainerStandardObjectInspectors[pos],
          pos, bucketSize,spillTableDesc, conf, !hasFilter(pos),
          reporter);
      candidateStorage[pos] = candidateRC;
    }
    tagToAlias = conf.convertToArray(conf.getTagToAlias(), String.class);

    for (byte pos = 0; pos < order.length; pos++) {
      if (pos != posBigTable) {
        fetchDone[pos] = false;
      }
      foundNextKeyGroup[pos] = false;
    }
  }"
7522826,none,"	@Override
	protected YarnContainer performBuild() throws Exception {
		YarnContainerFactoryBean fb = new YarnContainerFactoryBean();
		fb.setContainerRef(ref);
		fb.setContainerClass(clazz);
		fb.afterPropertiesSet();
		YarnContainer container = fb.getObject();
		if (container instanceof AbstractYarnContainer) {
			((AbstractYarnContainer)container).setConfiguration(configuration);
		}
		return container;
	}"
4188990,none,"    public void setProcedureParams(String procedureParams) {
        this.procedureParams = procedureParams;
        if (procedureParams != null) {
            getCurrentPreference().put(PROCEDURE_PARAMS_PROPERTY, procedureParams);
        }
    }"
5107955,none,"    public List getPublishers() {
        return (_publisher == null) ? (_publisher = new ArrayList()) : _publisher;
    }"
5638052,none,"	public static ConfigurationInfo getAdjustOpdebuglineInfo()
	{
	    return new AdvancedConfigurationInfo()
	    {
		    public boolean isHidden()
		    {
			    return true;
		    }
	    };
	}"
7792356,none,"	@Override
	protected final Iterator<IModel<T>> getItemModels(long offset, long count)
	{
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
	}"
4383044,none,"    public JAXRSBinding(BindingInfo bindingInfo) {
        super();
        this.bindingInfo = bindingInfo;
    }"
4128743,none,"    @Override public boolean equals(Object obj) {
      return obj == this
          || obj instanceof Measure
          && this.agg.equals(((Measure) obj).agg)
          && this.args.equals(((Measure) obj).args)
          && this.distinct == ((Measure) obj).distinct;
    }"
4564618,none,"        @Override
        public Object clone() {
            AFPData obj = (AFPData) super.clone();
            obj.filled = this.filled;
            obj.imageUri = this.imageUri;
            return obj;
        }"
7424019,none,"        protected ZeroNullConversionOp(LIRInstructionClass<? extends ZeroNullConversionOp> type, AllocatableValue result, AllocatableValue input) {
            super(type);
            this.result = result;
            this.input = input;
        }"
4602475,none,"  @ThriftField
  public void setPartitionsToCompute(int partitionsToCompute) {
    this.partitionsToCompute = partitionsToCompute;
  }"
6537106,none,"    @Override
    public boolean supportsSensorType(SensorEnum sensorType) {
        if (sensorType != null) {
            return getSensorTypes().contains(sensorType);
        }
        return false;
    }"
8332859,none,"    public void showSourceLine(ISourceLocation sourceLocation, boolean highlight) {
    	try {
    		showSourceLine(sourceLocation.getSourceFile().getAbsolutePath(), sourceLocation.getLine(), highlight);
    	} catch (NullPointerException npe) {
    		Ajde.getDefault().getIdeUIAdapter().displayStatusInformation("" no corresponding source line to seek to"");
    	}
    }"
4302593,none,"    public synchronized void createPrincipal(String principal,
                                String password) throws KrbException {
        kadmin.addPrincipal(principal, password);
    }"
5601781,none,"    @Override
    public String getName()
    {
        return IASLanguageConstants.XMLList;
    }"
7410446,none,"	public void setInterestPolicy(InterestPolicy interestPolicy) {
		this.interestPolicy = interestPolicy;
	}"
5832184,none,"    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
            throws SQLException {
        if (null == pstmtPool) {
            throw new SQLException(""Statement pool is null - closed or invalid PoolingConnection."");
        }
        try {
            return pstmtPool.borrowObject(createKey(sql, resultSetType, resultSetConcurrency));
        } catch (final NoSuchElementException e) {
            throw new SQLException(""MaxOpenPreparedStatements limit reached"", e);
        } catch (final RuntimeException e) {
            throw e;
        } catch (final Exception e) {
            throw new SQLException(""Borrow prepareStatement from pool failed"", e);
        }
    }"
5093717,none,"  @Override
  public void clear() {
    Arrays.fill(this.state, 0, state.length - 1, FREE);
    distinct = 0;
    freeEntries = table.length; // delta
    trimToSize();
  }"
8754073,none,"  private Dest resolveAction(WebApp.HTTP method, Dest dest, String path) {
    if (dest.prefix.length() == 1) {
      return null;
    }
    checkState(!isGoodMatch(dest, path), dest.prefix);
    checkState(SLASH.countIn(path) > 1, path);
    List<String> parts = WebApp.parseRoute(path);
    String controller = parts.get(WebApp.R_CONTROLLER);
    String action = parts.get(WebApp.R_ACTION);
    return add(method, pjoin("""", controller, action), dest.controllerClass,
               action, null);
  }"
4135214,none,"      public boolean hasNext() {
        if (firstCall) {
          initializeMapping();
          firstCall = false;
        } else {
          computeNextMapping(iterationIdx.length - 1);
        }
        return nextMapping != null;
      }"
5959185,none,"    public void open(final boolean remove) {
        if (remove) {
            rolePermissionsMap.clear();
            unchecked = null;
            excluded = null;
        }
        state = OPEN;
    }"
9278801,none,"    public CharsetDecoder newDecoder() {
        return new Decoder(this, plane);
    }"
6244944,none,"    @Override
    public void get(
            final String tenantId,
            final String type,
            final String authId,
            final JsonObject clientContext,
            final Span span,
            final Handler<AsyncResult<CredentialsResult<JsonObject>>> resultHandler) {

        Objects.requireNonNull(tenantId);
        Objects.requireNonNull(type);
        Objects.requireNonNull(authId);
        Objects.requireNonNull(resultHandler);

        final JsonObject data = getSingleCredentials(tenantId, authId, type, clientContext, span);
        if (data == null) {
            resultHandler.handle(Future.succeededFuture(CredentialsResult.from(HttpURLConnection.HTTP_NOT_FOUND)));
        } else {
            resultHandler.handle(Future.succeededFuture(
                    CredentialsResult.from(HttpURLConnection.HTTP_OK, data.copy(), CacheDirective.noCacheDirective())));
        }
    }"
4465426,none,"    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }"
4574673,none,"    public void addChildLMs(List newLMs) {
        if (newLMs == null || newLMs.size() == 0) {
            return;
        }
        for (LayoutManager newLM : (Iterable<LayoutManager>) newLMs) {
            addChildLM(newLM);
        }
    }"
4582889,none,"        public void startElement(String uri, String localName, String qName, Attributes attributes)
                    throws SAXException {
            if (delegate != null) {
                delegateStack.push(qName);
                delegate.startElement(uri, localName, qName, attributes);
            } else if (domImplementation != null) {
                //domImplementation is set so we need to start a new DOM building sub-process
                TransformerHandler handler;
                try {
                    handler = tFactory.newTransformerHandler();
                } catch (TransformerConfigurationException e) {
                    throw new SAXException(""Error creating a new TransformerHandler"", e);
                }
                Document doc = domImplementation.createDocument(uri, qName, null);
                //It's easier to work with an empty document, so remove the root element
                doc.removeChild(doc.getDocumentElement());
                handler.setResult(new DOMResult(doc));
                Area parent = (Area)areaStack.peek();
                ((ForeignObject)parent).setDocument(doc);

                //activate delegate for nested foreign document
                domImplementation = null; //Not needed anymore now
                this.delegate = handler;
                delegateStack.push(qName);
                delegate.startDocument();
                delegate.startElement(uri, localName, qName, attributes);
            } else {
                boolean handled = true;
                if ("""".equals(uri)) {
                    if (localName.equals(""structureTree"")) {

                        /* The area tree parser no longer supports the structure tree. */
                        delegate = new DefaultHandler();

                        delegateStack.push(qName);
                        delegate.startDocument();
                        delegate.startElement(uri, localName, qName, attributes);
                    } else {
                        handled = startAreaTreeElement(localName, attributes);
                    }
                } else {
                    ContentHandlerFactoryRegistry registry
                            = userAgent.getContentHandlerFactoryRegistry();
                    ContentHandlerFactory factory = registry.getFactory(uri);
                    if (factory != null) {
                        delegate = factory.createContentHandler();
                        delegateStack.push(qName);
                        delegate.startDocument();
                        delegate.startElement(uri, localName, qName, attributes);
                    } else {
                        handled = false;
                    }
                }
                if (!handled) {
                    if (uri == null || uri.length() == 0) {
                        throw new SAXException(""Unhandled element "" + localName
                                + "" in namespace: "" + uri);
                    } else {
                        log.warn(""Unhandled element "" + localName
                                + "" in namespace: "" + uri);
                    }
                }
            }
        }"
8857529,none,"      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeString(struct.gatewayId);
        struct.applicationModule.write(oprot);
      }"
6627471,none,"	public int findWkid(String unit) {
		if (!wkidLookup.containsKey(unit)) {
			throw new IllegalArgumentException();
		}
		return wkidLookup.get(unit);
	}"
4654593,none,"	@Override
	public void write(DataOutputView out) throws IOException {
		out.writeInt(position);

		for (int i = 0; i < position; i++) {
			out.writeDouble(data[i]);
		}
	}"
6233999,none,"	@Override
	public boolean equals(Object other) {
		if (other instanceof Vector3D) {
			Vector3D o = (Vector3D) other;
			Point tmp = this.toPoint();
			if (tmp == null) {
				return o.toPoint() == null;
			}
			return tmp.equals(o.toPoint());
		}
		return false;
	}"
3843851,none,"  ResourceInstance createStackVersionResource(String stackName,
                                              String stackVersion) {
    Map<Resource.Type, String> mapIds = new HashMap<>();
    mapIds.put(Resource.Type.Stack, stackName);
    mapIds.put(Resource.Type.StackVersion, stackVersion);

    return createResource(Resource.Type.StackVersion, mapIds);
  }"
8956366,none,"    public WMDropPoolRequestTupleScheme getScheme() {
      return new WMDropPoolRequestTupleScheme();
    }"
5939437,none,"    public Object setProperty(final String key, final String value, final boolean isExternalProperty) {
        if (isExternalProperty) {
            System.setProperty(key, value);
        }
        return internalProperties.setProperty(key, value);
    }"
4137834,none,"    @Override public RelOptCost computeSelfCost(RelOptPlanner planner,
        RelMetadataQuery mq) {
      return super.computeSelfCost(planner, mq)
          .multiplyBy(JdbcConvention.COST_MULTIPLIER);
    }"
3926825,none,"    @Override
    public String toString() {
      return new StringBuilder(""v"").append(major).append(""."").append(minor).toString();
    }"
5678475,none,"    @Override
    public String execute(Job job) {
        String id = JobManagerImpl.buildId(job);
        Future<?> future = this.pool.submit(job);
        synchronized (taskMap) {
            taskMap.put(id, future);
            locations.put(id, job.buildResultLocation(id));
            return id;
        }
    }"
6923759,none,"  public static String joinLongs(long[] tokens, String delimiter) {
    if (tokens == null) return """";
    StringBuilder result = new StringBuilder();

    for (int i = 0; i < tokens.length; i++) {
      if (i > 0 && delimiter != null) {
        result.append(delimiter);
      }
      result.append(String.valueOf(tokens[i]));
    }
    return result.toString();
  }"
6632662,none,"  @Override
  public DataReference getOriginDataReference() {
    return baseRef;
  }"
7810274,none,"  protected void sendMessage(Connection cnx) throws Exception {
    if (cnx.getServer().getRequiresCredentials()) {
      // Security is enabled on client as well as on server
      getMessage().setMessageHasSecurePartFlag();
      long userId = -1;

      if (UserAttributes.userAttributes.get() == null) { // single user mode
        userId = cnx.getServer().getUserId();
      } else { // multi user mode
        Object id = UserAttributes.userAttributes.get().getServerToId().get(cnx.getServer());
        if (id == null) {
          // This will ensure that this op is retried on another server, unless
          // the retryCount is exhausted. Fix for Bug 41501
          throw new ServerConnectivityException(""Connection error while authenticating user"");
        }
        userId = (Long) id;
      }
      HeapDataOutputStream hdos = new HeapDataOutputStream(Version.CURRENT);
      try {
        hdos.writeLong(cnx.getConnectionID());
        hdos.writeLong(userId);
        getMessage().setSecurePart(((ConnectionImpl) cnx).encryptBytes(hdos.toByteArray()));
      } finally {
        hdos.close();
      }
    }
    getMessage().send(false);
  }"
5321469,none,"    public int peekUnsignedByte(int offset) throws IOException
    {
        int b = peek(offset);
        if (b < 0)
        {
            throw new EOFException();
        }
        return b;
    }"
4218038,none,"        @Override
        public Terminal bind(QueryOptions options) throws InvalidRequestException
        {
            Term term = options.getJsonColumnValue(marker.bindIndex, column.name, marker.columns);
            return term == null
                 ? (defaultUnset ? Constants.UNSET_VALUE : null)
                 : term.bind(options);
        }"
6016685,none,"    @JsonCreator
    public static TlsConfiguration from(String s) {
        switch (s.toLowerCase()) {
            case ""none"":
                return NONE;
            case ""simple"":
                return SIMPLE;
            case ""external"":
                return EXTERNAL;
            default:
                throw new IllegalArgumentException(String.format(""Unknown TLS Configuration type: %s"", s));
        }
    }"
6577272,none,"    public final EObject entryRuleXMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXMultiplicativeExpression = null;


        try {
            // InternalEntities.g:1696:66: (iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF )
            // InternalEntities.g:1697:2: iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
7625090,none,"	public boolean isTeamPrivateMember() {
		return false;
	}"
5124033,none,"  protected static void handleIOException(IOException e, String context)
    throws ManifoldCFException, ServiceInterruption
  {
    if (e instanceof java.net.SocketException)
      throw new ManifoldCFException(""Socket timeout error ""+context+"": ""+e.getMessage(),e);
    else if (e instanceof ConnectTimeoutException)
      throw new ManifoldCFException(""Socket connect timeout error ""+context+"": ""+e.getMessage(),e);
    else if (e instanceof InterruptedIOException)
      throw new ManifoldCFException(""Interrupted: ""+e.getMessage(),e,ManifoldCFException.INTERRUPTED);
    else
      throw new ManifoldCFException(""IO error ""+context+"": ""+e.getMessage(),e);
  }"
4098093,none,"    @Override
    public void close() throws HyracksDataException {
        Throwable failure = releaseResources();
        failure = CleanupUtils.close(writer, failure);
        if (failure != null) {
            throw HyracksDataException.create(failure);
        }
    }"
4504481,none,"  @Override
  public void childEvent(CuratorFramework curatorFramework, PathChildrenCacheEvent event)
      throws Exception {

    try {
      if (isConnected() && (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)
          || event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)
          || event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))) {
        synchronized (this) {
          Participant participant = leaderLatch.getLeader();
          if (isLeader(participant) && !leaderLatch.hasLeadership()) {
            // in case current instance becomes leader, we want to know who came before it.
            currentLeader = participant;
          }
        }
      }
    } catch (InterruptedException e) {
      log.warn(""Oracle leadership watcher has been interrupted unexpectedly"");
    }
  }"
4656234,none,"	@Override
	public String toString() {
		return String.format(""cores=%d, physMem=%d, heap=%d, managed=%d"", 
				numberOfCPUCores, sizeOfPhysicalMemory, sizeOfJvmHeap, sizeOfManagedMemory);
	}"
6695177,none,"    public APIRequestGetAssignedAdAccounts requestAgeField (boolean value) {
      this.requestField(""age"", value);
      return this;
    }"
6921833,none,"  public void setCommentCount(Integer commentCount) {
    if (commentCount != null) {
      setExtension(new GphotoCommentCount(commentCount));
    } else {
      removeExtension(GphotoCommentCount.class);
    }
  }"
7031904,none,"    @Deprecated
    public AmazonS3EncryptionClient(AWSCredentials credentials,
            EncryptionMaterialsProvider encryptionMaterialsProvider) {
        this(credentials, encryptionMaterialsProvider,
                configFactory.getConfig(), new CryptoConfiguration());
    }"
6937904,none,"      public java.lang.String getLanguage() {
        java.lang.Object ref = language_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            language_ = s;
          }
          return s;
        }
      }"
4512609,none,"    public void addBundleListener(BundleListener l)
    {
        checkValidity();

        // CONCURRENCY NOTE: This is a check-then-act situation, but
        // internally the event dispatcher double checks whether or not
        // the bundle context is valid before adding the service listener
        // while holding the event queue lock, so it will either succeed
        // or fail.

        Object sm = System.getSecurityManager();

        if (sm != null)
        {
            if (l instanceof SynchronousBundleListener)
            {
                ((SecurityManager) sm).checkPermission(new AdminPermission(m_bundle,
                    AdminPermission.LISTENER));
            }
        }

        m_felix.addBundleListener(m_bundle, l);
    }"
7604836,none,"	private void onFilter(ExpandableSection expandable, CheckBoxesSection<Dependency> checkboxesSection, String cat) {
		Filter<Dependency> filter = this.filter.getValue();
		checkboxesSection.applyFilter(filter);
		boolean isTrivialFilter = filter==null || filter.isTrivial();
		if (checkboxesSection.isCreated()) {
			boolean hasVisible = checkboxesSection.hasVisible();
			expandable.setVisible(hasVisible);
			if (hasVisible) {
				expandable.getExpansionState().setValue(!isTrivialFilter);
			}
		}
		layout();
	}"
8102140,none,"    public final void rule__Disjunction__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXtext.g:5342:1: ( rule__Disjunction__Group_1__0__Impl rule__Disjunction__Group_1__1 )
            // InternalXtext.g:5343:2: rule__Disjunction__Group_1__0__Impl rule__Disjunction__Group_1__1
            {
            pushFollow(FollowSets000.FOLLOW_26);
            rule__Disjunction__Group_1__0__Impl();

            state._fsp--;

            pushFollow(FollowSets000.FOLLOW_2);
            rule__Disjunction__Group_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
3724040,none,"    public static String getCauseMessage(Throwable t) {
        if (null != t.getCause()) {
            return getCauseMessage(t.getCause());
        }
        return t.getMessage();
    }"
4038193,none,"  public static <T> void structuralValueDecodeEncodeEqualInContext(
      Coder<T> coder, Coder.Context context, T value) throws Exception {
    assertEquals(
        coder.structuralValue(value), coder.structuralValue(decodeEncode(coder, context, value)));
  }"
4435454,none,"    @Override
    public FSDataInputStream open(Path f, int bufferSize) throws IOException {
        return localFS.open(toLocalPath(f), bufferSize);
    }"
4433943,none,"    public static Set<String> getAllColos() {
        if (DeploymentUtil.isEmbeddedMode()) {
            return DeploymentUtil.getDefaultColos();
        }
        String[] colos = RuntimeProperties.get().getProperty(""all.colos"", DeploymentUtil.getDefaultColo()).split("","");
        for (int i = 0; i < colos.length; i++) {
            colos[i] = colos[i].trim();
        }
        return new HashSet<String>(Arrays.asList(colos));
    }"
6329210,none,"    public void updated(Map<String, Object> properties) {
        logger.debug(""Updating Cloud Publisher..."");

        doUpdate(properties);

        logger.debug(""Updating Cloud Publisher... Done"");
    }"
3828619,none,"   @Override
   public boolean addAddressInfo(AddressInfo addressInfo) throws Exception {
      boolean added = reloadAddressInfo(addressInfo);
      if (added && storageManager != null) {
         long txID = storageManager.generateID();
         try {
            storageManager.addAddressBinding(txID, addressInfo);
            storageManager.commitBindings(txID);
         } catch (Exception e) {
            try {
               storageManager.rollbackBindings(txID);
            } catch (Exception ignored) {
            }
            throw e;
         }
      }
      return added;
   }"
7034516,none,"  private ServerErrorCode controlBlobStore(DataNodeId dataNodeId, PartitionId partitionId,
      short numReplicasCaughtUpPerPartition, boolean enable) throws IOException, TimeoutException {
    AdminRequest adminRequest =
        new AdminRequest(AdminRequestOrResponseType.BlobStoreControl, partitionId, correlationId.incrementAndGet(),
            CLIENT_ID);
    BlobStoreControlAdminRequest controlRequest =
        new BlobStoreControlAdminRequest(numReplicasCaughtUpPerPartition, enable, adminRequest);
    ByteBuffer responseBytes = sendRequestGetResponse(dataNodeId, controlRequest);
    AdminResponse adminResponse = AdminResponse.readFrom(new DataInputStream(new ByteBufferInputStream(responseBytes)));
    return adminResponse.getError();
  }"
6016779,none,"    PackageState(String value) {
        this.value = value;
    }"
4553880,none,"    boolean isSQLDateAndTimeTimeZoneSameAsNormal() {
        if (cachedSQLDateAndTimeTimeZoneSameAsNormal == null) {
            cachedSQLDateAndTimeTimeZoneSameAsNormal = Boolean.valueOf(
                    getSQLDateAndTimeTimeZone() == null
                            || getSQLDateAndTimeTimeZone().equals(getTimeZone()));
        }
        return cachedSQLDateAndTimeTimeZoneSameAsNormal.booleanValue();
    }"
3873345,none,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    LinkAttributeFilter that = (LinkAttributeFilter) o;
    return isVisible() == that.isVisible() && Objects.equals(linkAttribute, that.linkAttribute);
  }"
8951087,none,"  @Override
  public boolean isNull(int keyIndex) {
    if (keyIndex == 0) {
      return isNull0;
    } else if (keyIndex == 1) {
      return isNull1;
    } else {
      throw new ArrayIndexOutOfBoundsException();
    }
  }"
9312894,none,"    private ConfigurationInfo(CompositeData cd) {
        this.settings = createMap(cd.get(""settings""));
        this.name = (String) cd.get(""name"");
        this.label = (String) cd.get(""label"");
        this.description = (String) cd.get(""description"");
        this.provider = (String) cd.get(""provider"");
        this.contents = (String) cd.get(""contents"");
    }"
8937277,none,"  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Byte)value);
      }
      break;

    }
  }"
6905888,none,"    void setStackMap(StackMapTable_attribute attr) {
        if (attr == null) {
            map = null;
            return;
        }

        Method m = classWriter.getMethod();
        Descriptor d = m.descriptor;
        String[] args;
        try {
            ConstantPool cp = classWriter.getClassFile().constant_pool;
            String argString = d.getParameterTypes(cp);
            args = argString.substring(1, argString.length() - 1).split(""[, ]+"");
        } catch (ConstantPoolException | InvalidDescriptor e) {
            return;
        }
        boolean isStatic = m.access_flags.is(AccessFlags.ACC_STATIC);

        verification_type_info[] initialLocals = new verification_type_info[(isStatic ? 0 : 1) + args.length];
        if (!isStatic)
            initialLocals[0] = new CustomVerificationTypeInfo(""this"");
        for (int i = 0; i < args.length; i++) {
            initialLocals[(isStatic ? 0 : 1) + i] =
                    new CustomVerificationTypeInfo(args[i].replace(""."", ""/""));
        }

        map = new HashMap<>();
        StackMapBuilder builder = new StackMapBuilder();

        // using -1 as the pc for the initial frame effectively compensates for
        // the difference in behavior for the first stack map frame (where the
        // pc offset is just offset_delta) compared to subsequent frames (where
        // the pc offset is always offset_delta+1).
        int pc = -1;

        map.put(pc, new StackMap(initialLocals, empty));

        for (int i = 0; i < attr.entries.length; i++)
            pc = attr.entries[i].accept(builder, pc);
    }"
8495850,none,"    @Override
    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException,
        ResourceAllocationException, NetworkRuleConflictException {

        Map<String, String> dm = new HashMap();

        dm.put(ApiConstants.S3_ACCESS_KEY, getAccessKey());
        dm.put(ApiConstants.S3_SECRET_KEY, getSecretKey());
        dm.put(ApiConstants.S3_END_POINT, getEndPoint());
        dm.put(ApiConstants.S3_BUCKET_NAME, getBucketName());

        if (getSigner() != null && (getSigner().equals(ApiConstants.S3_V3_SIGNER) || getSigner().equals(ApiConstants.S3_V4_SIGNER))) {
            dm.put(ApiConstants.S3_SIGNER, getSigner());
        }
        if (isHttps() != null) {
            dm.put(ApiConstants.S3_HTTPS_FLAG, isHttps().toString());
        }
        if (getConnectionTimeout() != null) {
            dm.put(ApiConstants.S3_CONNECTION_TIMEOUT, getConnectionTimeout().toString());
        }
        if (getMaxErrorRetry() != null) {
            dm.put(ApiConstants.S3_MAX_ERROR_RETRY, getMaxErrorRetry().toString());
        }
        if (getSocketTimeout() != null) {
            dm.put(ApiConstants.S3_SOCKET_TIMEOUT, getSocketTimeout().toString());
        }
        if (getConnectionTtl() != null) {
            dm.put(ApiConstants.S3_CONNECTION_TTL, getConnectionTtl().toString());
        }
        if (getUseTCPKeepAlive() != null) {
            dm.put(ApiConstants.S3_USE_TCP_KEEPALIVE, getUseTCPKeepAlive().toString());
        }

        try{
            ImageStore result = _storageService.discoverImageStore(null, null, ""S3"", null, dm);
            ImageStoreResponse storeResponse;
            if (result != null) {
                storeResponse = _responseGenerator.createImageStoreResponse(result);
                storeResponse.setResponseName(getCommandName());
                storeResponse.setObjectName(""imagestore"");
                setResponseObject(storeResponse);
            } else {
                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ""Failed to add S3 Image Store."");
            }
        } catch (DiscoveryException ex) {
            s_logger.warn(""Exception: "", ex);
            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());
        }
    }"
8925039,none,"  @Override
  public void configureInputJobProperties(TableDesc tableDesc,
                      Map<String, String> jobProperties) {

    try {
      Map<String, String> tableProperties = tableDesc.getJobProperties();

      String jobInfoProperty = tableProperties.get(HCatConstants.HCAT_KEY_JOB_INFO);
      if (jobInfoProperty != null) {

        LinkedList<InputJobInfo> inputJobInfos = (LinkedList<InputJobInfo>) HCatUtil.deserialize(
                jobInfoProperty);
        if (inputJobInfos == null || inputJobInfos.isEmpty()) {
          throw new IOException(""No InputJobInfo was set in job config"");
        }
        InputJobInfo inputJobInfo = inputJobInfos.getLast();

        HCatTableInfo tableInfo = inputJobInfo.getTableInfo();
        HCatSchema dataColumns = tableInfo.getDataColumns();
        List<HCatFieldSchema> dataFields = dataColumns.getFields();
        StringBuilder columnNamesSb = new StringBuilder();
        StringBuilder typeNamesSb = new StringBuilder();
        for (HCatFieldSchema dataField : dataFields) {
        if (columnNamesSb.length() > 0) {
            columnNamesSb.append("","");
            typeNamesSb.append("":"");
          }
          columnNamesSb.append(dataField.getName());
          typeNamesSb.append(dataField.getTypeString());
        }
        jobProperties.put(IOConstants.SCHEMA_EVOLUTION_COLUMNS, columnNamesSb.toString());
        jobProperties.put(IOConstants.SCHEMA_EVOLUTION_COLUMNS_TYPES, typeNamesSb.toString());

        boolean isTransactionalTable = AcidUtils.isTablePropertyTransactional(tableProperties);
        AcidUtils.AcidOperationalProperties acidOperationalProperties =
                AcidUtils.getAcidOperationalProperties(tableProperties);
        AcidUtils.setAcidOperationalProperties(
            jobProperties, isTransactionalTable, acidOperationalProperties);
      }
    } catch (IOException e) {
      throw new IllegalStateException(""Failed to set output path"", e);
    }

  }"
8382642,none,"    private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {
        if (hasCommandlineArgs()) {
            arguments = parseCommandlineArgs();
        }

        try {
            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator();
            while (iter.hasNext()) {
                Artifact classPathElement = iter.next();

                // we must skip org.osgi.core, otherwise we get a
                // java.lang.NoClassDefFoundError: org.osgi.vendor.framework property not set
                if (classPathElement.getArtifactId().equals(""org.osgi.core"")) {
                    if (getLog().isDebugEnabled()) {
                        getLog().debug(""Skipping org.osgi.core -> "" + classPathElement.getGroupId() + ""/"" + classPathElement.getArtifactId() + ""/"" + classPathElement.getVersion());
                    }
                    continue;
                }

                getLog().debug(""Adding plugin dependency artifact: "" + classPathElement.getArtifactId()
                                   + "" to classpath"");
                path.add(classPathElement.getFile().toURI().toURL());
            }
        } catch (MalformedURLException e) {
            throw new MojoExecutionException(""Error during setting up classpath"", e);
        }

    }"
3919373,none,"    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }"
7599926,none,"	static JwtHeader create(Signer signer, Map<String, String> params) {
		Map<String, String> map = new LinkedHashMap<String, String>(params);
		map.put(""alg"", sigAlg(signer.algorithm()));
		HeaderParameters p = new HeaderParameters(map);
		return new JwtHeader(serializeParams(p), p);
	}"
5328591,none,"    @Override
    public Map<String, FlowFileEvent> getReportEntries() {
        return Collections.unmodifiableMap(entries);
    }"
8894479,none,"  public SQLUniqueConstraint deepCopy() {
    return new SQLUniqueConstraint(this);
  }"
6835472,none,"	@Override
	public Optional<URI> getProjectDescriptionLocation() {
		if (checkExists() // Existing project AND
				&& ((getLocation().isPlatformResource()
						// Platform resource URI
						&& URIUtils.isPlatformResourceUriPointingToProject(getLocation()))
						|| isExternal())) { // OR external
			return fromNullable(getLocation().appendSegment(IN4JSProject.PACKAGE_JSON));
		} else {
			return absent();
		}
	}"
4413679,none,"        public void onClose(CachedOutputStream cos) {
            // bytes were already copied after flush
            try {
                byte[] bytes = cos.getBytes();
                synchronized (outbound) {
                    outbound.add(bytes);
                }
            } catch (Exception e) {
                LOG.fine(""Can't record message from output stream class: ""
                         + cos.getOut().getClass().getName());
            }
        }"
5615923,none,"  private static String normalizePath(String path) {
    // count the number of '/'s, to determine number of segments
    int index = -1;
    int pathlen = path.length();
    int size = 0;
    if (pathlen > 0 && path.charAt(0) != '/') {
      size++;
    }
    while ((index = path.indexOf('/', index + 1)) != -1) {
      if (index + 1 < pathlen && path.charAt(index + 1) != '/') {
        size++;
      }
    }

    String[] seglist = new String[size];
    boolean[] include = new boolean[size];

    // break the path into segments and store in the list
    int current = 0;
    int index2 = 0;
    index = (pathlen > 0 && path.charAt(0) == '/') ? 1 : 0;
    while ((index2 = path.indexOf('/', index + 1)) != -1) {
      seglist[current++] = path.substring(index, index2);
      index = index2 + 1;
    }

    // if current==size, then the last character was a slash
    // and there are no more segments
    if (current < size) {
      seglist[current] = path.substring(index);
    }

    // determine which segments get included in the normalized path
    for (int i = 0; i < size; i++) {
      include[i] = true;
      if (seglist[i].equals("".."")) { //$NON-NLS-1$
        int remove = i - 1;
        // search back to find a segment to remove, if possible
        while (remove > -1 && !include[remove]) {
          remove--;
        }
        // if we find a segment to remove, remove it and the ""..""
        // segment
        if (remove > -1 && !seglist[remove].equals("".."")) { //$NON-NLS-1$
          include[remove] = false;
          include[i] = false;
        }
      } else if (seglist[i].equals(""."")) { //$NON-NLS-1$
        include[i] = false;
      }
    }

    // put the path back together
    StringBuilder newpath = new StringBuilder();
    if (path.startsWith(""/"")) { //$NON-NLS-1$
      newpath.append('/');
    }

    for (int i = 0; i < seglist.length; i++) {
      if (include[i]) {
        newpath.append(seglist[i]);
        newpath.append('/');
      }
    }

    // if we used at least one segment and the path previously ended with
    // a slash and the last segment is still used, then delete the extra
    // trailing '/'
    if (!path.endsWith(""/"") && seglist.length > 0 //$NON-NLS-1$
        && include[seglist.length - 1]) {
      newpath.deleteCharAt(newpath.length() - 1);
    }

    String result = newpath.toString();

    // check for a ':' in the first segment if one exists,
    // prepend ""./"" to normalize
    index = result.indexOf(':');
    index2 = result.indexOf('/');
    if (index != -1 && (index < index2 || index2 == -1)) {
      newpath.insert(0, ""./""); //$NON-NLS-1$
      result = newpath.toString();
    }
    return result;
  }"
3919083,none,"    @Override
    public <R> Promise<R> put(Entity<?> entity, Class<R> aClass) {
        return method(HttpMethod.PUT, entity, aClass);
    }"
7222257,none,"		@Override
		public void onSubscribe(Subscription s) {
			if (Operators.validate(this.s, s)) {
				this.s = s;

				actual.onSubscribe(this);

				s.request(Long.MAX_VALUE);
			}
		}"
7628757,none,"	private void formatElement(IProgressMonitor monitor) {
		FormatProcessorXML formatProcessor = new FormatProcessorXML();
		formatProcessor.setProgressMonitor(monitor);
		formatProcessor.getFormatPreferences().setClearAllBlankLines(true);
		formatProcessor.formatModel(model);

		CleanupProcessorXML bla = new CleanupProcessorXML();
		bla.getCleanupPreferences().setCompressEmptyElementTags(true);
		bla.cleanupModel(model);
	}"
3800392,none,"  @Override
  public void init(ExtractorOutput output) {
    extractorOutput = output;
    trackOutput = output.track(0, C.TRACK_TYPE_AUDIO);
    wavHeader = null;
    output.endTracks();
  }"
8102677,none,"    public final void rule__GeneratedMetamodel__EPackageAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXtext.g:8603:1: ( ( ( RULE_STRING ) ) )
            // InternalXtext.g:8604:2: ( ( RULE_STRING ) )
            {
            // InternalXtext.g:8604:2: ( ( RULE_STRING ) )
            // InternalXtext.g:8605:3: ( RULE_STRING )
            {
             before(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0()); 
            // InternalXtext.g:8606:3: ( RULE_STRING )
            // InternalXtext.g:8607:4: RULE_STRING
            {
             before(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1()); 
            match(input,RULE_STRING,FollowSets000.FOLLOW_2); 
             after(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1()); 

            }

             after(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
4450051,none,"    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }"
5331456,none,"    @Override
    public ProcessGroupEntity createProcessGroup(final Revision revision, final String parentGroupId, final ProcessGroupDTO processGroupDTO) {
        final RevisionUpdate<ProcessGroupDTO> snapshot = createComponent(
                revision,
                processGroupDTO,
                () -> processGroupDAO.createProcessGroup(parentGroupId, processGroupDTO),
                processGroup -> dtoFactory.createProcessGroupDto(processGroup));

        final ProcessGroup processGroup = processGroupDAO.getProcessGroup(processGroupDTO.getId());
        final PermissionsDTO permissions = dtoFactory.createPermissionsDto(processGroup);
        final ProcessGroupStatusDTO status = dtoFactory.createConciseProcessGroupStatusDto(controllerFacade.getProcessGroupStatus(processGroup.getIdentifier()));
        final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(processGroup.getIdentifier()));
        final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());
        return entityFactory.createProcessGroupEntity(snapshot.getComponent(), dtoFactory.createRevisionDTO(snapshot.getLastModification()), permissions, status, bulletinEntities);
    }"
5314955,none,"    @Override
    public void closePath()
    {
        linePath.closePath();
    }"
6296681,none,"        @Override
        public void failed(Throwable x)
        {
            completeExceptionally(x);
        }"
9170572,none,"	public Object calculate( Object value )
	{
		if ( value == null )
		{
			return new Double( -1 );
		}

		if ( intervalStart == null )
		{
			return new Double( Math.floor( this.dateTimeUtil.diffYear( defaultStart,
					(Date) value )
					/ getDateIntervalRange( ) ) );
		}
		else
		{
			if ( this.dateTimeUtil.diffYear( (Date) intervalStart, (Date) value ) < 0 )
			{
				return new Double( -1 );
			}
			else
			{
				return new Double( Math.floor( this.dateTimeUtil.diffYear( (Date) intervalStart,
						(Date) value )
						/ getDateIntervalRange( ) ) );
			}
		}
	}"
4930104,none,"    private static void renderChildren(List<Tree> children, int indent,
        boolean parentLabelNull, StringBuilder sb) {
      boolean firstSibling = true;
      boolean leftSibIsPreTerm = true; // counts as true at beginning
      for (Tree child : children) {
        renderTree(child, indent, parentLabelNull, firstSibling, leftSibIsPreTerm, false, sb);
        leftSibIsPreTerm = child.isPreTerminal();
        firstSibling = false;
      }
    }"
4753103,none,"  @Override
  public String convertSchema(String inputSchema, WorkUnitState workUnit)
      throws SchemaConversionException {
    return inputSchema;
  }"
9532191,none,"  protected String getContainerPrivateDir(String appIdStr,
      String containerIdStr) {
    return getAppPrivateDir(appIdStr) + Path.SEPARATOR + containerIdStr
        + Path.SEPARATOR;
  }"
5070999,none,"        @Override
        public void run() {
            while (!shutdown) {
                try {
                    sleep(factoryData.reconnectIntervalMillis);
                    reconnect();
                } catch (final InterruptedException | SQLException e) {
                    logger().debug(""Cannot reestablish JDBC connection to {}: {}"", factoryData, e.getLocalizedMessage(),
                            e);
                } finally {
                    latch.countDown();
                }
            }
        }"
4288257,none,"    private boolean checkSecurityToken(FedizResponse response) {
        if (response == null) {
            return false;
        }
        long currentTime = System.currentTimeMillis();
        return response.getTokenExpires().getTime() > currentTime;
    }"
8971449,none,"  void migrateGlobal(int counts[], long segCounts[], int subIndex, OrdinalMap map) {
    
    final LongValues ordMap = map.getGlobalOrds(subIndex);
    // missing count
    counts[0] += (int) (segCounts[0]>>32);
    
    // migrate actual ordinals
    for (int ord = 1; ord <= segmentSSDV.getValueCount(); ord++) {
      int count = (int) (segCounts[ord]>>32);
      if (count != 0) {
        counts[1+(int) ordMap.get(ord-1)] += count;
      }
    }
  }"
8997948,none,"  public void write(String baseDir) throws IOException {
    String filename = baseDir + File.separator +
      CharacterDefinition.class.getName().replace('.', File.separatorChar) + CharacterDefinition.FILENAME_SUFFIX;
    new File(filename).getParentFile().mkdirs();
    OutputStream os = new FileOutputStream(filename);
    try {
      os = new BufferedOutputStream(os);
      final DataOutput out = new OutputStreamDataOutput(os);
      CodecUtil.writeHeader(out, CharacterDefinition.HEADER, CharacterDefinition.VERSION);
      out.writeBytes(characterCategoryMap, 0, characterCategoryMap.length);
      for (int i = 0; i < CharacterDefinition.CLASS_COUNT; i++) {
        final byte b = (byte) (
          (invokeMap[i] ? 0x01 : 0x00) | 
          (groupMap[i] ? 0x02 : 0x00)
        );
        out.writeByte(b);
      }
    } finally {
      os.close();
    }
  }"
3905445,none,"  @Override
  public TStatus getStatus(long tid) {
    verifyReserved(tid);
    return _getStatus(tid);
  }"
4069589,none,"    static final long hash(long key) {
        long hash = key * HashMixer;
        hash ^= hash >>> R;
        hash *= HashMixer;
        return hash;
    }"
8201369,none,"	public IGrammarAwareElementType getInfixExpression_NameIDTerminalRuleCall_1_0_2_0ElementType() {
		return InfixExpression_NameIDTerminalRuleCall_1_0_2_0_ELEMENT_TYPE;
	}"
4462987,none,"  public Ack resumeFragment(final FragmentHandle handle) {
    // resume a pending fragment
    final FragmentManager manager = bee.getContext().getWorkBus().getFragmentManager(handle);
    if (manager != null) {
      manager.unpause();
      return Acks.OK;
    }

    // resume a paused fragment
    final FragmentExecutor runner = bee.getFragmentRunner(handle);
    if (runner != null) {
      runner.unpause();
      return Acks.OK;
    }

    // fragment completed or does not exist
    logger.warn(""Dropping request to resume fragment. {} does not exist."", QueryIdHelper.getQueryIdentifier(handle));
    return Acks.OK;
  }"
8007538,none,"    public final void synpred7_InternalParametersTestLanguageEx_fragment() throws RecognitionException {   
        // InternalParametersTestLanguageEx.g:828:4: ( ( ruleIdOrKeyword ) )
        // InternalParametersTestLanguageEx.g:828:5: ( ruleIdOrKeyword )
        {
        // InternalParametersTestLanguageEx.g:828:5: ( ruleIdOrKeyword )
        // InternalParametersTestLanguageEx.g:829:5: ruleIdOrKeyword
        {
        pushFollow(FollowSets000.FOLLOW_2);
        ruleIdOrKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }"
7110627,none,"    public ConcurrentMap<String, Double> getMeasurements() {
        if (this.measurements == null) {
            this.measurements = new ConcurrentHashMap<String, Double>();
        }
        return this.measurements;
    }"
7725751,none,"    public static boolean isTrustAliasMissing(ComputeState computeState) {
        URI hostUri = ContainerDescription.getDockerHostUri(computeState);
        return UriUtils.HTTPS_SCHEME.equalsIgnoreCase(hostUri.getScheme())
                && (getTrustAlias(computeState) == null);
    }"
4319422,none,"	private void createTriggerDependencies
	(
        TriggerDescriptorList       tdl,
		Dependent					dependent
	)
		throws StandardException
	{
		CompilerContext 			compilerContext = getCompilerContext();

        for (TriggerDescriptor td : tdl) {
            /*
            ** The dependent now depends on this trigger.
            ** The default dependent is the statement being compiled.
            */
            if (dependent == null) {
                compilerContext.createDependency(td);
            } else {
                compilerContext.createDependency(dependent, td);
            }
        }
	}"
4737230,none,"  public static Schema readSchemaFromLogFile(FileSystem fs, Path path) throws IOException {
    Reader reader = HoodieLogFormat.newReader(fs, new HoodieLogFile(path), null);
    HoodieAvroDataBlock lastBlock = null;
    while (reader.hasNext()) {
      HoodieLogBlock block = reader.next();
      if (block instanceof HoodieAvroDataBlock) {
        lastBlock = (HoodieAvroDataBlock) block;
      }
    }
    reader.close();
    if (lastBlock != null) {
      return lastBlock.getSchema();
    }
    return null;
  }"
4195808,none,"    public String toString(TableMetadata metadata)
    {
        return String.format(""slice(slices=%s, reversed=%b)"", slices, reversed);
    }"
5394056,none,"    @Test
    public void testJoinWithLocalIndex() throws Exception {
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(getUrl(), props);
        try {            
            String query = ""select phone, i.name from "" + getTableName(conn, JOIN_SUPPLIER_TABLE_FULL_NAME) + "" s join "" + getTableName(conn, JOIN_ITEM_TABLE_FULL_NAME) + "" i on s.\""supplier_id\"" = i.\""supplier_id\"" where s.name = 'S1' and i.name < 'T6'"";
            System.out.println(""1)\n"" + query);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-1111"");
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-1111"");
            assertFalse(rs.next());
            rs = conn.createStatement().executeQuery(""EXPLAIN "" + query);
            assertPlansEqual(plans[24], QueryUtil.getExplainPlan(rs));
            
            query = ""select phone, max(i.name) from "" + getTableName(conn, JOIN_SUPPLIER_TABLE_FULL_NAME) + "" s join "" + getTableName(conn, JOIN_ITEM_TABLE_FULL_NAME) + "" i on s.\""supplier_id\"" = i.\""supplier_id\"" where s.name = 'S1' and i.name < 'T6' group by phone"";
            statement = conn.prepareStatement(query);
            rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-1111"");
            assertEquals(rs.getString(2), ""T2"");
            assertFalse(rs.next());
            rs = conn.createStatement().executeQuery(""EXPLAIN "" + query);
            assertPlansEqual(plans[25], QueryUtil.getExplainPlan(rs));
            
            query = ""select max(phone), max(i.name) from "" + getTableName(conn, JOIN_SUPPLIER_TABLE_FULL_NAME) + "" s left join "" + getTableName(conn, JOIN_ITEM_TABLE_FULL_NAME) + "" i on s.\""supplier_id\"" = i.\""supplier_id\"" and i.name < 'T6' where s.name <= 'S3'"";
            statement = conn.prepareStatement(query);
            rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-3333"");
            assertEquals(rs.getString(2), ""T4"");
            assertFalse(rs.next());
            rs = conn.createStatement().executeQuery(""EXPLAIN "" + query);
            assertPlansEqual(plans[26], QueryUtil.getExplainPlan(rs));
        } finally {
            conn.close();
        }
    }"
4457799,none,"      public boolean hasFragmentJson() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }"
8953444,none,"    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }"
4874140,none,"  private static ImmutableDictionaryReader loadDictionary(PinotDataBuffer dictionaryBuffer, ColumnMetadata metadata,
      boolean loadOnHeap) {
    FieldSpec.DataType dataType = metadata.getDataType();
    if (loadOnHeap) {
      String columnName = metadata.getColumnName();
      LOGGER.info(""Loading on-heap dictionary for column: {}"", columnName);
    }

    int length = metadata.getCardinality();
    switch (dataType) {
      case INT:
        return (loadOnHeap) ? new OnHeapIntDictionary(dictionaryBuffer, length)
            : new IntDictionary(dictionaryBuffer, length);

      case LONG:
        return (loadOnHeap) ? new OnHeapLongDictionary(dictionaryBuffer, length)
            : new LongDictionary(dictionaryBuffer, length);

      case FLOAT:
        return (loadOnHeap) ? new OnHeapFloatDictionary(dictionaryBuffer, length)
            : new FloatDictionary(dictionaryBuffer, length);

      case DOUBLE:
        return (loadOnHeap) ? new OnHeapDoubleDictionary(dictionaryBuffer, length)
            : new DoubleDictionary(dictionaryBuffer, length);

      case STRING:
        int numBytesPerValue = metadata.getColumnMaxLength();
        byte paddingByte = (byte) metadata.getPaddingCharacter();
        return loadOnHeap ? new OnHeapStringDictionary(dictionaryBuffer, length, numBytesPerValue, paddingByte)
            : new StringDictionary(dictionaryBuffer, length, numBytesPerValue, paddingByte);

      case BYTES:
        numBytesPerValue = metadata.getColumnMaxLength();
        return new BytesDictionary(dictionaryBuffer, length, numBytesPerValue);

      default:
        throw new IllegalStateException(""Illegal data type for dictionary: "" + dataType);
    }
  }"
4924493,none,"    @Override
    protected void setNumberValue(Number n) {
        value = n.longValue();
    }"
7880833,none,"    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.hash = iprot.readString();
        struct.setHashIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sizeBytes = iprot.readI64();
        struct.setSizeBytesIsSet(true);
      }
    }"
7829822,none,"  @Override
  public String getId() {
    return ""AddFreeItemToOrders"";
  }"
6201491,none,"  @Override
  protected SystemPermissionsImpl getEntity(String userId, String instanceId)
      throws NotFoundException, ServerException {
    try {
      final List<SystemPermissionsImpl> existent = doGetByUser(userId);
      if (existent.isEmpty()) {
        throw new NotFoundException(format(""System permissions for user '%s' not found"", userId));
      }
      return existent.get(0);
    } catch (RuntimeException e) {
      throw new ServerException(e.getMessage(), e);
    }
  }"
6488574,none,"	public ImageProcess(String pid, String commandLine, Properties environment, ImageThread currentThread, Iterator threads, ImageModule executable, Iterator libraries, int pointerSize)
	{
		_id = pid;
		_commandLine = commandLine;
		_environment = environment;
		setCurrentThread(currentThread);
		setThreads(threads);
		_executable = executable;
		while (libraries.hasNext()) {
			_libraries.add(libraries.next());
		}
		_pointerSize = pointerSize;
	}"
7343807,none,"    @Override
    protected void fillMenuBeforeShow(final IMenuManager manager) {
        manager.add(openAction);
        manager.add(downloadToAction);
        manager.add(addAttachmentAction);
        manager.add(deleteAttachmentAction);

        manager.add(new Separator());

        final DownloadAttachmentOpenType preferredOpenType = DownloadAttachmentOpenType.getPreferredOpenType();
        if (DownloadAttachmentOpenType.BROWSER == preferredOpenType) {
            manager.add(openLocallyAction);
        } else {
            manager.add(openInBrowserAction);
        }

        manager.add(copyUrlToClipboardAction);
    }"
4384349,none,"    public String getText()
    {
        // entry/searchresult/bookmark
        IEntry[] entries = getEntries();
        if ( entries != null )
        {
            return entries.length > 1 ? Messages.getString( ""CopyAction.CopyEntriesDNs"" ) : Messages.getString( ""CopyAction.CopyEntryDN"" ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        // searches
        ISearch[] searches = getSearches();
        if ( searches != null )
        {
            return searches.length > 1 ? Messages.getString( ""CopyAction.CopySearches"" ) : Messages.getString( ""CopyAction.CopySearch"" ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        // values
        IValue[] values = getValues();
        if ( values != null )
        {
            return values.length > 1 ? Messages.getString( ""CopyAction.CopyValues"" ) : Messages.getString( ""CopyAction.CopyValue"" ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        return Messages.getString( ""CopyAction.Copy"" ); //$NON-NLS-1$
    }"
5136002,none,"    @Override
    public int hashCode()
    {
        int hash = getClass().hashCode();
        hash = hash * 31 + ( traverse ? 1 : 0 );
        return hash;
    }"
4901677,none,"    private Path getNameElement(
            NodeId nodeId, NodeId parentId, HierarchyManager hmgr)
            throws ItemStateException {
        try {
            Name name = hmgr.getName(nodeId, parentId);
            return PathFactoryImpl.getInstance().create(name);
        } catch (RepositoryException e) {
            String msg = ""Unable to get name for node with id: "" + nodeId;
            throw new ItemStateException(msg, e);
        }
    }"
6546622,none,"	public WILDCARDElements getWILDCARDAccess() {
		return pWILDCARD;
	}"
7180104,none,"    private void storeFile(History histNew, File file, Repository repo,
            boolean mergeHistory) throws HistoryException {

        File cacheFile;
        try {
            cacheFile = getCachedFile(file);
        } catch (ForbiddenSymlinkException e) {
            LOGGER.log(Level.FINER, e.getMessage());
            return;
        }
        History history = histNew;

        File dir = cacheFile.getParentFile();
        if (!dir.isDirectory() && !dir.mkdirs()) {
            throw new HistoryException(
                    ""Unable to create cache directory '"" + dir + ""'."");
        }

        if (mergeHistory && cacheFile.exists()) {
            history = mergeOldAndNewHistory(cacheFile, histNew, repo);
        }

        // If the merge failed, null history will be returned.
        // In such case store at least new history as a best effort.
        if (history != null) {
            writeHistoryToFile(dir, history, cacheFile);
        } else {
            writeHistoryToFile(dir, histNew, cacheFile);
        }
    }"
8224570,none,"    public final Boolean ruleValueLiteral() throws RecognitionException {
        Boolean current = false;
        int ruleValueLiteral_StartIndex = input.index();
        Token lv_value_0_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return current; }
            // PsiInternalBeeLangTestLanguage.g:5259:1: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // PsiInternalBeeLangTestLanguage.g:5260:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // PsiInternalBeeLangTestLanguage.g:5260:2: ( (lv_value_0_0= RULE_STRING ) )
            // PsiInternalBeeLangTestLanguage.g:5261:3: (lv_value_0_0= RULE_STRING )
            {
            // PsiInternalBeeLangTestLanguage.g:5261:3: (lv_value_0_0= RULE_STRING )
            // PsiInternalBeeLangTestLanguage.g:5262:4: lv_value_0_0= RULE_STRING
            {
            if ( state.backtracking==0 ) {

              				markLeaf(elementTypeProvider.getValueLiteral_ValueSTRINGTerminalRuleCall_0ElementType());
              			
            }
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if(!current) {
              					associateWithSemanticElement();
              					current = true;
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				doneLeaf(lv_value_0_0);
              			
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, ruleValueLiteral_StartIndex); }
        }
        return current;
    }"
8685299,none,"    public static List<Map<String, Object>> getFacilityContactMechValueMaps(Delegator delegator, String facilityId, boolean showOld, String contactMechTypeId) {
        List<Map<String, Object>> facilityContactMechValueMaps = new LinkedList<Map<String,Object>>();

        List<GenericValue> allFacilityContactMechs = null;

        try {
            List<GenericValue> tempCol = EntityQuery.use(delegator).from(""FacilityContactMech"").where(""facilityId"", facilityId).queryList();
            if (contactMechTypeId != null) {
                List<GenericValue> tempColTemp = new LinkedList<GenericValue>();
                for (GenericValue partyContactMech: tempCol) {
                    GenericValue contactMech = delegator.getRelatedOne(""ContactMech"", partyContactMech, false);
                    if (contactMech != null && contactMechTypeId.equals(contactMech.getString(""contactMechTypeId""))) {
                        tempColTemp.add(partyContactMech);
                    }

                }
                tempCol = tempColTemp;
            }
            if (!showOld) tempCol = EntityUtil.filterByDate(tempCol, true);
            allFacilityContactMechs = tempCol;
        } catch (GenericEntityException e) {
            Debug.logWarning(e, module);
        }

        if (allFacilityContactMechs == null) return facilityContactMechValueMaps;

        for (GenericValue facilityContactMech: allFacilityContactMechs) {
            GenericValue contactMech = null;

            try {
                contactMech = facilityContactMech.getRelatedOne(""ContactMech"", false);
            } catch (GenericEntityException e) {
                Debug.logWarning(e, module);
            }
            if (contactMech != null) {
                Map<String, Object> facilityContactMechValueMap = new HashMap<String, Object>();

                facilityContactMechValueMaps.add(facilityContactMechValueMap);
                facilityContactMechValueMap.put(""contactMech"", contactMech);
                facilityContactMechValueMap.put(""facilityContactMech"", facilityContactMech);

                try {
                    facilityContactMechValueMap.put(""contactMechType"", contactMech.getRelatedOne(""ContactMechType"", true));
                } catch (GenericEntityException e) {
                    Debug.logWarning(e, module);
                }

                try {
                    List<GenericValue> facilityContactMechPurposes = facilityContactMech.getRelated(""FacilityContactMechPurpose"", null, null, false);

                    if (!showOld) facilityContactMechPurposes = EntityUtil.filterByDate(facilityContactMechPurposes, true);
                    facilityContactMechValueMap.put(""facilityContactMechPurposes"", facilityContactMechPurposes);
                } catch (GenericEntityException e) {
                    Debug.logWarning(e, module);
                }

                try {
                    if (""POSTAL_ADDRESS"".equals(contactMech.getString(""contactMechTypeId""))) {
                        facilityContactMechValueMap.put(""postalAddress"", contactMech.getRelatedOne(""PostalAddress"", false));
                    } else if (""TELECOM_NUMBER"".equals(contactMech.getString(""contactMechTypeId""))) {
                        facilityContactMechValueMap.put(""telecomNumber"", contactMech.getRelatedOne(""TelecomNumber"", false));
                    }
                } catch (GenericEntityException e) {
                    Debug.logWarning(e, module);
                }
            }
        }

        return facilityContactMechValueMaps;
    }"
5428702,none,"    @Override
    public int compareTo(Cost other) {
        if (isUnknown() && other.isUnknown()) {
            return 0;
        } else if (isUnknown() && !other.isUnknown()) {
            return 1;
        } else if (!isUnknown() && other.isUnknown()) {
            return -1;
        }

        double d = this.io - other.io;
        return d == 0 ? 0 : (d > 0 ? 1 : -1);
    }"
7298896,none,"	@Override
	public void declareExchange(final Exchange exchange) {
		try {
			this.rabbitTemplate.execute(channel -> {
				declareExchanges(channel, exchange);
				return null;
			});
		}
		catch (AmqpException e) {
			logOrRethrowDeclarationException(exchange, ""exchange"", e);
		}
	}"
5091269,none,"  protected void configure(boolean noOutput, TreeBuilder treeBuilder, Dataset dataset) {
    Preconditions.checkArgument(treeBuilder != null, ""TreeBuilder not found in the Job parameters"");
    this.noOutput = noOutput;
    this.treeBuilder = treeBuilder;
    this.dataset = dataset;
  }"
5395652,none,"    public static Schema newBagSchema(String bagName, String tupleName,
            List<String> fieldNames, List<Byte> dataTypes)
            throws FrontendException {
        checkParameters(fieldNames, dataTypes);

        Schema tupleSchema = newTupleSchema(tupleName, fieldNames, dataTypes);
        Schema.FieldSchema bagField = new Schema.FieldSchema(bagName,
                tupleSchema, DataType.BAG);

        return new Schema(bagField);
    }"
9225640,none,"    boolean increaseConnectionWindow(int amount) {
        List<Stream<?>> candidates = null;
        controllerLock.lock();
        try {
            int size = connectionWindowSize;
            size += amount;
            if (size < 0)
                return false;
            connectionWindowSize = size;
            if (debug.on())
                debug.log(""Connection window size is now %d (amount added %d)"",
                          size, amount);

            // Notify waiting streams, until the new increased window size is
            // effectively exhausted.
            Iterator<Map.Entry<Integer,Map.Entry<Stream<?>,Integer>>> iter =
                    pending.entrySet().iterator();

            while (iter.hasNext() && size > 0) {
                Map.Entry<Integer,Map.Entry<Stream<?>,Integer>> item = iter.next();
                Integer streamSize = streams.get(item.getKey());
                if (streamSize == null) {
                    iter.remove();
                } else {
                    Map.Entry<Stream<?>,Integer> e = item.getValue();
                    int requestedAmount = e.getValue();
                    // only wakes up the pending streams for which there is
                    // at least 1 byte of space in both windows
                    int minAmount = 1;
                    if (size >= minAmount && streamSize >= minAmount) {
                        size -= Math.min(streamSize, requestedAmount);
                        iter.remove();
                        if (candidates == null)
                            candidates = new ArrayList<>();
                        candidates.add(e.getKey());
                    }
                }
            }
        } finally {
            controllerLock.unlock();
        }
        if (candidates != null) {
            candidates.forEach(Stream::signalWindowUpdate);
        }
        return true;
    }"
4417713,none,"    public OptionEntry(Object value, String text)
    {
        this.value = value;
        this.text = text;
    }"
7388482,none,"	protected void addRepository(RemoteRepository repository) {
		if (this.repositories.contains(repository)) {
			return;
		}
		repository = getPossibleMirror(repository);
		repository = applyProxy(repository);
		repository = applyAuthentication(repository);
		this.repositories.add(0, repository);
	}"
8785914,none,"    @Override
    public void transition(JobImpl job, JobEvent event) {
      job.addDiagnostic(((JobDiagnosticsUpdateEvent) event)
          .getDiagnosticUpdate());
    }"
7440963,none,"    @TruffleBoundary
    private LLVMManagedPointer getApplicationArguments() {
        String[] result;
        if (mainArguments == null) {
            result = new String[]{""""};
        } else {
            result = new String[mainArguments.length + 1];
            // we don't have an application path at this point in time. it will be overwritten when
            // _start is called
            result[0] = """";
            for (int i = 1; i < result.length; i++) {
                result[i] = mainArguments[i - 1].toString();
            }
        }
        return toTruffleObjects(result);
    }"
8510687,none,"    @DB()
    protected void setField(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index) throws SQLException {
        Attribute attr = _allColumns.get(new Pair<String, String>(meta.getTableName(index), meta.getColumnName(index)));
        if (attr == null) {
            // work around for mysql bug to return original table name instead of view name in db view case
            Table tbl = entity.getClass().getSuperclass().getAnnotation(Table.class);
            if (tbl != null) {
                attr = _allColumns.get(new Pair<String, String>(tbl.name(), meta.getColumnLabel(index)));
            }
        }
        assert (attr != null) : ""How come I can't find "" + meta.getCatalogName(index) + ""."" + meta.getColumnName(index);
        setField(entity, attr.field, rs, index);
    }"
8932995,none,"  protected VectorizedRowBatch setupOverflowBatch() throws HiveException {

    int initialColumnCount = vContext.firstOutputColumnIndex();
    VectorizedRowBatch overflowBatch;

    int totalNumColumns = initialColumnCount + vOutContext.getScratchColumnTypeNames().length;
    overflowBatch = new VectorizedRowBatch(totalNumColumns);

    // First, just allocate just the output columns we will be using.
    for (int i = 0; i < outputProjectionColumnMap.length; i++) {
      int outputColumn = outputProjectionColumnMap[i];
      String typeName = outputTypeInfos[i].getTypeName();
      allocateOverflowBatchColumnVector(overflowBatch, outputColumn, typeName);
    }

    // Now, add any scratch columns needed for children operators.
    int outputColumn = initialColumnCount;
    for (String typeName : vOutContext.getScratchColumnTypeNames()) {
      allocateOverflowBatchColumnVector(overflowBatch, outputColumn++, typeName);
    }

    overflowBatch.projectedColumns = outputProjectionColumnMap;
    overflowBatch.projectionSize = outputProjectionColumnMap.length;

    overflowBatch.reset();

    return overflowBatch;
  }"
6190494,none,"  InitializeParams get(String id) throws LanguageServerException {
    InitializeParams initializeParams = new InitializeParams();
    LOG.debug(""Initialize params constructing: started"");

    Boolean locality = localityRegistry.get(id);
    LOG.debug(""Locality: {}"", locality);

    Integer processId = locality ? ProcessIdProvider.get() : null;
    initializeParams.setProcessId(processId);
    LOG.debug(""Process id: {}"", processId);

    String projectsRoot = projectsRootRegistry.getOrNull(id);

    String rootPath;
    if (projectsRoot != null) {
      rootPath = projectsRoot;
    } else {
      rootPath = Paths.get(rootUri).toAbsolutePath().toString();
    }
    initializeParams.setRootPath(rootPath);
    LOG.debug(""Root path: {}"", rootPath);

    String rootUri;
    if (projectsRoot != null) {
      rootUri = Paths.get(projectsRoot).toUri().toString();
    } else {
      rootUri = this.rootUri.toString();
    }
    initializeParams.setRootUri(rootUri);
    LOG.debug(""Root URI: {}"", rootUri);

    ClientCapabilities capabilities = ClientCapabilitiesProvider.get();
    initializeParams.setCapabilities(capabilities);
    LOG.debug(""Client capabilities: {}"", capabilities);

    String clientName = ClientCapabilitiesProvider.CLIENT_NAME;
    initializeParams.setClientName(clientName);
    LOG.debug(""Client name: {}"", clientName);

    LOG.debug(""Initialize params constructing: finished"");
    return initializeParams;
  }"
9324338,none,"    public String getMessage() {
        if (minor == 0)
            return (getMajorString());

        return (getMajorString()
                + "" (Mechanism level: "" + getMinorString() + "")"");
    }"
6044730,none,"	public double[] getAnglesDegrees() {
		double[] angles = new double[] { Math.toDegrees(ang[0]), Math.toDegrees(ang[1]) };
		return angles;
	}"
8195539,none,"    public Future<?> monitorUntil(final ActiveAnnotationContext ctx, final CancelIndicator cancelIndicator, final Function0<? extends Boolean> isFinished) {
      Future<?> _xblockexpression = null;
      {
        final Runnable _function = () -> {
          try {
            while ((!(isFinished.apply()).booleanValue())) {
              {
                boolean _isCanceled = cancelIndicator.isCanceled();
                if (_isCanceled) {
                  CompilationUnitImpl _compilationUnit = ctx.getCompilationUnit();
                  _compilationUnit.setCanceled(true);
                  return;
                }
                Thread.sleep(100);
              }
            }
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        final Runnable r = _function;
        Future<?> _xtrycatchfinallyexpression = null;
        try {
          _xtrycatchfinallyexpression = this.pool.submit(r);
        } catch (final Throwable _t) {
          if (_t instanceof RejectedExecutionException) {
            final RejectedExecutionException e = (RejectedExecutionException)_t;
            AnnotationProcessor.CancellationObserver.log.debug(e.getMessage(), e);
            new Thread(r).start();
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
        _xblockexpression = _xtrycatchfinallyexpression;
      }
      return _xblockexpression;
    }"
8418552,none,"    @Override
    public WorkflowDefinitionFactory getWorkflowDefinitionFactory(WorkflowType workflowType) {
        WorkflowTypeRegistrationOptions registrationOptions = configuration.getWorkflowTypeRegistrationOptions() != null
                ? configuration.getWorkflowTypeRegistrationOptions() : new WorkflowTypeRegistrationOptions();
        DataConverter dataConverter = configuration.getDataConverter() != null
                ? configuration.getDataConverter() : new JsonDataConverter();
        return new CamelWorkflowDefinitionFactory(swfWorkflowConsumer, workflowType, registrationOptions, dataConverter);
    }"
5718043,none,"		@Override
		public Iterator<Tuple2<ValueIndexPair,Double>> call(Tuple2<MatrixIndexes,MatrixBlock> arg0) 
			throws Exception 
		{
			ArrayList<Tuple2<ValueIndexPair,Double>> ret = new ArrayList<>(); 
			MatrixIndexes ix = arg0._1();
			MatrixBlock mb = arg0._2();
			
			long ixoffset = (ix.getRowIndex()-1)*_brlen;
			for( int i=0; i<mb.getNumRows(); i++) {
				double val = mb.quickGetValue(i, 0);
				ret.add(new Tuple2<>(new ValueIndexPair(val,ixoffset+i+1), val));
			}
			
			return ret.iterator();
		}"
7663402,none,"	@Override
	public String toString() {
		return ""DefaultStateContext [stage="" + stage + "", message="" + message + "", messageHeaders="" + messageHeaders + "", extendedState=""
				+ extendedState + "", transition="" + transition + "", stateMachine="" + stateMachine + "", source="" + source + "", target=""
				+ target + "", sources="" + sources + "", targets="" + targets + "", exception="" + exception + ""]"";
	}"
7420655,none,"	public boolean isPartition() {
		return name().contains(""PARTITION"");
	}"
6844792,none,"	public static Control createCustomAreaWithLink(final Composite parent, final Dialog dialog, final Binary binary) {
		final String binaryLabel = binary.getLabel();
		final String prefix = ""The requested operation cannot be performed due to invalid '"" + binaryLabel
				+ ""' settings. Check your '"" + binaryLabel
				+ ""' configuration and preferences under the corresponding "";
		final String link = ""preference page"";
		final String suffix = ""."";
		final String text = prefix + link + suffix;

		final Composite control = new Composite(parent, NONE);
		control.setLayout(GridLayoutFactory.fillDefaults().create());
		final GridData gridData = GridDataFactory.fillDefaults().align(LEFT, TOP).grab(true, true).create();
		control.setLayoutData(gridData);

		final StyleRange style = new StyleRange();
		style.underline = true;
		style.underlineStyle = UNDERLINE_LINK;

		final StyledText styledText = new StyledText(control, MULTI | READ_ONLY | WRAP);
		styledText.setWordWrap(true);
		styledText.setJustify(true);
		styledText.setText(text);
		final GridData textGridData = GridDataFactory.fillDefaults().align(FILL, FILL).grab(true, true).create();
		textGridData.widthHint = TEXT_WIDTH_HINT;
		textGridData.heightHint = TEXT_HEIGHT_HINT;
		styledText.setLayoutData(textGridData);

		styledText.setEditable(false);
		styledText.setBackground(UIUtils.getSystemColor(COLOR_WIDGET_BACKGROUND));
		final int[] ranges = { text.indexOf(link), link.length() };
		final StyleRange[] styles = { style };
		styledText.setStyleRanges(ranges, styles);

		styledText.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseDown(final MouseEvent event) {
				try {
					final int offset = styledText.getOffsetAtPoint(new Point(event.x, event.y));
					final StyleRange actualStyle = offset >= 0 ? styledText.getStyleRangeAtOffset(offset) : null;
					if (null != actualStyle && actualStyle.underline
							&& UNDERLINE_LINK == actualStyle.underlineStyle) {

						dialog.close();
						final PreferenceDialog preferenceDialog = createPreferenceDialogOn(
								UIUtils.getShell(),
								BinariesPreferencePage.ID,
								FILTER_IDS,
								null);

						if (null != preferenceDialog) {
							preferenceDialog.open();
						}

					}
				} catch (final IllegalArgumentException e) {
					// We are not over the actual text.
				}
			}

		});

		return control;
	}"
7588699,none,"		@Override
		@NonNull
		public MethodMetadata getFactoryMethodMetadata() {
			return this.factoryMethodMetadata;
		}"
7539445,none,"        @Override
        public boolean hasNext() {
            if (nextValue != null) {
                return true;
            }
            while (it.hasNext()) {
                Map.Entry<Key<K>, V> entry = it.next();
                K key = entry.getKey().get();
                if (key != null) {
                    nextValue = new Entry(key, entry.getValue());
                    return true;
                } else {
                    it.remove();
                }
            }
            return false;
        }"
8837684,none,"      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }"
4816749,none,"  public static void putAll(Map<String, String> additionalEnvironment) {
    Map<String, String> environment = new HashMap<String, String>(System.getenv());
    environment.putAll(additionalEnvironment);
    updateEnvironment(environment);
  }"
7501823,none,"    @Override
    public String getNameAndSignature() {
        String className = method.getDeclaringClass().getName();
        return className + ""."" + method.getName() + method.getSignature().toMethodDescriptor();
    }"
5437592,none,"    public static org.apache.phoenix.coprocessor.generated.MetaDataProtos.CreateFunctionRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }"
4059172,none,"    @Override
    public String apply(TableReferenceProto.TableReference from) {
      return toTableSpec(from);
    }"
4309297,none,"    @Override
    public Iterator<LdapComparator<?>> iterator()
    {
        return immutableComparatorRegistry.iterator();
    }"
8571818,none,"  public boolean isUnassignable() {
    return isUnassignable(state);
  }"
3794102,none,"  @Override
  public void seekTo(int windowIndex, long positionMs) {
    verifyApplicationThread();
    analyticsCollector.notifySeekStarted();
    player.seekTo(windowIndex, positionMs);
  }"
4832018,none,"    @Override
    public void renderHead(Component component, IHeaderResponse response) {
        super.renderHead(component, response);

        renderFeedbackMessages(response);
    }"
7980032,none,"    public final void rule__Object__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug304681TestLanguage.g:876:1: ( rule__Object__Group__4__Impl rule__Object__Group__5 )
            // InternalBug304681TestLanguage.g:877:2: rule__Object__Group__4__Impl rule__Object__Group__5
            {
            pushFollow(FollowSets000.FOLLOW_9);
            rule__Object__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FollowSets000.FOLLOW_2);
            rule__Object__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
4906096,none,"    public int getRestrictionType(String restrictionName) {
        if (restrictions.containsKey(restrictionName)) {
            return restrictions.get(restrictionName);
        } else {
            return PropertyType.UNDEFINED;
        }
    }"
9217401,none,"        public DTMAxisIterator reset()
        {
            _source.reset();
            return resetPosition();
        }"
5876865,none,"  public InstrumentationFacility getInstrumentationFacility() {
    return getRootContext().getInstrumentationFacility();
  }"
8972337,none,"  @Override
  public int docID() {
    return in.docID();
  }"
5863832,none,"    public boolean isTypeSystemIndexDefIncluded() {
      return typeSystemIndexDefIncluded;
    }"
6877863,none,"  private void informBaseTypesNotification(final TypesNotificationContainer container,
      final SQLProvider provider) throws CouldntLoadDataException {

    final TypeManager typeManager = provider.findModule(container.getModuleId()).getTypeManager();
    if (container.getDatabaseOperation().equals(""INSERT"")) {
      typeManager.loadAndInitializeBaseType(container.getBaseTypeId().get());
    } else if (container.getDatabaseOperation().equals(""UPDATE"")) {
      typeManager.loadAndUpdateBaseType(container.getBaseTypeId().get());
    } else if (container.getDatabaseOperation().equals(""DELETE"")) {
      typeManager.removeBaseTypeInstance(container.getBaseTypeId().get());
    }
  }"
8904717,none,"    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }"
7409026,none,"	@Nullable
	protected PdxSerializer resolveCustomPdxSerializer(@NonNull PersistentProperty<?> property) {

		Map<?, PdxSerializer> customPdxSerializers = getCustomPdxSerializers();

		return this.pdxSerializerResolvers.stream()
			.map(it -> it.resolve(customPdxSerializers, property))
			.filter(Objects::nonNull)
			.findFirst()
			.orElse(null);
	}"
9457761,none,"  public MetricsInfo info() {
    return info;
  }"
7355862,none,"    @Override
    public Object clone() throws CloneNotSupportedException {
        final HttpHost copy = (HttpHost) super.clone();
        copy.init(this);
        return copy;
    }"
6985429,none,"    ClosureType toNonNullable() {
      return isNullable() ? new ClosureBangDecoratedType(this) : this;
    }"
4532155,none,"    private synchronized Map getResourceBundleEntries(final Bundle bundle)
    {
        String file = (String) bundle.getHeaders().get(Constants.BUNDLE_LOCALIZATION);
        if (file == null)
        {
            file = Constants.BUNDLE_LOCALIZATION_DEFAULT_BASENAME;
        }

        // remove leading slash
        if (file.startsWith(""/"")) //$NON-NLS-1$
        {
            file = file.substring(1);
        }

        // split path and base name
        int slash = file.lastIndexOf('/');
        String fileName = file.substring(slash + 1);
        String path = (slash <= 0) ? ""/"" : file.substring(0, slash); //$NON-NLS-1$

        HashMap resourceBundleEntries = new HashMap();

        Enumeration locales = bundle.findEntries(path, fileName + ""*.properties"", false); //$NON-NLS-1$
        if (locales != null)
        {
            while (locales.hasMoreElements())
            {
                URL entry = (URL) locales.nextElement();

                // calculate the key
                String entryPath = entry.getPath();
                final int start = entryPath.lastIndexOf('/') + 1 + fileName.length(); // path,
                                                                                      // slash
                                                                                      // and
                                                                                      // base
                                                                                      // name
                final int end = entryPath.length() - 11; // .properties suffix
                entryPath = entryPath.substring(start, end);

                // the default language is ""name.properties"" thus the entry
                // path is empty and must default to ""_""+DEFAULT_LOCALE
                if (entryPath.length() == 0)
                {
                    entryPath = ""_"" + DEFAULT_LOCALE; //$NON-NLS-1$
                }

                // only add this entry, if the ""language"" is not provided
                // by the main bundle or an earlier bound fragment
                if (!resourceBundleEntries.containsKey(entryPath))
                {
                    resourceBundleEntries.put(entryPath, entry);
                }
            }
        }

        return resourceBundleEntries;
    }"
5732162,none,"  public boolean hasJoinQual() {
    return joinSpec.hasPredicates();
  }"
6020057,none,"    public void setActive(boolean active) {
        this.active = active;
    }"
6323354,none,"    @Override
    public KapuaResponseMessage<?, ?> publish(KapuaDataMessage requestMessage, Long timeout)
            throws KapuaException {
        //
        // Argument validation
        ArgumentValidator.notNull(requestMessage.getScopeId(), ""scopeId"");
        ArgumentValidator.notNull(requestMessage.getDeviceId(), ""deviceId"");
        ArgumentValidator.notNull(requestMessage.getClientId(), ""clientId"");

        //
        // Check Access
        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(StreamDomains.STREAM_DOMAIN, Actions.write, requestMessage.getScopeId()));

        //
        // Do publish
        TransportFacade<?, ?, TransportMessage<?, ?>, ?> transportFacade = null;
        try {

            Device device = DEVICE_REGISTRY_SERVICE.find(requestMessage.getScopeId(), requestMessage.getDeviceId());

            if (device == null) {
                throw new KapuaEntityNotFoundException(Device.TYPE, requestMessage.getDeviceId());
            }

            String nodeUri = device.getConnection().getServerIp();

            //
            // Borrow a KapuaClient
            transportFacade = borrowClient(nodeUri);

            //
            // Get Kura to transport translator for the request and vice versa
            Translator<KapuaDataMessage, KuraDataMessage> translatorKapuaKura = getTranslator(KapuaDataMessage.class, KuraDataMessage.class);
            Translator<KuraDataMessage, ?> translatorKuraTransport = getTranslator(KuraDataMessage.class, transportFacade.getMessageClass());

            KuraDataMessage kuraDataMessage = translatorKapuaKura.translate(requestMessage);

            //
            // Do send
            try {
                // Set current timestamp
                kuraDataMessage.setTimestamp(new Date());

                // Send
                transportFacade.sendAsync((TransportMessage<?, ?>) translatorKuraTransport.translate(kuraDataMessage));

            } catch (KapuaException e) {
                throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CLIENT_SEND_ERROR,
                        e,
                        (Object[]) null);
            }
        } catch (KapuaException ke) {
            throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CALL_ERROR,
                    ke,
                    (Object[]) null);
        } finally {
            if (transportFacade != null) {
                transportFacade.clean();
            }
        }

        return null;
    }"
6953316,none,"	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case DomPackage.CONTENT_NODE__OWNER:
				setOwner((Composite)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}"
7856535,none,"    public boolean isPersistent() {
      return persistent;
    }"
8230789,none,"    protected void addAncestorPath(TraversableSource source, Stack ancestors)
    throws SAXException, ProcessingException {
        if (ancestors.empty()) {
            this.isRequestedSource = true;
            addPath(source, depth);
        } else {
            startNode(COL_NODE_NAME, (TraversableSource) ancestors.pop());
            addAncestorPath(source, ancestors);
            endNode(COL_NODE_NAME);
        }
    }"
4042328,none,"    @Override
    public Mutation apply(Key key) {
      // Verify that the entity to delete has a complete key.
      checkArgument(
          isValidKey(key),
          ""Keys to be deleted from the Cloud Datastore must be complete:\n%s"",
          key);

      return makeDelete(key).build();
    }"
4794965,none,"    @Override
    public Object getValue(final String columnLabel, final Class<?> type) throws SQLException {
        Object result;
        if (Object.class == type) {
            result = decrypt(columnLabel, resultSet.getObject(columnLabel));
        } else if (boolean.class == type) {
            result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));
        } else if (byte.class == type) {
            result = decrypt(columnLabel, resultSet.getByte(columnLabel));
        } else if (short.class == type) {
            result = decrypt(columnLabel, resultSet.getShort(columnLabel));
        } else if (int.class == type) {
            result = decrypt(columnLabel, resultSet.getInt(columnLabel));
        } else if (long.class == type) {
            result = decrypt(columnLabel, resultSet.getLong(columnLabel));
        } else if (float.class == type) {
            result = decrypt(columnLabel, resultSet.getFloat(columnLabel));
        } else if (double.class == type) {
            result = decrypt(columnLabel, resultSet.getDouble(columnLabel));
        } else if (String.class == type) {
            result = decrypt(columnLabel, resultSet.getString(columnLabel));
        } else if (BigDecimal.class == type) {
            result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));
        } else if (byte[].class == type) {
            result = resultSet.getBytes(columnLabel);
        } else if (Date.class == type) {
            result = resultSet.getDate(columnLabel);
        } else if (Time.class == type) {
            result = resultSet.getTime(columnLabel);
        } else if (Timestamp.class == type) {
            result = resultSet.getTimestamp(columnLabel);
        } else if (URL.class == type) {
            result = resultSet.getURL(columnLabel);
        } else if (Blob.class == type) {
            result = resultSet.getBlob(columnLabel);
        } else if (Clob.class == type) {
            result = resultSet.getClob(columnLabel);
        } else if (SQLXML.class == type) {
            result = resultSet.getSQLXML(columnLabel);
        } else if (Reader.class == type) {
            result = resultSet.getCharacterStream(columnLabel);
        } else {
            result = decrypt(columnLabel, resultSet.getObject(columnLabel));
        }
        return result;
    }"
4476433,none,"  @VisibleForTesting
  public int getPreferredMergeBatchSize() { return preferredMergeBatchSize; }"
4432151,none,"    @Override
    public SiteEntity create(SiteEntity entity) {
        Preconditions.checkNotNull(entity.getSiteId(), ""SiteId is null: "" + entity.getSiteId());
        if (siteId2EntityMap.containsKey(entity.getSiteId())) {
            throw new IllegalArgumentException(""Duplicated siteId: "" + entity.getSiteId());
        }
        entity.ensureDefault();
        siteId2EntityMap.put(entity.getSiteId(), entity);
        return entity;
    }"
7001897,none,"  private static Map<String, Object> readJson(HttpServletRequest request) {
    try {
      String json = CharStreams.toString(request.getReader());
      return jsonToMap(json);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }"
7110712,none,"    public static boolean isValidNmtoken(String nmtoken) {
        if (nmtoken.length() == 0)
            return false;
        for (int i = 0; i < nmtoken.length(); i++ ) {
           char ch = nmtoken.charAt(i);
           if(  ! isName( ch ) ){
              return false;
           }
        }
        return true;
    } // isValidName(String):boolean"
6236024,none,"    public GridFsArtifact(final GridFSFile dbFile, final String contentType,
            final Supplier<InputStream> inputStreamSupplier) {
        super(dbFile.getId().toString(), new DbArtifactHash(dbFile.getFilename(), dbFile.getMD5()), dbFile.getLength(),
                contentType);
        this.inputStreamSupplier = inputStreamSupplier;
    }"
6790483,none,"  @Override
  public String vmExecutablePath(Vm vm) {
    File homeDir = vmHomeDir(vm);
    for (String extension : EXECUTABLE_EXTENSIONS) {
      for (String dir : EXECUTABLE_DIRS) {
        File file = new File(homeDir, dir + vm.executable() + extension);
        if (file.isFile()) {
          return file.getAbsolutePath();
        }
      }
    }
    throw new VirtualMachineException(
        String.format(
            ""VM executable %s for VM %s not found under home dir %s"",
            vm.executable(), vm, homeDir));
  }"
4232859,none,"    public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,
                                               final Predicate<? super T> predicate2) {
        return OrPredicate.orPredicate(predicate1, predicate2);
    }"
4044091,none,"    @Override
    public void serialize(AGeometry instance, DataOutput out) throws HyracksDataException {
        try {
            OGCGeometry geometry = instance.getGeometry();
            byte[] buffer = geometry.asBinary().array();
            // For efficiency, we store the size of the geometry in bytes in the first 32 bits
            // This allows AsterixDB to skip over this attribute if needed.
            out.writeInt(buffer.length);
            out.write(buffer);
        } catch (IOException e) {
            throw HyracksDataException.create(e);
        }
    }"
7483452,none,"	public Customer123Service(Customer123Repository repo) {
	}"
4364662,none,"    @Override
    public void writeTo(JsonWebKeys t, Class<?> type, Type genericType, Annotation[] annotations,
                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders,
                        OutputStream entityStream) throws IOException, WebApplicationException {
        JwkUtils.jwkSetToJson(t, entityStream);

    }"
8532133,none,"    @Override
    public short syncAll(short syncMode) {
        short syncState = SYNC_STATE_IN_SYNC;

        /* vnc classes need to be synchronized with cloudstack */
        s_logger.debug(""syncing cloudstack db with vnc"");
        try {
            for (Class<?> cls : _vncClasses) {

                /* lock the sync mode*/
                _lockSyncMode.lock();
                _rwMode = syncMode == DBSyncGeneric.SYNC_MODE_UPDATE;
                _dbSync.setSyncMode(syncMode);

                if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {
                    s_logger.debug(""sync check start: "" + DBSyncGeneric.getClassName(cls));
                } else {
                    s_logger.debug(""sync start: "" + DBSyncGeneric.getClassName(cls));
                }

                if (_dbSync.sync(cls) == false) {
                    if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {
                        s_logger.info(""out of sync detected: "" + DBSyncGeneric.getClassName(cls));
                    } else {
                        s_logger.info(""out of sync detected and re-synced: "" + DBSyncGeneric.getClassName(cls));
                    }
                    syncState = SYNC_STATE_OUT_OF_SYNC;
                }
                if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {
                    s_logger.debug(""sync check finish: "" + DBSyncGeneric.getClassName(cls));
                } else {
                    s_logger.debug(""sync finish: "" + DBSyncGeneric.getClassName(cls));
                }
                /* unlock the sync mode */
                _lockSyncMode.unlock();
            }
        } catch (Exception ex) {
            s_logger.warn(""DB Synchronization"", ex);
            syncState = SYNC_STATE_UNKNOWN;
            if (_lockSyncMode.isLocked()) {
                _lockSyncMode.unlock();
            }
        }

        return syncState;
    }"
5816939,none,"    public static final <S, E> Iterator<E> applyAll(final S start, final Traversal.Admin<S, E> traversal) {
        traversal.reset();
        traversal.addStart(traversal.getTraverserGenerator().generate(start, traversal.getStartStep(), 1l));
        return traversal; // flatMap
    }"
6475184,none,"	void setValue(String value) throws IllegalArgumentException {
		if (value.equalsIgnoreCase(""true"") || value.equalsIgnoreCase(""yes"")) {
			formatTimestamp = true;
		} else if (value.equalsIgnoreCase(""false"") || value.equalsIgnoreCase(""no"")) {
			formatTimestamp = false;
		} else {
			throw new IllegalArgumentException(""The value \""""+value+""\"" specified for format timestamp is not valid, must be true or false"");
		}
	}"
4612119,none,"	private void tryConnectToResourceManager() {
		if (resourceManagerAddress != null) {
			connectToResourceManager();
		}
	}"
8978631,none,"  protected void markLargestWriterPending(DocumentsWriterFlushControl control,
      ThreadState perThreadState, final long currentBytesPerThread) {
    ThreadState largestNonPendingWriter = findLargestNonPendingWriter(control, perThreadState);
    if (largestNonPendingWriter != null) {
      control.setFlushPending(largestNonPendingWriter);
    }
  }"
8907524,none,"  @Override public boolean nextKeyValue() {
    if (values.hasNext()) {
      return true;
    }
    if (queryResultsIterator.hasNext()) {
      current = queryResultsIterator.next();
      values = current.getValue().getValue().iterator();
      return nextKeyValue();
    }
    return false;
  }"
5798354,none,"  public Printer visitMethodTypeAnnotation(
      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {
    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);
  }"
8350391,none,"	@Override
	public void postRead(ResolvedType enclosingType) {
		typePattern.postRead(enclosingType);
	}"
3963415,none,"  @Override
  public String toString()
  {
    return indexMap.toString();
  }"
3868110,none,"  public static String repeat(String s, int c) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < c; i++)
      sb.append(s);
    return sb.toString();
  }"
7225000,none,"		@Override
		@Nullable
		public Object scanUnsafe(Attr key) {
			if (key == Attr.PARENT) return s;

			return InnerOperator.super.scanUnsafe(key);
		}"
7997206,none,"	protected void appendDefaultLiteral(ITreeAppendable b, /* @Nullable */ LightweightTypeReference type) {
		if (type != null && type.isPrimitive()) {
			Primitive primitiveKind = type.getPrimitiveKind();
			switch (primitiveKind) {
				case Boolean:
					b.append(""false"");
					break;
				default:
					b.append(""0"");
					break;
			}
		} else {
			b.append(""null"");
		}
	}"
8048739,none,"	public Condition getLeft() {
		return left;
	}"
8791597,none,"    @Override
    public void updateExperiment(String airavataExperimentId, ExperimentModel experiment) throws RegistryServiceException, TException {
        try {
            experimentCatalog = RegistryFactory.getDefaultExpCatalog();
            if (!experimentCatalog.isExist(ExperimentCatalogModelType.EXPERIMENT, airavataExperimentId)) {
                logger.error(airavataExperimentId, ""Update request failed, Experiment {} doesn't exist."", airavataExperimentId);
                throw new RegistryServiceException(""Requested experiment id "" + airavataExperimentId + "" does not exist in the system.."");
            }

            ExperimentStatus experimentStatus = getExperimentStatusInternal(airavataExperimentId);
            if (experimentStatus != null){
                ExperimentState experimentState = experimentStatus.getState();
                switch (experimentState){
                    case CREATED: case VALIDATED:
                        if(experiment.getUserConfigurationData() != null && experiment.getUserConfigurationData()
                                .getComputationalResourceScheduling() != null){
                            String compResourceId = experiment.getUserConfigurationData()
                                    .getComputationalResourceScheduling().getResourceHostId();
                            ComputeResourceDescription computeResourceDescription = appCatalog.getComputeResource()
                                    .getComputeResource(compResourceId);
                            if(!computeResourceDescription.isEnabled()){
                                logger.error(""Compute Resource is not enabled by the Admin!"");
                                AiravataSystemException exception = new AiravataSystemException();
                                exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
                                exception.setMessage(""Compute Resource is not enabled by the Admin!"");
                                throw exception;
                            }
                        }
                        experimentCatalog.update(ExperimentCatalogModelType.EXPERIMENT, experiment, airavataExperimentId);
                        logger.debug(airavataExperimentId, ""Successfully updated experiment {} "", experiment.getExperimentName());
                        break;
                    default:
                        logger.error(airavataExperimentId, ""Error while updating experiment. Update experiment is only valid for experiments "" +
                                ""with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given "" +
                                ""experiment is in one of above statuses... "");
                        AiravataSystemException exception = new AiravataSystemException();
                        exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
                        exception.setMessage(""Error while updating experiment. Update experiment is only valid for experiments "" +
                                ""with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given "" +
                                ""experiment is in one of above statuses... "");
                        throw exception;
                }
            }
        } catch (RegistryException e) {
            logger.error(airavataExperimentId, ""Error while updating experiment"", e);
            RegistryServiceException exception = new RegistryServiceException();
            exception.setMessage(""Error while updating experiment. More info : "" + e.getMessage());
            throw exception;
        } catch (AppCatalogException e) {
            logger.error(airavataExperimentId, ""Error while updating experiment"", e);
            RegistryServiceException exception = new RegistryServiceException();
            exception.setMessage(""Error while updating experiment. More info : "" + e.getMessage());
            throw exception;
        }
    }"
3975605,none,"  private static JsonNode validateDefault(String fieldName, Schema schema,
                                          JsonNode defaultValue) {
    if (VALIDATE_DEFAULTS.get() && (defaultValue != null)
        && !isValidDefault(schema, defaultValue)) { // invalid default
      String message = ""Invalid default for field ""+fieldName
        +"": ""+defaultValue+"" not a ""+schema;
      throw new AvroTypeException(message);     // throw exception
    }
    return defaultValue;
  }"
8650167,none,"    public static boolean isSignedFloat(String s) {
        if (isEmpty(s)) {
            return defaultEmptyOK;
        }
        try {
            Float.parseFloat(s);
            return true;
        } catch (Exception e) {
            return false;
        }
    }"
4144417,none,"  @Deprecated // to be removed before 2.0
  public static RelNode swap(Join join) {
    return swap(join, false,
        RelFactories.LOGICAL_BUILDER.create(join.getCluster(), null));
  }"
8572333,none,"  public synchronized boolean addServerToDrainList(final ServerName sn) {
    // Warn if the server (sn) is not online.  ServerName is of the form:
    // <hostname> , <port> , <startcode>

    if (!this.isServerOnline(sn)) {
      LOG.warn(""Server "" + sn + "" is not currently online. "" +
               ""Ignoring request to add it to draining list."");
      return false;
    }
    // Add the server to the draining servers lists, if it's not already in
    // it.
    if (this.drainingServers.contains(sn)) {
      LOG.warn(""Server "" + sn + "" is already in the draining server list."" +
               ""Ignoring request to add it again."");
      return true;
    }
    LOG.info(""Server "" + sn + "" added to draining server list."");
    return this.drainingServers.add(sn);
  }"
5470714,none,"    private UUID cacheIfNecessary(final UUID candidate)
    {
        UUID existing = _uuids.putIfAbsent(candidate, candidate);
        return existing == null ? candidate : existing;
    }"
4790338,none,"    private void appendSchemaPlaceholder(final SQLBuilder sqlBuilder, final SchemaToken schemaToken, final int count) {
        String schemaName = originalSQL.substring(schemaToken.getStartIndex(), schemaToken.getStopIndex() + 1);
        sqlBuilder.appendPlaceholder(new SchemaPlaceholder(schemaName.toLowerCase(), schemaToken.getTableName().toLowerCase()));
        appendRest(sqlBuilder, count, schemaToken.getStopIndex() + 1);
    }"
9377204,none,"    public void paintComponent(Graphics g)  {
        XPStyle xp = XPStyle.getXP();

        paintTitleBackground(g);

        String title = frame.getTitle();
        if (title != null) {
            boolean isSelected = frame.isSelected();
            Font oldFont = g.getFont();
            Font newFont = (titleFont != null) ? titleFont : getFont();
            g.setFont(newFont);

            // Center text vertically.
            FontMetrics fm = SwingUtilities2.getFontMetrics(frame, g, newFont);
            int baseline = (getHeight() + fm.getAscent() - fm.getLeading() -
                    fm.getDescent()) / 2;

            Rectangle lastIconBounds = new Rectangle(0, 0, 0, 0);
            if (frame.isIconifiable()) {
                lastIconBounds = iconButton.getBounds();
            } else if (frame.isMaximizable()) {
                lastIconBounds = maxButton.getBounds();
            } else if (frame.isClosable()) {
                lastIconBounds = closeButton.getBounds();
            }

            int titleX;
            int titleW;
            int gap = 2;
            if (WindowsGraphicsUtils.isLeftToRight(frame)) {
                if (lastIconBounds.x == 0) { // There are no icons
                    lastIconBounds.x = frame.getWidth() - frame.getInsets().right;
                }
                titleX = systemLabel.getX() + systemLabel.getWidth() + gap;
                if (xp != null) {
                    titleX += 2;
                }
                titleW = lastIconBounds.x - titleX - gap;
            } else {
                if (lastIconBounds.x == 0) { // There are no icons
                    lastIconBounds.x = frame.getInsets().left;
                }
                titleW = SwingUtilities2.stringWidth(frame, fm, title);
                int minTitleX = lastIconBounds.x + lastIconBounds.width + gap;
                if (xp != null) {
                    minTitleX += 2;
                }
                int availableWidth = systemLabel.getX() - gap - minTitleX;
                if (availableWidth > titleW) {
                    titleX = systemLabel.getX() - gap - titleW;
                } else {
                    titleX = minTitleX;
                    titleW = availableWidth;
                }
            }
            title = getTitle(frame.getTitle(), fm, titleW);

            if (xp != null) {
                String shadowType = null;
                if (isSelected) {
                    shadowType = xp.getString(this, Part.WP_CAPTION,
                                              State.ACTIVE, Prop.TEXTSHADOWTYPE);
                }
                if (""single"".equalsIgnoreCase(shadowType)) {
                    Point shadowOffset = xp.getPoint(this, Part.WP_WINDOW, State.ACTIVE,
                                                     Prop.TEXTSHADOWOFFSET);
                    Color shadowColor  = xp.getColor(this, Part.WP_WINDOW, State.ACTIVE,
                                                     Prop.TEXTSHADOWCOLOR, null);
                    if (shadowOffset != null && shadowColor != null) {
                        g.setColor(shadowColor);
                        SwingUtilities2.drawString(frame, g, title,
                                     titleX + shadowOffset.x,
                                     baseline + shadowOffset.y);
                    }
                }
            }
            g.setColor(isSelected ? selectedTextColor : notSelectedTextColor);
            SwingUtilities2.drawString(frame, g, title, titleX, baseline);
            g.setFont(oldFont);
        }
    }"
3993831,none,"    public WritableRaster copyData(WritableRaster wr) {
        // Get my source.
        CachableRed srcRed = (CachableRed)getSources().get(0);

        SampleModel sm = srcRed.getSampleModel();
        if (sm.getNumBands() == 1)
            // Already one band of data so we just use it...
            return srcRed.copyData(wr);

        // Two band case so we need to multiply them...
        // Note: Our source will always have either one or two bands
        // since we insert an Any2Lum transform before ourself in the
        // rendering chain.

        Raster srcRas = srcRed.getData(wr.getBounds());
        PixelInterleavedSampleModel srcSM;
        srcSM = (PixelInterleavedSampleModel)srcRas.getSampleModel();

        DataBufferByte srcDB = (DataBufferByte)srcRas.getDataBuffer();
        byte []        src   = srcDB.getData();
        
        PixelInterleavedSampleModel dstSM;
        dstSM = (PixelInterleavedSampleModel)wr.getSampleModel();

        DataBufferByte dstDB = (DataBufferByte)wr.getDataBuffer();
        byte []        dst   = dstDB.getData();

        int srcX0 = srcRas.getMinX()-srcRas.getSampleModelTranslateX();
        int srcY0 = srcRas.getMinY()-srcRas.getSampleModelTranslateY();

        int dstX0 = wr.getMinX()-wr.getSampleModelTranslateX();
        int dstX1 = dstX0+wr.getWidth()-1;
        int dstY0 = wr.getMinY()-wr.getSampleModelTranslateY();

        int    srcStep = srcSM.getPixelStride();
        int [] offsets = srcSM.getBandOffsets();
        int    srcLOff = offsets[0];
        int    srcAOff = offsets[1];

        if (srcRed.getColorModel().isAlphaPremultiplied()) {
            // Lum is already multiplied by alpha so we just copy lum channel.
            for (int y=0; y<srcRas.getHeight(); y++) {
                int srcI  = srcDB.getOffset() + srcSM.getOffset(srcX0,  srcY0);
                int dstI  = dstDB.getOffset() + dstSM.getOffset(dstX0,  dstY0);
                int dstE  = dstDB.getOffset() + dstSM.getOffset(dstX1+1,dstY0);

                srcI += srcLOff; // Go to Lum Channel (already mult by alpha).

                while (dstI < dstE) {
                    dst[dstI++] = src[srcI];
                        srcI += srcStep; // Go to next pixel
                }
                srcY0++;
                dstY0++;
            }
        }
        else {
            // This allows me to pre-adjust my index by srcLOff
            // Then only add the offset for srcAOff
            srcAOff = srcAOff-srcLOff;

            for (int y=0; y<srcRas.getHeight(); y++) {
                int srcI  = srcDB.getOffset() + srcSM.getOffset(srcX0,  srcY0);
                int dstI  = dstDB.getOffset() + dstSM.getOffset(dstX0,  dstY0);
                int dstE  = dstDB.getOffset() + dstSM.getOffset(dstX1+1,dstY0);

                srcI += srcLOff;

                while (dstI < dstE) {
                    int sl = (src[srcI])&0xFF; // LOff already included
                    int sa = (src[srcI+srcAOff])&0xFF;
                    // the + 0x80 forces proper rounding.
                    dst[dstI++] = (byte)((sl*sa+0x80)>>8);

                    srcI+= srcStep; //  next pixel
                }
                srcY0++;
                dstY0++;
            }
        }

        return wr;
    }"
7065127,none,"    @Override
    public int getActualMinimum(int field) {
        if (field == DAY_OF_MONTH) {
            GregorianCalendar gc = getNormalizedCalendar();
            int year = gc.cdate.getNormalizedYear();
            if (year == gregorianCutoverYear || year == gregorianCutoverYearJulian) {
                long month1 = getFixedDateMonth1(gc.cdate, gc.calsys.getFixedDate(gc.cdate));
                BaseCalendar.Date d = getCalendarDate(month1);
                return d.getDayOfMonth();
            }
        }
        return getMinimum(field);
    }"
6119512,none,"        @Override
        public boolean accept(Object anObject)
        {
            return !this.collection.contains(anObject);
        }"
9489211,none,"  public void deleteLocalFiles(String subdir) throws IOException {
    String[] localDirs = getLocalDirs();
    for (int i = 0; i < localDirs.length; i++) {
      FileSystem.getLocal(this).delete(new Path(localDirs[i], subdir), true);
    }
  }"
4778425,none,"  @Override
  public UpdateIndexAuthorizationProcessor getInstance(SolrQueryRequest req,
      SolrQueryResponse rsp, UpdateRequestProcessor next) {
    return new UpdateIndexAuthorizationProcessor(req, rsp, next);
  }"
6920454,none,"  String computeAndDisplayPin(String user, int position, boolean computeHotp) {
    OtpType type = AccountDb.getType(user);
    String secret = getSecret(user);
    PinInfo currentPin;
    if (mUsers[position] != null) {
      currentPin = mUsers[position]; // existing PinInfo, so we'll update it
    } else {
      currentPin = new PinInfo();
      currentPin.mPin = sResources.getString(EMPTY_PIN);
    }
    
    currentPin.mUser = user;
    if (type == OtpType.TOTP) {
      currentPin.mPin = computePin(secret, null);
    } else if (type == OtpType.HOTP) {
      currentPin.mIsHotp = true;
      if (computeHotp) {
        AccountDb.incrementCounter(user);
        Integer counter = AccountDb.getCounter(user);
        currentPin.mPin = computePin(secret, new Long(counter.longValue()));
      }
    }
    mUsers[position] = currentPin;
    return currentPin.mPin;
  }"
7610926,none,"	public static String getClassVersion(Class clazz) {
		String version = ""unkown"";
		if (clazz.getPackage().getImplementationVersion() != null) {
			version = clazz.getPackage().getImplementationVersion();
		}
		return version;
	}"
5573449,none,"    @Override
    public int setPath(Path2D path) {
        Rectangle2D bounds = path.getBounds2D();
        PathIterator it = path.getPathIterator(null);

        List<byte[]> segInfo = new ArrayList<>();
        List<Point2D.Double> pntInfo = new ArrayList<>();
        boolean isClosed = false;
        int numPoints = 0;
        while (!it.isDone()) {
            double[] vals = new double[6];
            int type = it.currentSegment(vals);
            switch (type) {
                case PathIterator.SEG_MOVETO:
                    pntInfo.add(new Point2D.Double(vals[0], vals[1]));
                    segInfo.add(SEGMENTINFO_MOVETO);
                    numPoints++;
                    break;
                case PathIterator.SEG_LINETO:
                    pntInfo.add(new Point2D.Double(vals[0], vals[1]));
                    segInfo.add(SEGMENTINFO_LINETO);
                    segInfo.add(SEGMENTINFO_ESCAPE);
                    numPoints++;
                    break;
                case PathIterator.SEG_CUBICTO:
                    pntInfo.add(new Point2D.Double(vals[0], vals[1]));
                    pntInfo.add(new Point2D.Double(vals[2], vals[3]));
                    pntInfo.add(new Point2D.Double(vals[4], vals[5]));
                    segInfo.add(SEGMENTINFO_CUBICTO);
                    segInfo.add(SEGMENTINFO_ESCAPE2);
                    numPoints++;
                    break;
                case PathIterator.SEG_QUADTO:
                    //TODO: figure out how to convert SEG_QUADTO into SEG_CUBICTO
                    LOG.log(POILogger.WARN, ""SEG_QUADTO is not supported"");
                    break;
                case PathIterator.SEG_CLOSE:
                    pntInfo.add(pntInfo.get(0));
                    segInfo.add(SEGMENTINFO_LINETO);
                    segInfo.add(SEGMENTINFO_ESCAPE);
                    segInfo.add(SEGMENTINFO_LINETO);
                    segInfo.add(SEGMENTINFO_CLOSE);
                    isClosed = true;
                    numPoints++;
                    break;
                default:
                    LOG.log(POILogger.WARN, ""Ignoring invalid segment type ""+type);
                    break;
            }

            it.next();
        }
        if(!isClosed) {
            segInfo.add(SEGMENTINFO_LINETO);
        }
        segInfo.add(SEGMENTINFO_END);

        AbstractEscherOptRecord opt = getEscherOptRecord();
        opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__SHAPEPATH, 0x4));

        EscherArrayProperty verticesProp = new EscherArrayProperty((short)(EscherProperties.GEOMETRY__VERTICES + 0x4000), false, null);
        verticesProp.setNumberOfElementsInArray(pntInfo.size());
        verticesProp.setNumberOfElementsInMemory(pntInfo.size());
        verticesProp.setSizeOfElements(8);
        for (int i = 0; i < pntInfo.size(); i++) {
            Point2D.Double pnt = pntInfo.get(i);
            byte[] data = new byte[8];
            LittleEndian.putInt(data, 0, Units.pointsToMaster(pnt.getX() - bounds.getX()));
            LittleEndian.putInt(data, 4, Units.pointsToMaster(pnt.getY() - bounds.getY()));
            verticesProp.setElement(i, data);
        }
        opt.addEscherProperty(verticesProp);

        EscherArrayProperty segmentsProp = new EscherArrayProperty((short)(EscherProperties.GEOMETRY__SEGMENTINFO + 0x4000), false, null);
        segmentsProp.setNumberOfElementsInArray(segInfo.size());
        segmentsProp.setNumberOfElementsInMemory(segInfo.size());
        segmentsProp.setSizeOfElements(0x2);
        for (int i = 0; i < segInfo.size(); i++) {
            byte[] seg = segInfo.get(i);
            segmentsProp.setElement(i, seg);
        }
        opt.addEscherProperty(segmentsProp);

        opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__RIGHT, Units.pointsToMaster(bounds.getWidth())));
        opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__BOTTOM, Units.pointsToMaster(bounds.getHeight())));

        opt.sortProperties();

        setAnchor(bounds);

        return numPoints;
    }"
5809960,none,"    @Override
    public <A> GraphTraversalSource withSideEffect(final String key, final Supplier<A> initialValue, final BinaryOperator<A> reducer) {
        return (GraphTraversalSource) TraversalSource.super.withSideEffect(key, initialValue, reducer);
    }"
9517554,none,"  @Override
  public void activateApplication(String user, ApplicationId applicationId) {

    this.writeLock.lock();
    try {
      User userDesc = getUser(user);
      if (userDesc != null && userDesc.getActiveApplications() <= 0) {
        return;
      }

      Set<ApplicationId> userApps = usersApplications.get(user);
      if (userApps == null) {
        userApps = new HashSet<ApplicationId>();
        usersApplications.put(user, userApps);
        activeUsers.incrementAndGet();
        metrics.incrActiveUsers();

        // A user is added to active list. Invalidate user-limit cache.
        userLimitNeedsRecompute();
        updateActiveUsersResourceUsage(user);
        LOG.debug(""User {} added to activeUsers, currently: {}"",
            user, activeUsers);
      }
      if (userApps.add(applicationId)) {
        metrics.activateApp(user);
      }
    } finally {
      this.writeLock.unlock();
    }
  }"
6614282,none,"	private int countN4JSResourcesBuiltIn(ResourceSet resSet) {
		int n = 0;
		for (Resource res : resSet.getResources()) {
			if (isBuiltInResource(res)) {
				n++;
			}
		}
		return n;
	}"
6458427,none,"    public String deleteMapping ( final String channelId, final String name )
    {
        if ( !this.idToNameMap.containsEntry ( channelId, name ) )
        {
            return null;
        }

        this.nameToIdMap.remove ( name );
        this.idToNameMap.remove ( channelId, name );

        final Collection<String> names = this.model.getNameMap ().get ( channelId );
        if ( names != null )
        {
            names.remove ( name );
        }

        return channelId;
    }"
7197017,none,"    private static GenerateAutonomousDataWarehouseWalletDetails createAdwWalletDetails(
            String password) {
        return GenerateAutonomousDataWarehouseWalletDetails.builder().password(password).build();
    }"
4437678,none,"    public LaterunEvent(String clusterName, String wfId, String parentId, long msgInsertTime,
                        long delay, String entityType, String entityName,
                        String instance, int runId, String workflowUser) {
        super(clusterName, wfId, parentId, msgInsertTime, delay, entityType, entityName,
                instance, runId, workflowUser);
    }"
6289735,none,"    @ManagedAttribute(value = ""idletimeout in MS"", readonly = true)
    public long getIdleTimeoutMs()
    {
        if(_idleTimeUnit==null)
            return 0;
        return _idleTimeUnit.toMillis(_idleTime);
    }"
9329773,none,"    PlainHttpConnection(InetSocketAddress addr, HttpClientImpl client) {
        super(addr, client);
        try {
            this.chan = SocketChannel.open();
            chan.configureBlocking(false);
            trySetReceiveBufferSize(client.getReceiveBufferSize());
            if (debug.on()) {
                int bufsize = getInitialBufferSize();
                debug.log(""Initial receive buffer size is: %d"", bufsize);
            }
            chan.setOption(StandardSocketOptions.TCP_NODELAY, true);
            // wrap the channel in a Tube for async reading and writing
            tube = new SocketTube(client(), chan, Utils::getBuffer);
        } catch (IOException e) {
            throw new InternalError(e);
        }
    }"
4843205,none,"    public int from(MemberGroupLayout.ColumnSpans columnSpans) {
        if (this == LEFT)
            return columnSpans.getLeft();
        if (this == MIDDLE)
            return columnSpans.getMiddle();
        if (this == RIGHT)
            return columnSpans.getRight();
        throw new IllegalStateException();
    }"
4301650,none,"        @Override
        public String getName() {
            return name();
        }"
4471010,none,"  @Override
  public void computeScalePrecision(int leftPrecision, int leftScale, int rightPrecision, int rightScale) {

    // compute the output scale and precision here
    outputScale = Math.max(leftScale, rightScale);
    int leftIntegerDigits = leftPrecision - leftScale;

    outputPrecision = DRILL_REL_DATATYPE_SYSTEM.getMaxNumericPrecision();

    if (outputScale + leftIntegerDigits > outputPrecision) {
      outputScale = outputPrecision - leftIntegerDigits;
    }

    // Output precision should at least be greater or equal to the input precision
    outputPrecision = Math.min(outputPrecision, Math.max(leftPrecision, rightPrecision));
  }"
8346160,none,"	public static TypePattern read(VersionedDataInputStream s, ISourceContext c) throws IOException {
		AnnotationTypePattern annPatt = AnnotationTypePattern.read(s, c);
		AnyWithAnnotationTypePattern ret = new AnyWithAnnotationTypePattern(annPatt);
		ret.readLocation(c, s);
		return ret;
	}"
4826023,none,"    private Persistability determinePersistability() {
        final NotPersistableFacet notPersistableFacet = getFacet(NotPersistableFacet.class);
        if (notPersistableFacet == null) {
            return Persistability.USER_PERSISTABLE;
        }
        final NotPersistable.By initiatedBy = notPersistableFacet.value();
        if (initiatedBy == NotPersistable.By.USER_OR_PROGRAM) {
            return Persistability.TRANSIENT;
        } else if (initiatedBy == NotPersistable.By.USER) {
            return Persistability.PROGRAM_PERSISTABLE;
        } else {
            return Persistability.USER_PERSISTABLE;
        }
    }"
8432596,none,"    public AggregationStrategy getAggregationStrategy() {
        return aggregationStrategy;
    }"
4553401,none,"    private Money handleInstallmentTransaction(final RecurringDepositScheduleInstallment currentInstallment,
            final Money transactionAmountUnprocessed, final LocalDate transactionDate) {

        Money transactionAmountRemaining = transactionAmountUnprocessed;
        Money depositAmountPortion = Money.zero(transactionAmountRemaining.getCurrency());

        depositAmountPortion = currentInstallment.payInstallment(transactionDate, transactionAmountRemaining);
        transactionAmountRemaining = transactionAmountRemaining.minus(depositAmountPortion);

        return transactionAmountRemaining;

    }"
7954103,none,"	@Override
	/** {@inheritDoc} */
	public void setMyScope(final Scope scope) {
		super.setMyScope(scope);
		if (unnamedPart != null) {
			unnamedPart.setMyScope(scope);
		}
		if (namedPart != null) {
			namedPart.setMyScope(scope);
		}
	}"
6442583,none,"			public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
				while (true) {
					int tag = 0;
					try {
						tag = input.readTag();
					} catch (Exception e) {
						// do nothing
					}
					switch (tag) {
						case 0 :
							this.setUnknownFields(unknownFields.build());
							onChanged();
							return this;
						default : {
							if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
								this.setUnknownFields(unknownFields.build());
								onChanged();
								return this;
							}
							break;
						}
						case 10 : {
							bitField0_ |= 0x00000001;
							message_ = input.readBytes();
							break;
						}
						case 16 : {
							int rawValue = input.readEnum();
							org.eclipse.orion.server.cf.loggregator.LoggregatorMessage.Message.MessageType value = org.eclipse.orion.server.cf.loggregator.LoggregatorMessage.Message.MessageType.valueOf(rawValue);
							if (value == null) {
								unknownFields.mergeVarintField(2, rawValue);
							} else {
								bitField0_ |= 0x00000002;
								messageType_ = value;
							}
							break;
						}
						case 24 : {
							bitField0_ |= 0x00000004;
							timestamp_ = input.readSInt64();
							break;
						}
						case 34 : {
							bitField0_ |= 0x00000008;
							appId_ = input.readBytes();
							break;
						}
						case 50 : {
							bitField0_ |= 0x00000010;
							sourceId_ = input.readBytes();
							break;
						}
						case 58 : {
							ensureDrainUrlsIsMutable();
							drainUrls_.add(input.readBytes());
							break;
						}
						case 66 : {
							bitField0_ |= 0x00000040;
							sourceName_ = input.readBytes();
							break;
						}
					}
				}
			}"
7855032,none,"  @Override
  public void removeHealthMonitor(InternalDistributedMember owner, int theId) {
    final HealthMonitor hm = getHealthMonitor(owner);
    if (hm != null && hm.getId() == theId) {
      hm.stop();
      this.hmMap.remove(owner);
    }
  }"
4666091,none,"	public SlotID(ResourceID resourceId, int slotNumber) {
		checkArgument(0 <= slotNumber, ""Slot number must be positive."");
		this.resourceId = checkNotNull(resourceId, ""ResourceID must not be null"");
		this.slotNumber = slotNumber;
	}"
5627395,none,"        @Override
        boolean innerToOuter()
        {
            return true;
        } "
8813925,none,"    public String recv_registerComputeResource() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      registerComputeResource_result result = new registerComputeResource_result();
      receiveBase(result, ""registerComputeResource"");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, ""registerComputeResource failed: unknown result"");
    }"
7078266,none,"    public FormatFlagsConversionMismatchException(String f, char c) {
        if (f == null)
            throw new NullPointerException();
        this.f = f;
        this.c = c;
    }"
3839255,none,"    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new java.lang.IllegalStateException();
    }"
6521680,none,"    @Override
    public String toString() {
        return getType() + ""="" + getIdentifier();
    }"
5419311,none,"	private List<HRegionLocation> getRegionLocationsFromManifest(SnapshotManifest manifest) {
		List<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();
		Preconditions.checkNotNull(regionManifests);

		List<RegionInfo> regionInfos = Lists.newArrayListWithCapacity(regionManifests.size());
		List<HRegionLocation> hRegionLocations = Lists.newArrayListWithCapacity(regionManifests.size());

		for (SnapshotRegionManifest regionManifest : regionManifests) {
			RegionInfo regionInfo = ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo());
			if (isValidRegion(regionInfo)) {
				regionInfos.add(regionInfo);
			}
		}

		regionInfos.sort(RegionInfo.COMPARATOR);

		for (RegionInfo regionInfo : regionInfos) {
			hRegionLocations.add(new HRegionLocation(regionInfo, null));
		}

		return hRegionLocations;
	}"
7422066,none,"            @Override
            public boolean isOpen() {
                return true;
            }"
7218982,none,"    @SuppressWarnings(""unchecked"")
    @Override
    public T call() throws Exception {
        return ((Callable<T>)source).call();
    }"
4282272,none,"    public BinarySearchNode(K[] splitPoints, RawComparator<K> comparator) {
      this.splitPoints = splitPoints;
      this.comparator = comparator;
    }"
5942839,none,"    public byte[] element() throws NoSuchElementException, KeeperException, InterruptedException {
        Map<Long,String> orderedChildren;

        // element, take, and remove follow the same pattern.
        // We want to return the child node with the smallest sequence number.
        // Since other clients are remove()ing and take()ing nodes concurrently, 
        // the child with the smallest sequence number in orderedChildren might be gone by the time we check.
        // We don't call getChildren again until we have tried the rest of the nodes in sequence order.
        while(true){
            try{
                orderedChildren = orderedChildren(null);
            }catch(KeeperException.NoNodeException e){
                throw new NoSuchElementException();
            }
            if(orderedChildren.size() == 0 ) throw new NoSuchElementException();

            for(String headNode : orderedChildren.values()){
                if(headNode != null){
                    try{
                        return zookeeper.getData(dir+""/""+headNode, false, null);
                    }catch(KeeperException.NoNodeException e){
                        //Another client removed the node first, try next
                    }
                }
            }

        }
    }"
9159804,none,"    private void retrySetNullParamValue( ParameterName paramName, int paramIndex, 
                                         int parameterType,
                                         Exception lastException ) 
        throws DataException
    {
        switch( parameterType )
        {            
            case Types.CHAR:
            {
                setString( paramName, paramIndex, null );
                return;
            }
            
            case Types.DECIMAL:
            {
                setBigDecimal( paramName, paramIndex, null );
                return;
            }
            case Types.DATE:
            {
                setDate( paramName, paramIndex, null );
                return;
            }
            
            case Types.TIME:
            {
                setTime( paramName, paramIndex, null );
                return;
            }

            case Types.TIMESTAMP:
            {
                setTimestamp( paramName, paramIndex, null );
                return;
            }

            case Types.JAVA_OBJECT:
            {
                setObject( paramName, paramIndex, null );
                return;
            }
            
            default:
                // metadata indicates primitive data types or types not supported for input parameter, 
                // cannot retry with a different ODA API setter to assign 
                // a null input parameter value
                
                getLogger().logp( Level.SEVERE, sm_className, ""retrySetNullParamValue"",  //$NON-NLS-1$
                                ""Input parameter value is null; not able to retry, throws exception from underlying ODA driver."" ); //$NON-NLS-1$
                
                // not able to retry, throw last exception thrown by 
                // the underlying ODA driver
                throwSetParamValueLastException( lastException, ""retrySetNullParamValue"" ); //$NON-NLS-1$
        }
    }"
9004407,none,"    @Override
    public BytesRef next() {
      if (input.position() < end) {
        try {
          int code = input.readVInt();
          boolean newField = (code & 1) != 0;
          if (newField) {
            field = input.readString();
          }
          int prefix = code >>> 1;
          int suffix = input.readVInt();
          readTermBytes(prefix, suffix);
          return bytes;
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      } else {
        field = null;
        return null;
      }
    }"
6457258,none,"	@Override
	public String getLoggerLevel(String loggerName) {
		String result = null;

/*[IF Sidecar19-SE]*/
		try {
			Object logger = getLoggerFromName(loggerName);
/*[ELSE]	
			Logger logger = LogManager.getLogManager().getLogger(loggerName);
/*[ENDIF]*/			
			
			if (logger != null) {
				// The named Logger exists. Now attempt to obtain its log level.
/*[IF Sidecar19-SE]*/
				Object level = logger_getLevel.invoke(logger);
/*[ELSE]					
				Level level = logger.getLevel();
/*[ENDIF]*/					
				if (level != null) {
/*[IF Sidecar19-SE]*/
					result = (String)level_getName.invoke(level);
/*[ELSE]	
					result = level.getName();
/*[ENDIF]*/	
				} else {
					// A null return from getLevel() means that the Logger
					// is inheriting its log level from an ancestor. Return an
					// empty string to the caller.
					result = """"; //$NON-NLS-1$
				}
			}
/*[IF Sidecar19-SE]*/
		} catch (Exception e) {
			throw handleError(e);
		}
/*[ENDIF]*/
		
		return result;
	}"
7279538,none,"  @Override
  protected String getBundleName() {
    return BUNDEL_NAME;
  }"
7416098,none,"	private void destroyBeanFactoryLocator() {
		Optional.ofNullable(getBeanFactoryLocator()).ifPresent(GemfireBeanFactoryLocator::destroy);
		this.beanFactoryLocator = null;
	}"
9087427,none,"        AllNamesVisitor(boolean functions, int maxNames, boolean unique) {
            this.functions = functions;
            this.maxNames = maxNames == -1 ? Integer.MAX_VALUE : maxNames;
            this.unique = unique ? new HashSet<>() : null;
            this.result = new ArrayList<>();
        }"
6512990,none,"  public void setStackTraceTexts(String[] texts) {
    if (texts == null) {
      this.texts = null;
    } else {
      this.texts = texts.clone();
    }
  }"
4380229,none,"    public static boolean accept(AST node) {
        return TypedefVisitor.accept(node)
            || StructVisitor.accept(node)
            || UnionVisitor.accept(node)
            || EnumVisitor.accept(node);
    }"
4312069,none,"    public static boolean isOid( String oidString )
    {
        try
        {
            Oid.fromString( oidString );

            return true;
        }
        catch ( DecoderException e )
        {
            return false;
        }
    }"
4042280,none,"    @Override
    public PCollection<Message> expand(PBegin input) {

      org.apache.beam.sdk.io.Read.Unbounded<Message> unbounded =
          org.apache.beam.sdk.io.Read.from(
              new SqsUnboundedSource(
                  this,
                  new SqsConfiguration(input.getPipeline().getOptions().as(AwsOptions.class))));

      PTransform<PBegin, PCollection<Message>> transform = unbounded;

      if (maxNumRecords() < Long.MAX_VALUE || maxReadTime() != null) {
        transform = unbounded.withMaxReadTime(maxReadTime()).withMaxNumRecords(maxNumRecords());
      }

      return input.getPipeline().apply(transform);
    }"
3814167,none,"      private VoteRunnableHolder(QuorumVote quorumVote, List<VoteRunnable> runnables, int size) {
         this.quorumVote = quorumVote;

         this.runnables = runnables;
         this.size = size;
      }"
4494161,none,"   static private String getSwapInfoScript() {
      String functionText = ""  function iaf(txt) {\n"" +
            ""    var aff=txt.replace( /"" + AFFIRMED + ""/g,\""<br><h3>Affirmed</h3>\"" );\n"" +
            ""    var neg=aff.replace( /"" + NEGATED + ""/g,\""<br><h3>Negated</h3>\"" );\n"" +
            ""    var unc=neg.replace( /"" + UNCERTAIN + ""/g,\""<br><h3>Uncertain</h3>\"" );\n"" +
            ""    var unn=unc.replace( /"" + UNCERTAIN_NEGATED + ""/g,\""<br><h3>Uncertain, Negated</h3>\"" );\n"" +
            ""    var gnr=unn.replace( /"" + GENERIC + ""/g,\""\"" );\n"" +

            ""    var wik1=gnr.replace( /"" + WIKI_BEGIN
            + ""/g,\""<a href=\\\""https://vsearch.nlm.nih.gov/vivisimo/cgi-bin/query-meta?v%3Aproject=medlineplus&v%3Asources=medlineplus-bundle&query=\"" );\n"" +
            ""    var wik2=wik1.replace( /"" + WIKI_CENTER + ""/g,\""\\\"" target=\\\""_blank\\\"">\"" );\n"" +
            ""    var wik3=wik2.replace( /"" + WIKI_END + ""/g,\""</a>\"" );\n"";

      String previousCode = ""wik3"";
      for ( SemanticMarkup markup : SemanticMarkup.values() ) {
         functionText += createSemanticReplacements( markup, previousCode );
         previousCode = markup.getEncoding()
               .toLowerCase();
      }
      functionText +=
            ""    var spc=_unk_.replace( /"" + SPACER + ""/g,\""&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"" );\n"" +
                  ""    var prf1=spc.replace( /\\[/g,\""<i>\"" );\n"" +
                  ""    var prf2=prf1.replace( /\\]/g,\""</i>\"" );\n"" +
                  ""    var nl=prf2.replace( /"" + NEWLINE + ""/g,\""<br>\"" );\n"" +
                  ""    document.getElementById(\""ia\"").innerHTML = nl;\n"" +
                  ""  }\n"";
      return functionText;
   }"
8080847,none,"    public final void rule__XShortClosure__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug462047Lang.g:7756:1: ( ( ( rule__XShortClosure__Group_0_0__0 ) ) )
            // InternalBug462047Lang.g:7757:1: ( ( rule__XShortClosure__Group_0_0__0 ) )
            {
            // InternalBug462047Lang.g:7757:1: ( ( rule__XShortClosure__Group_0_0__0 ) )
            // InternalBug462047Lang.g:7758:2: ( rule__XShortClosure__Group_0_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXShortClosureAccess().getGroup_0_0()); 
            }
            // InternalBug462047Lang.g:7759:2: ( rule__XShortClosure__Group_0_0__0 )
            // InternalBug462047Lang.g:7759:3: rule__XShortClosure__Group_0_0__0
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXShortClosureAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
3727277,none,"    @Override
    public String getString(int parameterIndex) throws SQLException {
        try {
            return stmt.getString(parameterIndex);
        } catch (Throwable t) {
            throw checkException(t);
        }
    }"
6629031,none,"	public OGCLineString exteriorRing() {
		if (polygon.isEmpty())
			return new OGCLinearRing((Polygon) polygon.createInstance(), 0,
					esriSR, true);
		return new OGCLinearRing(polygon, 0, esriSR, true);
	}"
6921162,none,"  public boolean hasIndex() {
    return getIndex() != null;
  }"
6179505,none,"  @Override
  public String hoverBackgroundColor() {
    return ""rgba(215, 215, 215, 0.12)"";
  }"
6342054,none,"  public void setBreakpoints(@NonNull final Breakpoint[] breakpoints) {
    if (breakpoints == null) {
      throw new IllegalArgumentException(""Property must not be null: breakpoints"");
    }
    this.breakpoints = breakpoints;
  }"
5423428,none,"  public static IndexFailurePolicy getFailurePolicy(RegionCoprocessorEnvironment env)
      throws IOException {
    Configuration conf = env.getConfiguration();
    try {
      IndexFailurePolicy committer =
          conf.getClass(INDEX_FAILURE_POLICY_CONF_KEY, PhoenixIndexFailurePolicy.class,
            IndexFailurePolicy.class).newInstance();
      return committer;
    } catch (InstantiationException e) {
      throw new IOException(e);
    } catch (IllegalAccessException e) {
      throw new IOException(e);
    }
  }"
4743999,none,"  public static Protos.FrameworkID toFrameworkID(ByteBuffer bb) {
    try {
      return Protos.FrameworkID.parseFrom(getBytes(bb, bb.getInt()));
    } catch (Exception e) {
      throw new RuntimeException(""Failed to parse Framework ID"", e);
    }
  }"
4095482,none,"    public NestedLoopJoin(IHyracksTaskContext ctx, FrameTupleAccessor accessorOuter, FrameTupleAccessor accessorInner,
            ITuplePairComparator comparatorsOuter2Inner, int memSize, IPredicateEvaluator predEval, boolean isLeftOuter,
            IMissingWriter[] missingWriters) throws HyracksDataException {
        this.accessorInner = accessorInner;
        this.accessorOuter = accessorOuter;
        this.appender = new FrameTupleAppender();
        this.tpComparator = comparatorsOuter2Inner;
        this.outBuffer = new VSizeFrame(ctx);
        this.innerBuffer = new VSizeFrame(ctx);
        this.appender.reset(outBuffer, true);
        if (memSize < 3) {
            throw new HyracksDataException(""Not enough memory is available for Nested Loop Join"");
        }
        this.outerBufferMngr =
                new VariableFrameMemoryManager(new VariableFramePool(ctx, ctx.getInitialFrameSize() * (memSize - 2)),
                        FrameFreeSlotPolicyFactory.createFreeSlotPolicy(EnumFreeSlotPolicy.LAST_FIT, memSize - 2));

        this.predEvaluator = predEval;
        this.isReversed = false;

        this.isLeftOuter = isLeftOuter;
        if (isLeftOuter) {
            int innerFieldCount = this.accessorInner.getFieldCount();
            missingTupleBuilder = new ArrayTupleBuilder(innerFieldCount);
            DataOutput out = missingTupleBuilder.getDataOutput();
            for (int i = 0; i < innerFieldCount; i++) {
                missingWriters[i].writeMissing(out);
                missingTupleBuilder.addFieldEndOffset();
            }
        } else {
            missingTupleBuilder = null;
        }

        FileReference file =
                ctx.getJobletContext().createManagedWorkspaceFile(this.getClass().getSimpleName() + this.toString());
        runFileWriter = new RunFileWriter(file, ctx.getIoManager());
        runFileWriter.open();
    }"
7478016,none,"    public boolean isReference() {
        if (isCachedLanguage()) {
            return !ElementUtils.typeEquals(getLanguageType(), getParameter().getType());
        } else {
            return ElementUtils.typeEquals(getReferenceType(), getParameter().getType());
        }
    }"
5464749,none,"        public void onDischargeSuccess() {
            cleanup();

            // If the declare already returned a result we can proceed otherwise
            // we need to wait for it finish in order to get the correct outcome.
            if (declare == null) {
                request.onSuccess();
            } else if (declare.isComplete()) {
                if (declare.getFailureCause() == null) {
                    request.onSuccess();
                } else {
                    request.onFailure(declare.getFailureCause());
                }
            }
        }"
5302732,none,"    @Override
    public void valueChanged(Value val) {
    	if (val != null && val.matches(""DataCacheTimeout"")) {
    		_cacheTimeout = Integer.MIN_VALUE;
    	}
    }"
7002266,none,"    private Atom getSTTSAtom() {
        Atom atom = new Atom(""stts"", (byte)0, 0);
        int numAudioFrames = mFrameSize.length - 1;
        atom.setData(new byte[] {
                0, 0, 0, 0x02,  // entry count
                0, 0, 0, 0x01,  // first frame contains no audio
                0, 0, 0, 0,
                (byte)((numAudioFrames >> 24) & 0xFF), (byte)((numAudioFrames >> 16) & 0xFF),
                (byte)((numAudioFrames >> 8) & 0xFF), (byte)(numAudioFrames & 0xFF),
                0, 0, 0x04, 0,  // delay between frames = 1024 samples (cf. timescale = Fs)
        });
        return atom;
    }"
4140914,none,"    public Collection<Function> getFunctions(String name) {
      return CalciteSchema.this.getFunctions(name, true);
    }"
6296221,none,"    public AsyncContextEvent(Context context,AsyncContextState asyncContext, HttpChannelState state, Request baseRequest, ServletRequest request, ServletResponse response)
    {
        super(null,request,response,null);
        _context=context;
        _asyncContext=asyncContext;
        _state=state;

        // If we haven't been async dispatched before
        if (baseRequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI)==null)
        {
            // We are setting these attributes during startAsync, when the spec implies that
            // they are only available after a call to AsyncContext.dispatch(...);

            // have we been forwarded before?
            String uri=(String)baseRequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);
            if (uri!=null)
            {
                baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,uri);
                baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH));
                baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH));
                baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getAttribute(RequestDispatcher.FORWARD_PATH_INFO));
                baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING));
            }
            else
            {
                baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,baseRequest.getRequestURI());
                baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getContextPath());
                baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getServletPath());
                baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getPathInfo());
                baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getQueryString());
            }
        }
    }"
7749788,none,"    public static int execSingleProcess(List<String> cmdWords, Map<String,?> env, File directory, OutputStream out, OutputStream err, Object contextForLogging) {
        StreamGobbler errgobbler = null;
        StreamGobbler outgobbler = null;
        
        ProcessBuilder pb = new ProcessBuilder(cmdWords);
        if (env!=null) {
            for (Map.Entry<String,?> kv: env.entrySet()) pb.environment().put(kv.getKey(), String.valueOf(kv.getValue())); 
        }
        if (directory != null) {
            pb.directory(directory);
        }
        
        try {
            Process p = pb.start();
            
            if (out != null) {
                InputStream outstream = p.getInputStream();
                outgobbler = new StreamGobbler(outstream, out, (Logger) null);
                outgobbler.start();
            }
            if (err != null) {
                InputStream errstream = p.getErrorStream();
                errgobbler = new StreamGobbler(errstream, err, (Logger) null);
                errgobbler.start();
            }
            
            int result = p.waitFor();
            
            if (outgobbler != null) outgobbler.blockUntilFinished();
            if (errgobbler != null) errgobbler.blockUntilFinished();
            
            if (result==255)
                // this is not definitive, but tests (and code?) expects throw exception if can't connect;
                // only return exit code when it is exit code from underlying process;
                // we have no way to distinguish 255 from ssh failure from 255 from the command run through ssh ...
                // but probably 255 is from CLI ssh
                throw new SshException(""exit code 255 from CLI ssh; probably failed to connect"");
            
            return result;
        } catch (InterruptedException e) {
            throw Exceptions.propagate(e);
        } catch (IOException e) {
            throw Exceptions.propagate(e);
        } finally {
            closeWhispering(outgobbler, contextForLogging, ""execProcess"");
            closeWhispering(errgobbler, contextForLogging, ""execProcess"");
        }
    }"
3870545,none,"  public static RSAPublicKey getPublicKeyFromFile(String filePath) throws IOException, CertificateException {
    String pemString = FileUtils.readFileToString(new File(filePath));
    return getPublicKeyFromString(pemString);
  }"
5173084,none,"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((table == null) ? 0 : table.hashCode());
        return result;
    }"
7248409,none,"    protected void notifyCannotPerform() {
        DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message(
                NbBundle.getMessage(DataSourceAction.class,
                ""MSG_Cannot_perform_action_in_this_context""), // NOI18N
                NotifyDescriptor.ERROR_MESSAGE));
    }"
3770892,none,"    private static void printCodePointAsFourHexDigits(Appendable out, int c)
        throws IOException
    {
        String s = Integer.toHexString(c);
        out.append(""\\u"");
        out.append(ZERO_PADDING[4-s.length()]);
        out.append(s);
    }"
6062576,none,"    public ContentHandle getContent(Node node) throws IOException {
        ContentHandle result = peekContent(node);
        if (result != null) {
            return result;
        }
        
        if (outstore != null) {
            installNpmModule(node);
            return outstore.getContent(node);
        } else {
            // Until now we used peekContent() which doesn't throw
            // so we re-try with any store to get the error we want
            return stores[0].getContent(node);
        }
    }"
9018110,none,"  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {
    try {
      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {
        throw new Exception(""Could not obtain lock to modify reporters registry: "" + registry);
      }
    } catch (InterruptedException e) {
      throw new Exception(""Interrupted while trying to obtain lock to modify reporters registry: "" + registry);
    }
    try {
      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);
      if (perRegistry == null) {
        perRegistry = new HashMap<>();
        reporters.put(registry, perRegistry);
      }
      if (tag != null && !tag.isEmpty()) {
        name = name + ""@"" + tag;
      }
      SolrMetricReporter oldReporter = perRegistry.get(name);
      if (oldReporter != null) { // close it
        log.info(""Replacing existing reporter '"" + name + ""' in registry '"" + registry + ""': "" + oldReporter.toString());
        oldReporter.close();
      }
      perRegistry.put(name, reporter);

    } finally {
      reportersLock.unlock();
    }
  }"
5041287,none,"    @Override
    public void endIterator(Iterator<?> iterator)
    {
        checkIfClosed() ; 
        transaction.removeIterator(iterator) ;
        // Don't pass down the beginIterator call - we track and manage here, not lower down.  
        //blockMgr.endIterator(iterator) ;
    }"
4609125,none,"	@Override
	public int hashCode() {
		Preconditions.checkNotNull(type, ""TypeInformation type class is required"");

		return type.hashCode();
	}"
8919445,none,"      public void read(org.apache.thrift.protocol.TProtocol iprot, alter_table_with_cascade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o1 = new InvalidOperationException();
                struct.o1.read(iprot);
                struct.setO1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // O2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o2 = new MetaException();
                struct.o2.read(iprot);
                struct.setO2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }"
8141607,none,"	@Override
	public void setVisible(boolean visible) {
		if (visible) {
			if(isInitialName) 
				setPageComplete(false);
			else 
				setPageComplete(validatePage(true));
			updatePreview();
			textField.setFocus();
		}
		super.setVisible(visible);
	}"
4043104,none,"    public int getMaxFramesForWindow() {
        int frameSize = getFrameSize();
        return getInt(MAX_FRAMES_FOR_WINDOW, (int) (((long) 4 * MB) / frameSize));
    }"
6920597,none,"  public void addSegment(Segment segment) {
    getSegments().add(segment);
  }"
5748379,none,"  public Object visit(Context ctx, Stack<Expr> stack, Expr expr) throws TajoException {
    if (expr instanceof UnaryOperator) {
      preHook(ctx, stack, expr);
      visitUnaryOperator(ctx, stack, (UnaryOperator) expr);
      postHook(ctx, stack, expr, null);
    } else if (expr instanceof BinaryOperator) {
      preHook(ctx, stack, expr);
      visitBinaryOperator(ctx, stack, (BinaryOperator) expr);
      postHook(ctx, stack, expr, null);
    } else {
      super.visit(ctx, stack, expr);
    }

    if (expr != null && ctx.targetType == expr.getType()) {
      ctx.set.add(expr);
    }

    return null;
  }"
4734250,none,"  public Long getTotalLogRecordsCompacted() {
    Long totalLogRecords = 0L;
    for (Map.Entry<String, List<HoodieWriteStat>> entry : partitionToWriteStats.entrySet()) {
      for (HoodieWriteStat writeStat : entry.getValue()) {
        totalLogRecords += writeStat.getTotalLogRecords();
      }
    }
    return totalLogRecords;
  }"
8905843,none,"  private static String applyTimestampFormat(String arg, String format, TimeZone timeZone) {
    return DruidExpressions.functionCall(""timestamp_format"",
        ImmutableList.of(arg, DruidExpressions.stringLiteral(format), DruidExpressions.stringLiteral(timeZone.getID()))
    );
  }"
3917525,none,"      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }"
4490338,none,"  public List<Feature> extract(JCas jCas, CollectionTextRelation cluster,
      IdentifiedAnnotation mention) throws AnalysisEngineProcessException {
    if(cache == null){
      throw new RuntimeException(""This extractor requires a cached Markable->ConllDependencyNode map to be set with setCache()"");
    }
    List<Feature> feats = new ArrayList<>();
    CounterMap<String> featCounts = new CounterMap<>();
    
    if(StringMatchingFeatureExtractor.isPronoun(mention)) return feats;
    
    String m = mention.getCoveredText();
    Set<String> mentionWords = contentWords(mention);
    Set<String> nonHeadMentionWords = new HashSet<>(mentionWords);
    ConllDependencyNode mentionHead = cache.get(mention);
    
    String mentionHeadString = null;
    if(mentionHead != null){
      mentionHeadString = mentionHead.getCoveredText().toLowerCase();
      nonHeadMentionWords.remove(mentionHeadString);

      int maxNonoverlap = 0;

      for(IdentifiedAnnotation member : new ListIterable<IdentifiedAnnotation>(cluster.getMembers())){
        if(member == null){
          System.err.println(""Something that shouldn't happen has happened"");
          continue;
        }else if(mention.getBegin() < member.getEnd()){
          // during training this might happen -- see a member of a cluster that
          // is actually subsequent to the candidate mention
          continue;
        }else if(StringMatchingFeatureExtractor.isPronoun(member)){
          continue;
        }

        String s = member.getCoveredText();
        Set<String> memberWords = contentWords(member);
        Set<String> nonHeadMemberWords = new HashSet<>(memberWords);
        ConllDependencyNode memberHead = cache.get(member);
        String memberHeadString = null;
        if(memberHead != null){
          memberHeadString = memberHead.getCoveredText().toLowerCase();
          nonHeadMemberWords.remove(memberHeadString);

          if(mentionHeadString.equals(memberHeadString)){

            if(m.equalsIgnoreCase(s)) featCounts.add(""MC_STRING_EXACT"");
            if(startMatch(m,s)) featCounts.add(""MC_STRING_START"");
            if(endMatch(m,s)) featCounts.add(""MC_STRING_END"");
            if(soonMatch(m,s)) featCounts.add(""MC_STRING_SOON"");
            if(wordOverlap(mentionWords, memberWords)) featCounts.add(""MC_OVERLAP"");
            if(wordSubstring(mentionWords, memberWords)) featCounts.add(""MC_SUB"");

            int nonHeadOverlap = wordNonOverlapCount(nonHeadMemberWords, nonHeadMentionWords);
            if(nonHeadOverlap > maxNonoverlap){
              maxNonoverlap = nonHeadOverlap;
            }
          }
        }
      }
      feats.add(new Feature(""MC_MAX_NONOVERLAP"", maxNonoverlap));
    }
    
    
    for(String featKey : featCounts.keySet()){
      // normalized
//      feats.add(new Feature(featKey, (double) featCounts.get(featKey) / clusterSize));
      // boolean
      feats.add(new Feature(featKey, true));
    }
    return feats;
  }"
9006040,none,"  private void doDefensiveChecks(DistribPhase phase) {
    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;
    if (isReplayOrPeersync) return;

    String from = req.getParams().get(DISTRIB_FROM);
    ClusterState clusterState = zkController.getClusterState();

    DocCollection docCollection = clusterState.getCollection(collection);
    Slice mySlice = docCollection.getSlice(cloudDesc.getShardId());
    boolean localIsLeader = cloudDesc.isLeader();
    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay
      String fromShard = req.getParams().get(DISTRIB_FROM_PARENT);
      if (fromShard != null) {
        if (mySlice.getState() == Slice.State.ACTIVE)  {
          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,
              ""Request says it is coming from parent shard leader but we are in active state"");
        }
        // shard splitting case -- check ranges to see if we are a sub-shard
        Slice fromSlice = docCollection.getSlice(fromShard);
        DocRouter.Range parentRange = fromSlice.getRange();
        if (parentRange == null) parentRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);
        if (mySlice.getRange() != null && !mySlice.getRange().isSubsetOf(parentRange)) {
          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,
              ""Request says it is coming from parent shard leader but parent hash range is not superset of my range"");
        }
      } else {
        String fromCollection = req.getParams().get(DISTRIB_FROM_COLLECTION); // is it because of a routing rule?
        if (fromCollection == null)  {
          log.error(""Request says it is coming from leader, but we are the leader: "" + req.getParamString());
          SolrException solrExc = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, ""Request says it is coming from leader, but we are the leader"");
          solrExc.setMetadata(""cause"", ""LeaderChanged"");
          throw solrExc;
        }
      }
    }

    int count = 0;
    while (((isLeader && !localIsLeader) || (isSubShardLeader && !localIsLeader)) && count < 5) {
      count++;
      // re-getting localIsLeader since we published to ZK first before setting localIsLeader value
      localIsLeader = cloudDesc.isLeader();
      try {
        Thread.sleep(500);
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }

    if ((isLeader && !localIsLeader) || (isSubShardLeader && !localIsLeader)) {
      log.error(""ClusterState says we are the leader, but locally we don't think so"");
      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,
          ""ClusterState says we are the leader ("" + zkController.getBaseUrl()
              + ""/"" + req.getCore().getName() + ""), but locally we don't think so. Request came from "" + from);
    }
  }"
6788928,none,"    public Input getInput() {
        return mInput;
    }"
7496080,none,"	@Override
	public byte[] dump(byte[] key) {

		Assert.notNull(key, ""Key must not be null!"");

		return connection.getClusterCommandExecutor()
				.executeCommandOnSingleNode((JedisClusterCommandCallback<byte[]>) client -> client.dump(key),
						connection.getTopologyProvider().getTopology().getKeyServingMasterNode(key))
				.getValue();
	}"
6972042,none,"  public static <E> SortedSetTestSuiteBuilder<E> using(TestSortedSetGenerator<E> generator) {
    SortedSetTestSuiteBuilder<E> builder = new SortedSetTestSuiteBuilder<E>();
    builder.usingGenerator(generator);
    return builder;
  }"
5005330,none,"  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
    if (otherArgs.length != 2) {
      System.err.println( ""Usage: wordcount <in> <out>"" );
      System.exit(2);
    }
    Job job = Job.getInstance(conf, ""Word Count"");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }"
4301165,none,"    public byte[] decryptData(byte[] dataEncrypted, int keyUsage) throws GSSException {
        byte[] ret;
        try {
            EncTypeHandler encHandler = EncryptionHandler.getEncHandler(encKey.getKeyType());
            ret = encHandler.decrypt(dataEncrypted, encKey.getKeyData(), keyUsage);
        } catch (KrbException e) {
            throw new GSSException(GSSException.FAILURE, -1, e.getMessage());
        }
        return ret;
    }"
6977042,none,"    @Override
    public boolean equals(@NullableDecl Object obj) {
      if (this == obj) {
        return true;
      }
      if (obj instanceof EquivalentToPredicate) {
        EquivalentToPredicate<?> that = (EquivalentToPredicate<?>) obj;
        return equivalence.equals(that.equivalence) && Objects.equal(target, that.target);
      }
      return false;
    }"
9126156,none,"	public synchronized static ColorPalette getInstance( )
	{
		if ( instance == null )
		{
			instance = new ColorPalette( );
		}
		return instance;
	}"
7108794,none,"    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
        int ws = pred.waitStatus;
        if (ws == Node.SIGNAL)
            /*
             * This node has already set status asking a release
             * to signal it, so it can safely park.
             */
            return true;
        if (ws > 0) {
            /*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */
            do {
                node.prev = pred = pred.prev;
            } while (pred.waitStatus > 0);
            pred.next = node;
        } else {
            /*
             * waitStatus must be 0 or PROPAGATE.  Indicate that we
             * need a signal, but don't park yet.  Caller will need to
             * retry to make sure it cannot acquire before parking.
             */
            pred.compareAndSetWaitStatus(ws, Node.SIGNAL);
        }
        return false;
    }"
6537386,none,"    private static String getInputLabel(TranslationProvider i18nProvider, Bundle bundle, String moduleTypeUID,
            String inputName, String defaultLabel, Locale locale) {
        String key = I18nUtil.stripConstantOr(defaultLabel, () -> inferInputKey(moduleTypeUID, inputName, ""label""));
        return i18nProvider.getText(bundle, key, defaultLabel, locale);
    }"
8151239,none,"        private void write(NIOConnection c) {
            try {
                c.writeByQueue();
            } catch (Throwable e) {
                c.error(ErrorCode.ERR_WRITE_BY_QUEUE, e);
            }
        }"
5596509,none,"    @Override
    public void emitPackageContents(IPackageDefinition definition)
    {
        IASScope containedScope = definition.getContainedScope();
        ITypeDefinition type = findType(containedScope.getAllLocalDefinitions());
        if (type == null)
            return;

        write(""function($exports"");

        exportWriter.queueExports(type, false);

        write("") {"");
        indentPush();
        writeNewline();
        write(""\""use strict\""; "");
        writeNewline();

        ITypeNode tnode = findTypeNode(definition.getNode());
        if (tnode != null)
        {
            getWalker().walk(tnode); // IClassNode | IInterfaceNode
        }

        indentPop();
        writeNewline();
        write(""}""); // end returned function
    }"
7882655,none,"    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchRuleKeyLogsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.ruleKeys = new java.util.ArrayList<java.lang.String>(_list184.size);
                java.lang.String _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = iprot.readString();
                  struct.ruleKeys.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setRuleKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPOSITORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repository = iprot.readString();
              struct.setRepositoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scheduleType = iprot.readString();
              struct.setScheduleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISTRIBUTED_BUILD_MODE_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.distributedBuildModeEnabled = iprot.readBool();
              struct.setDistributedBuildModeEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }"
7385102,none,"	private void reportAvailableDependencies(InitializrServiceMetadata metadata,
			StringBuilder report) {
		report.append(""Available dependencies:"").append(NEW_LINE);
		report.append(""-----------------------"").append(NEW_LINE);
		List<Dependency> dependencies = getSortedDependencies(metadata);
		for (Dependency dependency : dependencies) {
			report.append(dependency.getId()).append("" - "").append(dependency.getName());
			if (dependency.getDescription() != null) {
				report.append("": "").append(dependency.getDescription());
			}
			report.append(NEW_LINE);
		}
	}"
7097449,none,"    public synchronized Enumeration<V> elements() {
        return this.<V>getEnumeration(VALUES);
    }"
4302252,none,"    public int confounderSize() {
        return 16;
    }"
4073835,none,"    public GetLastLogMarkService(ServerConfiguration conf) {
        checkNotNull(conf);
        this.conf = conf;
    }"
7156185,none,"    public AddStorageAccountParameters withSuffix(String suffix) {
        if (this.properties == null) {
            this.properties = new Properties();
        }

        this.properties.suffix = suffix;
        return this;
    }"
6834699,none,		public Group getGroup_1_1() { return cGroup_1_1; }
9206273,none,"	public IAggrFunction getAggregation( String name )
	{
		return name != null ? (IAggrFunction) aggrMap.get( name.toUpperCase( ) )
				: null;
	}"
7551760,none,"	@Override
	public <T> T getValue(Class<T> desiredResultType) throws EvaluationException {
		return org.springframework.expression.common.ExpressionUtils
				.convertTypedValue(null, this.typedResultValue, desiredResultType);
	}"
6630204,none,"	private static boolean multiPointRelateEnvelope_(MultiPoint multipoint_a,
			Envelope envelope_b, double tolerance, int relation,
			ProgressTracker progress_tracker) {
		switch (relation) {
		case Relation.disjoint:
			return multiPointDisjointEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.within:
			return multiPointWithinEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.contains:
			return multiPointContainsEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.equals:
			return multiPointEqualsEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.touches:
			return multiPointTouchesEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.crosses:
			return multiPointCrossesEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		default:
			break; // warning fix
		}

		return false;
	}"
4514229,none,"   private static byte[] encodeBase64(byte[] binaryData, boolean isChunked)
   {
      int lengthDataBits = binaryData.length * EIGHTBIT;
      int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;
      int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;
      byte encodedData[] = null;
      int encodedDataLength = 0;
      int nbrChunks = 0;

      if (fewerThan24bits != 0)
      {
         //data not divisible by 24 bit
         encodedDataLength = (numberTriplets + 1) * 4;
      }
      else
      {
         // 16 or 8 bit
         encodedDataLength = numberTriplets * 4;
      }

      // If the output is to be ""chunked"" into 76 character sections,
      // for compliance with RFC 2045 MIME, then it is important to
      // allow for extra length to account for the separator(s)
      if (isChunked)
      {

         nbrChunks =
                 (CHUNK_SEPARATOR.length == 0
                 ? 0
                 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));
         encodedDataLength += nbrChunks * CHUNK_SEPARATOR.length;
      }

      encodedData = new byte[encodedDataLength];

      byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;

      int encodedIndex = 0;
      int dataIndex = 0;
      int i = 0;
      int nextSeparatorIndex = CHUNK_SIZE;
      int chunksSoFar = 0;

      //log.debug(""number of triplets = "" + numberTriplets);
      for (i = 0; i < numberTriplets; i++)
      {
         dataIndex = i * 3;
         b1 = binaryData[dataIndex];
         b2 = binaryData[dataIndex + 1];
         b3 = binaryData[dataIndex + 2];

         //log.debug(""b1= "" + b1 +"", b2= "" + b2 + "", b3= "" + b3);

         l = (byte)(b2 & 0x0f);
         k = (byte)(b1 & 0x03);

         byte val1 =
                 ((b1 & SIGN) == 0)
                 ? (byte)(b1 >> 2)
                 : (byte)((b1) >> 2 ^ 0xc0);
         byte val2 =
                 ((b2 & SIGN) == 0)
                 ? (byte)(b2 >> 4)
                 : (byte)((b2) >> 4 ^ 0xf0);
         byte val3 =
                 ((b3 & SIGN) == 0)
                 ? (byte)(b3 >> 6)
                 : (byte)((b3) >> 6 ^ 0xfc);

         encodedData[encodedIndex] = lookUpBase64Alphabet[val1];
         //log.debug( ""val2 = "" + val2 );
         //log.debug( ""k4   = "" + (k<<4) );
         //log.debug(  ""vak  = "" + (val2 | (k<<4)) );
         encodedData[encodedIndex + 1] =
                 lookUpBase64Alphabet[val2 | (k << 4)];
         encodedData[encodedIndex + 2] =
                 lookUpBase64Alphabet[(l << 2) | val3];
         encodedData[encodedIndex + 3] = lookUpBase64Alphabet[b3 & 0x3f];

         encodedIndex += 4;

         // If we are chunking, let's put a chunk separator down.
         if (isChunked)
         {
            // this assumes that CHUNK_SIZE % 4 == 0
            if (encodedIndex == nextSeparatorIndex)
            {
               System.arraycopy(
                       CHUNK_SEPARATOR,
                       0,
                       encodedData,
                       encodedIndex,
                       CHUNK_SEPARATOR.length);
               chunksSoFar++;
               nextSeparatorIndex =
                       (CHUNK_SIZE * (chunksSoFar + 1))
                       + (chunksSoFar * CHUNK_SEPARATOR.length);
               encodedIndex += CHUNK_SEPARATOR.length;
            }
         }
      }

      // form integral number of 6-bit groups
      dataIndex = i * 3;

      if (fewerThan24bits == EIGHTBIT)
      {
         b1 = binaryData[dataIndex];
         k = (byte)(b1 & 0x03);
         //log.debug(""b1="" + b1);
         //log.debug(""b1<<2 = "" + (b1>>2) );
         byte val1 =
                 ((b1 & SIGN) == 0)
                 ? (byte)(b1 >> 2)
                 : (byte)((b1) >> 2 ^ 0xc0);
         encodedData[encodedIndex] = lookUpBase64Alphabet[val1];
         encodedData[encodedIndex + 1] = lookUpBase64Alphabet[k << 4];
         encodedData[encodedIndex + 2] = PAD;
         encodedData[encodedIndex + 3] = PAD;
      }
      else if (fewerThan24bits == SIXTEENBIT)
      {

         b1 = binaryData[dataIndex];
         b2 = binaryData[dataIndex + 1];
         l = (byte)(b2 & 0x0f);
         k = (byte)(b1 & 0x03);

         byte val1 =
                 ((b1 & SIGN) == 0)
                 ? (byte)(b1 >> 2)
                 : (byte)((b1) >> 2 ^ 0xc0);
         byte val2 =
                 ((b2 & SIGN) == 0)
                 ? (byte)(b2 >> 4)
                 : (byte)((b2) >> 4 ^ 0xf0);

         encodedData[encodedIndex] = lookUpBase64Alphabet[val1];
         encodedData[encodedIndex + 1] =
                 lookUpBase64Alphabet[val2 | (k << 4)];
         encodedData[encodedIndex + 2] = lookUpBase64Alphabet[l << 2];
         encodedData[encodedIndex + 3] = PAD;
      }

      if (isChunked)
      {
         // we also add a separator to the end of the final chunk.
         if (chunksSoFar < nbrChunks)
         {
            System.arraycopy(
                    CHUNK_SEPARATOR,
                    0,
                    encodedData,
                    encodedDataLength - CHUNK_SEPARATOR.length,
                    CHUNK_SEPARATOR.length);
         }
      }

      return encodedData;
   }"
4475154,none,"	static boolean isPronoun (Markable m) {
		if (m.getContent() instanceof BaseToken) {
			BaseToken t = (BaseToken) m.getContent();
			if (t.getPartOfSpeech().startsWith(""PRP"")) // TODO: since only 3rd person pronouns are added as markables, no need to check
				return true;
		}
		return false;
	}"
4140191,none,"  public static <T, TResult> Queryable<TResult> selectManyN(Queryable<T> source,
      FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector) {
    throw Extensions.todo();
  }"
4276035,none,"    AdamsFieldStepInterpolator(final T stepSize, final FieldODEStateAndDerivative<T> reference,
                               final T[] scaled, final Array2DRowFieldMatrix<T> nordsieck,
                               final boolean isForward,
                               final FieldODEStateAndDerivative<T> globalPreviousState,
                               final FieldODEStateAndDerivative<T> globalCurrentState,
                               final FieldEquationsMapper<T> equationsMapper) {
        this(stepSize, reference, scaled, nordsieck,
             isForward, globalPreviousState, globalCurrentState,
             globalPreviousState, globalCurrentState, equationsMapper);
    }"
4242573,none,"    public static void throwCauseIfTaggedWith(final Throwable throwable, final Object tag)
            throws IOException {
        if (isTaggedWith(throwable, tag)) {
            throw ((TaggedIOException) throwable).getCause();
        }
    }"
7992491,none,"	@Check
	public void checkNoForwardReferences(XExpression fieldInitializer) {
		JvmIdentifiableElement container = logicalContainerProvider.getLogicalContainer(fieldInitializer);
		if (container instanceof JvmField) {
			JvmField field = (JvmField) container;
			boolean staticField = field.isStatic();
			JvmDeclaredType declaredType = field.getDeclaringType();
			if (declaredType == null) {
				return;
			}
			Collection<JvmField> illegalFields = Sets.newHashSet();
			for(int i = declaredType.getMembers().size() - 1; i>=0; i--) {
				JvmMember member = declaredType.getMembers().get(i);
				if (member instanceof JvmField) {
					if (((JvmField) member).isStatic() == staticField) {
						illegalFields.add((JvmField) member);
					}
				}
				if (member == field)
					break;
			}
			TreeIterator<EObject> iterator = EcoreUtil2.eAll(fieldInitializer);
			while(iterator.hasNext()) {
				EObject object = iterator.next();
				if (object instanceof XFeatureCall) {
					JvmIdentifiableElement feature = ((XFeatureCall) object).getFeature();
					if (illegalFields.contains(((XFeatureCall) object).getFeature())) {
						error(""Cannot reference the field '"" + feature.getSimpleName() + ""' before it is defined"", 
								object, null, INSIGNIFICANT_INDEX, ILLEGAL_FORWARD_REFERENCE);
					}
				} else if (isLocalClassSemantics(object)) {
					iterator.prune();
				}
			}
		}
	}"
6517482,none,"		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().
					getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
		}"
5982466,none,"    @Override
    @SuppressWarnings(""unchecked"")
    public int executeUpdate(final String inSql) throws SQLException {
        this.sql = inSql;
        if (this.sql == null) {
            throw new SQLException(""sql is null"");
        }

        trimSQL();

        if (this.sql.length() == 0) {
            throw new SQLException(""empty sql"");
        }

        String lowcaseSql = this.sql.toLowerCase();

        Object req = null;
        // TODO use patterns
        if (lowcaseSql.startsWith(""create domain"") || lowcaseSql.startsWith(""create table"")) { //$NON-NLS-1$
            int pos = this.sql.lastIndexOf("" "");
            String domain = convertSQLIdentifierToCatalogFormat(this.sql.substring(pos + 1).trim(),
                    DELIMITED_IDENTIFIER_QUOTE);
            req = new CreateDomainRequest().withDomainName(domain);
        } else if (lowcaseSql.startsWith(""delete domain"") || lowcaseSql.startsWith(""delete table"") //$NON-NLS-1$
                || lowcaseSql.startsWith(""drop table"")) {
            int pos = this.sql.lastIndexOf("" "");
            String domain = convertSQLIdentifierToCatalogFormat(this.sql.substring(pos + 1).trim(),
                    DELIMITED_IDENTIFIER_QUOTE);
            List<String> pending = this.conn.getPendingColumns(domain);
            if (pending != null) {
                pending = new ArrayList<>(pending);
                for (String attr : pending) {
                    this.conn.removePendingColumn(domain, attr);
                }
            }
            req = new DeleteDomainRequest().withDomainName(domain);
        } else if (lowcaseSql.startsWith(""delete from"")) {
            req = prepareDeleteRowRequest();
        } else if (lowcaseSql.startsWith(""alter table "")) {
            req = prepareDropAttributeRequest();
        } else if (lowcaseSql.startsWith(""insert "")) {
            req = prepareInsertRequest();
        } else if (lowcaseSql.startsWith(""update "")) {
            req = prepareUpdateRequest();
        } else if (lowcaseSql.startsWith(""create testdomain "")) {
            req = new ArrayList<>();

            String domain = convertSQLIdentifierToCatalogFormat(this.sql.substring(this.sql.lastIndexOf("" "") + 1).trim(), //$NON-NLS-1$
                    DELIMITED_IDENTIFIER_QUOTE);
            ((List<Object>) req).add(new CreateDomainRequest().withDomainName(domain));

            ReplaceableAttribute attr  = new ReplaceableAttribute().withName(""attr1"").withValue(""val1"").withReplace(Boolean.TRUE);
            for (int i = 0; i < 570; i++) {
                ((List<Object>) req).add(new PutAttributesRequest().withDomainName(domain).withItemName(""item"" + i).withAttributes(attr));
            }
        }

        if (req != null) {
            int result = executeSDBRequest(req);
            if (this.params != null) {
                for (Object obj : this.params) {
                    if (obj instanceof SimpleDBItemName) {
                        ((SimpleDBItemName) obj).setPersisted(true);
                    }
                }
            }
            return result;
        }

        throw new SQLException(""unsupported update: "" + this.sql);
    }"
6234592,none,"    public final void rule__MdCategory__Group_4_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalMetaData.g:6468:1: ( ( ( rule__MdCategory__LabelAssignment_4_0_1 ) ) )
            // InternalMetaData.g:6469:1: ( ( rule__MdCategory__LabelAssignment_4_0_1 ) )
            {
            // InternalMetaData.g:6469:1: ( ( rule__MdCategory__LabelAssignment_4_0_1 ) )
            // InternalMetaData.g:6470:2: ( rule__MdCategory__LabelAssignment_4_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMdCategoryAccess().getLabelAssignment_4_0_1()); 
            }
            // InternalMetaData.g:6471:2: ( rule__MdCategory__LabelAssignment_4_0_1 )
            // InternalMetaData.g:6471:3: rule__MdCategory__LabelAssignment_4_0_1
            {
            pushFollow(FOLLOW_2);
            rule__MdCategory__LabelAssignment_4_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMdCategoryAccess().getLabelAssignment_4_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
7900945,none,"      private void printRemove(ParsedRuleKeyFile file, Value value) {
        diffPrinter.printRemove(
            String.format(
                ""%s: %s"", String.join(""/"", pathComponents), valueAsReadableString(file, value)));
      }"
3868102,none,"  public String getDefaultPrompt() {
    Objects.requireNonNull(accumuloClient);
    ClientInfo info = ClientInfo.from(accumuloClient.properties());
    return accumuloClient.whoami() + ""@"" + info.getInstanceName()
        + (getTableName().isEmpty() ? """" : "" "") + getTableName() + ""> "";
  }"
9156673,none,"	public Object getProperty( String name )
	{
		FactoryPropertyHandle factoryPropHandle = style.getFactoryPropertyHandle( name );
		if (factoryPropHandle == null)
			return null;
		
		return factoryPropHandle.getValue( );
	}"
7883291,none,"  @Override
  public void clear() {
    this.path = null;
  }"
8009299,none,"	public TitaniumDAGLayout(final Graph<V, E> g, final Dimension size) {
		super(g, size);
	}"
8181080,none,"    public long getConsumerFailoverRedeliveryWaitPeriod() {
        return consumerFailoverRedeliveryWaitPeriod;
    }"
9534674,none,"  public boolean checkVolume(final HddsVolume volume, Callback callback) {
    if (volume == null) {
      LOG.debug(""Cannot schedule check on null volume"");
      return false;
    }

    Optional<ListenableFuture<VolumeCheckResult>> olf =
        delegateChecker.schedule(volume, null);
    if (olf.isPresent()) {
      numVolumeChecks.incrementAndGet();
      Futures.addCallback(olf.get(),
          new ResultHandler(volume, new HashSet<>(), new HashSet<>(),
              new AtomicLong(1), callback),
          checkVolumeResultHandlerExecutorService
      );
      return true;
    }
    return false;
  }"
8812297,none,"    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CS_EXCEPTION:
        return getCsException();

      }
      throw new IllegalStateException();
    }"
7761185,none,"  @Override
  public int hashCode()
  {
    int result = name.hashCode();
    result = 31 * result + field.hashCode();
    result = 31 * result + (errorBoundsStdDev != null ? errorBoundsStdDev.hashCode() : 0);
    return result;
  }"
8614637,none,"    public boolean isAccessed() {
        return accessed;
    }"
4901849,none,"        @Override
        public void propertyChanged(PropertyState before, PropertyState after) throws CommitFailedException {
            String propertyName = after.getName();
            if (TOKEN_ATTRIBUTE_KEY.equals(propertyName)) {
                String msg = ""Attempt to change reserved token property "" + propertyName;
                throw constraintViolation(61, msg);
            } else if (TOKEN_ATTRIBUTE_EXPIRY.equals(propertyName)) {
                verifyCommitInfo();
            } else if (JcrConstants.JCR_PRIMARYTYPE.equals(propertyName)) {
                if (TOKEN_NT_NAME.equals(after.getValue(Type.STRING))) {
                    throw constraintViolation(62, ""Changing primary type of existing node to the reserved token node type."");
                }
                if (isTokensParent(parentAfter) && TOKENS_NT_NAME.equals(before.getValue(Type.STRING))) {
                    throw constraintViolation(69, ""Cannot change the primary type of an existing .tokens node."");
                }
            }
        }"
4694769,none,"  @Override
  public AgentStateModel createNewStateModel(String resourceName, String partitionKey) {
    AgentStateModel model = new AgentStateModel();
    return model;
  }"
7876519,none,"  public ImmutableList<BuildLogEntry> getBuildLogs() throws IOException {
    // Remove commands with unknown args or invocations of buck rage.
    // Sort the remaining logs based on time, reverse order.
    ImmutableList.Builder<BuildLogEntry> logEntries = ImmutableList.builder();
    for (Path logFile : getAllBuckLogFiles()) {
      BuildLogEntry entry = newBuildLogEntry(logFile);
      if (entry.getCommandArgs().isPresent()
          && entry.getCommandArgs().get().size() > 0
          && !entry.getCommandArgs().get().get(0).matches(""^(rage|doctor|server|launch)$"")) {
        logEntries.add(newBuildLogEntry(logFile));
      }
    }
    return logEntries
        .build()
        .stream()
        .sorted(Comparator.comparing(BuildLogEntry::getLastModifiedTime).reversed())
        .collect(ImmutableList.toImmutableList());
  }"
7385876,none,"    @Before
    public void setup() throws Exception {
        RepositoryFactorySupport factory = new CouchbaseRepositoryFactory(operationsMapping, indexManager);
        bookRepository = factory.getRepository(BookRepository.class);
        authorRepository = factory.getRepository(AuthorRepository.class);
        addressRepository = factory.getRepository(AddressRepository.class);
    }"
9205375,none,"	public void endContainer( IContainerContent container )
			throws BirtException
	{
		_endContainer( container );
	}"
4430308,none,"    public IndexDefinition[] getIndexes() {
        return indexes;
    }"
6533723,none,"    protected void removeProfileTypeProvider(ProfileTypeProvider profileTypeProvider) {
        profileTypeProviders.remove(profileTypeProvider);
    }"
8999751,none,"                private boolean r_prelude() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
                    // (, line 34
                    // test, line 35
                    v_1 = cursor;
                    // repeat, line 35
                    replab0: while(true)
                    {
                        v_2 = cursor;
                        lab1: do {
                            // (, line 35
                            // [, line 36
                            bra = cursor;
                            // substring, line 36
                            among_var = find_among(a_0, 7);
                            if (among_var == 0)
                            {
                                break lab1;
                            }
                            // ], line 36
                            ket = cursor;
                            switch(among_var) {
                                case 0:
                                    break lab1;
                                case 1:
                                    // (, line 37
                                    // <-, line 37
                                    slice_from(""\u00E0"");
                                    break;
                                case 2:
                                    // (, line 38
                                    // <-, line 38
                                    slice_from(""\u00E8"");
                                    break;
                                case 3:
                                    // (, line 39
                                    // <-, line 39
                                    slice_from(""\u00EC"");
                                    break;
                                case 4:
                                    // (, line 40
                                    // <-, line 40
                                    slice_from(""\u00F2"");
                                    break;
                                case 5:
                                    // (, line 41
                                    // <-, line 41
                                    slice_from(""\u00F9"");
                                    break;
                                case 6:
                                    // (, line 42
                                    // <-, line 42
                                    slice_from(""qU"");
                                    break;
                                case 7:
                                    // (, line 43
                                    // next, line 43
                                    if (cursor >= limit)
                                    {
                                        break lab1;
                                    }
                                    cursor++;
                                    break;
                            }
                            continue replab0;
                        } while (false);
                        cursor = v_2;
                        break replab0;
                    }
                    cursor = v_1;
                    // repeat, line 46
                    replab2: while(true)
                    {
                        v_3 = cursor;
                        lab3: do {
                            // goto, line 46
                            golab4: while(true)
                            {
                                v_4 = cursor;
                                lab5: do {
                                    // (, line 46
                                    if (!(in_grouping(g_v, 97, 249)))
                                    {
                                        break lab5;
                                    }
                                    // [, line 47
                                    bra = cursor;
                                    // or, line 47
                                    lab6: do {
                                        v_5 = cursor;
                                        lab7: do {
                                            // (, line 47
                                            // literal, line 47
                                            if (!(eq_s(1, ""u"")))
                                            {
                                                break lab7;
                                            }
                                            // ], line 47
                                            ket = cursor;
                                            if (!(in_grouping(g_v, 97, 249)))
                                            {
                                                break lab7;
                                            }
                                            // <-, line 47
                                            slice_from(""U"");
                                            break lab6;
                                        } while (false);
                                        cursor = v_5;
                                        // (, line 48
                                        // literal, line 48
                                        if (!(eq_s(1, ""i"")))
                                        {
                                            break lab5;
                                        }
                                        // ], line 48
                                        ket = cursor;
                                        if (!(in_grouping(g_v, 97, 249)))
                                        {
                                            break lab5;
                                        }
                                        // <-, line 48
                                        slice_from(""I"");
                                    } while (false);
                                    cursor = v_4;
                                    break golab4;
                                } while (false);
                                cursor = v_4;
                                if (cursor >= limit)
                                {
                                    break lab3;
                                }
                                cursor++;
                            }
                            continue replab2;
                        } while (false);
                        cursor = v_3;
                        break replab2;
                    }
                    return true;
                }"
4772031,none,"  @Override
  public double probabilityOfAttributeValueGivenClass(double attVal,
      int classVal) {
    DoubleVector obs = this.attValDistPerClass.get(classVal);
    return obs != null ? (obs.getValue((int) attVal) + 1.0)
        / (obs.sumOfValues() + obs.numValues()) : 0.0;
  }"
5717998,none,"	private static void countCompiledInstructions(ProgramBlock pb, ExplainCounts counts, boolean MR, boolean CP, boolean SP) 
	{
		if (pb instanceof WhileProgramBlock)
		{
			WhileProgramBlock tmp = (WhileProgramBlock)pb;
			countCompiledInstructions(tmp.getPredicate(), counts, MR, CP, SP);
			for (ProgramBlock pb2 : tmp.getChildBlocks())
				countCompiledInstructions(pb2, counts, MR, CP, SP);
		}
		else if (pb instanceof IfProgramBlock)
		{
			IfProgramBlock tmp = (IfProgramBlock)pb;	
			countCompiledInstructions(tmp.getPredicate(), counts, MR, CP, SP);
			for( ProgramBlock pb2 : tmp.getChildBlocksIfBody() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
			for( ProgramBlock pb2 : tmp.getChildBlocksElseBody() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
		}
		else if (pb instanceof ForProgramBlock) //includes ParFORProgramBlock
		{ 
			ForProgramBlock tmp = (ForProgramBlock)pb;	
			countCompiledInstructions(tmp.getFromInstructions(), counts, MR, CP, SP);
			countCompiledInstructions(tmp.getToInstructions(), counts, MR, CP, SP);
			countCompiledInstructions(tmp.getIncrementInstructions(), counts, MR, CP, SP);
			for( ProgramBlock pb2 : tmp.getChildBlocks() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
			//additional parfor jobs counted during runtime
		}		
		else if (  pb instanceof FunctionProgramBlock ) //includes ExternalFunctionProgramBlock and ExternalFunctionProgramBlockCP
		{
			FunctionProgramBlock fpb = (FunctionProgramBlock)pb;
			for( ProgramBlock pb2 : fpb.getChildBlocks() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
		}
		else 
		{
			countCompiledInstructions(pb.getInstructions(), counts, MR, CP, SP);
		}
	}"
4298894,none,"    private LdapConnectionProvider()
    {
        init();
    }"
5840527,none,"  final public void DynamicExpression() throws ParseException {
                                               /*@bgen(jjtree) DynamicExpression */
  AstDynamicExpression jjtn000 = new AstDynamicExpression(JJTDYNAMICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_DYNAMIC_EXPRESSION);
      Expression();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }"
5111196,none,"    public void finishUp() throws InterruptedException, IOException {
      join();
      Throwable thr = exception;
      if (thr != null) {
        if (thr instanceof IOException) {
          throw (IOException) thr;
        } else if (thr instanceof RuntimeException) {
          throw (RuntimeException) thr;
        } else {
          throw (Error) thr;
        }
      }
    }"
7026284,none,"  public void scanLibrary(boolean waitTillComplete)
  {
    doThoroughLibScan = true;
    establishMountPoints();
    if (!waitTillComplete)
      libraryImportScan();
    else
    {
      synchronized (importLock)
      {
        libraryImportScan();
        while (currentlyImporting)
        {
          try { importLock.wait(0);}catch(InterruptedException e){}
        }
      }
    }
  }"
6486798,none,"		public String getName()
		{
			String lowerResult = lower.getName();
			String upperResult = upper.getName();
			
			if (lowerResult != null) {
				if (upperResult != null) {
					return lowerResult + "" merged with "" + upperResult;
				} else {
					return lowerResult;
				}
			} else {
				if (upperResult != null) {
					return upperResult;
				} else {
					return null;
				}
			}
		}"
4101390,none,"    @Override
    public <T> Set<ConstraintViolation<T>> validateParameters(T object, Method method, Object[] parameterValues,
        Class<?>... groups) {
        return validationJobFactory.validateParameters(object, method, parameterValues, groups).getResults();
    }"
7951909,none,"	public boolean hasNext() {
		return currentRecord < logRecordIndexes.length - 1;
	}"
3719020,none,"        private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,
                int maxMethodIdsInClass, int maxFieldIdsInClass) {
            this.name = name;
            this.futureClazz = futureClazz;
            this.maxMethodIdsInClass = maxMethodIdsInClass;
            this.maxFieldIdsInClass = maxFieldIdsInClass;
        }"
4586123,none,"    public int bidiLevelAt(int position) throws IndexOutOfBoundsException {
        if ((position < 0) || (position >= length())) {
            throw new IndexOutOfBoundsException();
        } else if (bidiLevels != null) {
            return bidiLevels [ position ];
        } else {
            return -1;
        }
    }"
6533221,none,"    private BundleEvent initializeEvent(Bundle bundle) {
        switch (bundle.getState()) {
            case Bundle.INSTALLED:
                return new BundleEvent(BundleEvent.INSTALLED, bundle);
            case Bundle.RESOLVED:
                return new BundleEvent(BundleEvent.RESOLVED, bundle);
            default:
                return new BundleEvent(BundleEvent.STARTED, bundle);
        }
    }"
4602827,none,"    @Override
    public void writeEdge(I srcId, V srcValue, Edge<I, E> edge)
      throws IOException, InterruptedException {

      if (txcounter == txsize) {
        txcounter = 0;
        isFirstElement = true;
        stopConnection();
        startConnection();
      }

      try {
        JSONObject jsonEdge;
        String suffix;

        /* extract the JSON object of the vertex */
        jsonEdge = getEdge(srcId, srcValue, edge);
        /* determine the suffix to add the object into the JSON array */
        if (isFirstElement) {
          isFirstElement = false;
          suffix = """";
        } else {
          suffix = "","";
        }
        rexsterBufferedStream.write(suffix + jsonEdge);
        txcounter += 1;

      } catch (JSONException e) {
        throw new InterruptedException(""Error writing the edge: "" +
                                       e.getMessage());
      }
    }"
6989848,none,"  public static <T, K, V> Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(
      Function<? super T, ? extends K> keyFunction,
      Function<? super T, ? extends V> valueFunction) {
    checkNotNull(keyFunction, ""keyFunction"");
    checkNotNull(valueFunction, ""valueFunction"");
    return Collector.of(
        ImmutableSetMultimap::<K, V>builder,
        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),
        ImmutableSetMultimap.Builder::combine,
        ImmutableSetMultimap.Builder::build);
  }"
6889571,none,"	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case TypesPackage.TCONSTABLE_ELEMENT__CONST:
				setConst(CONST_EDEFAULT);
				return;
			case TypesPackage.TCONSTABLE_ELEMENT__COMPILE_TIME_VALUE:
				setCompileTimeValue(COMPILE_TIME_VALUE_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}"
3812099,none,"   @Override
   public boolean equals(final Object other) {
      if (this == other) {
         return true;
      }
      if (!(other instanceof Xid)) {
         return false;
      }
      Xid xother = (Xid) other;
      if (xother.getFormatId() != formatId) {
         return false;
      }
      if (xother.getBranchQualifier().length != branchQualifier.length) {
         return false;
      }
      if (xother.getGlobalTransactionId().length != globalTransactionId.length) {
         return false;
      }
      for (int i = 0; i < branchQualifier.length; i++) {
         byte[] otherBQ = xother.getBranchQualifier();
         if (branchQualifier[i] != otherBQ[i]) {
            return false;
         }
      }
      for (int i = 0; i < globalTransactionId.length; i++) {
         byte[] otherGtx = xother.getGlobalTransactionId();
         if (globalTransactionId[i] != otherGtx[i]) {
            return false;
         }
      }
      return true;
   }"
5690366,none,"        public BundleConfigurationProvider(String filename, Bundle bundle, BundleContext bundleContext) {
            super(filename, false);
            this.bundle = bundle;
            this.bundleContext = bundleContext;
        }"
9484885,none,"  protected void createAInfo(ServiceRecord record) throws Exception {
    AContainerRecordDescriptor recordInfo = new AContainerRecordDescriptor(
        getPath(), record);
    registerRecordDescriptor(Type.A, recordInfo);
  }"
6125015,none,"    @Override
    public <V extends Comparable<? super V>> MutableList<T> toSortedListBy(Function<? super T, ? extends V> function)
    {
        return this.delegate.toSortedListBy(function);
    }"
9323339,none,"  private Frame senderForInterpreterFrame(X86RegisterMap map) {
    if (DEBUG) {
      System.out.println(""senderForInterpreterFrame"");
    }
    Address unextendedSP = addressOfStackSlot(INTERPRETER_FRAME_SENDER_SP_OFFSET).getAddressAt(0);
    Address sp = addressOfStackSlot(SENDER_SP_OFFSET);
    // We do not need to update the callee-save register mapping because above
    // us is either another interpreter frame or a converter-frame, but never
    // directly a compiled frame.
    // 11/24/04 SFG. With the removal of adapter frames this is no longer true.
    // However c2 no longer uses callee save register for java calls so there
    // are no callee register to find.

    if (map.getUpdateMap())
      updateMapWithSavedLink(map, addressOfStackSlot(LINK_OFFSET));

    return new X86Frame(sp, unextendedSP, getLink(), getSenderPC());
  }"
8903115,none,"  @Override
  public int compareTo(RecordIdentifier other) {
    if (other.getClass() != RecordIdentifier.class) {
      //WTF?  assumes that other instanceof OrcRawRecordMerger.ReaderKey???
      return -other.compareTo(this);
    }
    return compareToInternal(other);
  }"
6207748,none,"    public final void mT__122() throws RecognitionException {
        try {
            int _type = T__122;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalMetaData.g:120:8: ( '|' )
            // InternalMetaData.g:120:10: '|'
            {
            match('|'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
9413571,none,"    HostAddress[] readAddr() throws IOException, KrbApErrException {
        int numAddrs, addrType, addrLength;
        numAddrs = readLength4();
        if (numAddrs > 0) {
            List<HostAddress> addrs = new ArrayList<>();
            for (int i = 0; i < numAddrs; i++) {
                addrType = read(2);
                addrLength = readLength4();
                if (!(addrLength == 4 || addrLength == 16)) {
                    if (DEBUG) {
                        System.out.println(""Incorrect address format."");
                    }
                    return null;
                }
                byte[] result = new byte[addrLength];
                for (int j = 0; j < addrLength; j++)
                    result[j] = (byte)read(1);
                addrs.add(new HostAddress(addrType, result));
            }
            return addrs.toArray(new HostAddress[addrs.size()]);
        }
        return null;
    }"
4688226,none,"  @Override
  public void writeByte(int v) throws IOException {
    ensureSize(ByteUtils.SIZE_OF_BYTE);
    UNSAFE.putByte(buf, BYTE_ARRAY_OFFSET + pos, (byte) v);
    pos += ByteUtils.SIZE_OF_BYTE;
  }"
8622582,none,"    public ClientListenerResponse doHandle(OdbcRequest req) {
        if (!busyLock.enterBusy())
            return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,
                ""Failed to handle ODBC request because node is stopping: "" + req);

        if (actx != null)
            AuthorizationContext.context(actx);

        try {
            switch (req.command()) {
                case QRY_EXEC:
                    return executeQuery((OdbcQueryExecuteRequest)req);

                case QRY_EXEC_BATCH:
                    return executeBatchQuery((OdbcQueryExecuteBatchRequest)req);

                case STREAMING_BATCH:
                    return dispatchBatchOrdered((OdbcStreamingBatchRequest)req);

                case QRY_FETCH:
                    return fetchQuery((OdbcQueryFetchRequest)req);

                case QRY_CLOSE:
                    return closeQuery((OdbcQueryCloseRequest)req);

                case META_COLS:
                    return getColumnsMeta((OdbcQueryGetColumnsMetaRequest)req);

                case META_TBLS:
                    return getTablesMeta((OdbcQueryGetTablesMetaRequest)req);

                case META_PARAMS:
                    return getParamsMeta((OdbcQueryGetParamsMetaRequest)req);

                case MORE_RESULTS:
                    return moreResults((OdbcQueryMoreResultsRequest)req);
            }

            return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN, ""Unsupported ODBC request: "" + req);
        }
        finally {
            AuthorizationContext.clear();

            busyLock.leaveBusy();
        }
    }"
6984582,none,"  public void test() {
    SubNumber sn = new SubNumber();
    assertTrue((this.equals(sn)));
    assertTrue((equals(sn)));
    assertTrue((!equals(new Object())));

    assertTrue((this.hashCode() == 100));
    assertTrue((hashCode() == 100));

    assertTrue((toString().equals(this.toString())));

    assertTrue((getClass() instanceof Class));
    assertTrue((getClass().equals(this.getClass())));
  }"
7094260,none,"  public int peek(int n)
  {
    try {
      return m_map[m_firstFree-(1+n)];
    }
    catch (ArrayIndexOutOfBoundsException e)
    {
      throw new EmptyStackException();
    }
  }"
8431225,none,"    @Override
    protected void configureFormat(FixedWidthFormat format) {
        super.configureFormat(format);

        if (padding != null) {
            format.setPadding(padding);
        }
    }"
7090476,none,"        public boolean equals(Object o) {
            Object k, v; Map.Entry<?,?> e;
            return ((o instanceof Map.Entry) &&
                    (k = (e = (Map.Entry<?,?>)o).getKey()) != null &&
                    (v = e.getValue()) != null &&
                    (k == key || k.equals(key)) &&
                    (v == val || v.equals(val)));
        }"
7379441,none,"		PropertySpecifier(String path) {

			Assert.hasText(path, ""Path must not be null/empty!"");
			this.path = path;

			this.stringMatcher = null;
			this.ignoreCase = null;
			this.valueTransformer = NoOpPropertyValueTransformer.INSTANCE;
		}"
9115884,none,"	private ColorHandle doGetColorHandle( String memberName )
	{
		return new ColorHandle( getElementHandle( ), StructureContextUtil
				.createStructureContext( this, memberName ) );
	}"
4721410,none,"    private void positionWriterAtCheckpoint() {
        writerChkptDK = new CheckpointDataKey(jobExecutionImpl.getJobInstance().getInstanceId(), step.getId(), CheckpointType.WRITER);

        CheckpointData writerData = persistenceManagerService.getCheckpointData(writerChkptDK);
        try {
            // check for data in backing store
            if (writerData != null) {
                byte[] writertoken = writerData.getRestartToken();
                TCCLObjectInputStream writerOIS;
                try {
                    writerProxy.open((Serializable) dataRepresentationService.toJavaRepresentation(writertoken));
                } catch (Exception ex) {
                    // is this what I should be throwing here?
                    throw new BatchContainerServiceException(""Cannot read the checkpoint data for ["" + step.getId() + ""]"", ex);
                }
            } else {
                // no chkpt data exists in the backing store
                writerData = null;
                try {
                    writerProxy.open(null);
                } catch (Exception ex) {
                    throw new BatchContainerServiceException(""Cannot open the step ["" + step.getId() + ""]"", ex);
                }
            }
        } catch (ClassCastException e) {
            throw new IllegalStateException(""Expected CheckpointData but found"" + writerData);
        }
    }"
4661344,none,"    @SuppressWarnings(""unchecked"")
    private Comparable increment(Object value, Number step) {
        return (Comparable) plus((Number) value, step);
    }"
4301429,none,"    protected void toBytes() {
        byte[] bytes = ByteBuffer.allocate(4).putInt(getValue().getValue()).array();
        setBytes(bytes);
    }"
3986210,none,"    public static Class<?> createProxyClass(ClassLoader mainTypeClassLoader, Class<?>[] interfaces) {
        ClassLoader effectiveClassLoader = Thread.currentThread().getContextClassLoader();
        if (effectiveClassLoader == null) {
            effectiveClassLoader = mainTypeClassLoader;
        }
        return Proxy.getProxyClass(effectiveClassLoader, interfaces);
    }"
7576371,none,"		@Override
		@Nullable
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			// Invocation on EntityManager interface coming in...

			if (method.getName().equals(""equals"")) {
				// Only consider equal when proxies are identical.
				return (proxy == args[0]);
			}
			else if (method.getName().equals(""hashCode"")) {
				// Use hashCode of EntityManager proxy.
				return hashCode();
			}
			else if (method.getName().equals(""toString"")) {
				// Deliver toString without touching a target EntityManager.
				return ""Shared EntityManager proxy for target factory ["" + this.targetFactory + ""]"";
			}
			else if (method.getName().equals(""getEntityManagerFactory"")) {
				// JPA 2.0: return EntityManagerFactory without creating an EntityManager.
				return this.targetFactory;
			}
			else if (method.getName().equals(""getCriteriaBuilder"") || method.getName().equals(""getMetamodel"")) {
				// JPA 2.0: return EntityManagerFactory's CriteriaBuilder/Metamodel (avoid creation of EntityManager)
				try {
					return EntityManagerFactory.class.getMethod(method.getName()).invoke(this.targetFactory);
				}
				catch (InvocationTargetException ex) {
					throw ex.getTargetException();
				}
			}
			else if (method.getName().equals(""unwrap"")) {
				// JPA 2.0: handle unwrap method - could be a proxy match.
				Class<?> targetClass = (Class<?>) args[0];
				if (targetClass != null && targetClass.isInstance(proxy)) {
					return proxy;
				}
			}
			else if (method.getName().equals(""isOpen"")) {
				// Handle isOpen method: always return true.
				return true;
			}
			else if (method.getName().equals(""close"")) {
				// Handle close method: suppress, not valid.
				return null;
			}
			else if (method.getName().equals(""getTransaction"")) {
				throw new IllegalStateException(
						""Not allowed to create transaction on shared EntityManager - "" +
						""use Spring transactions or EJB CMT instead"");
			}

			// Determine current EntityManager: either the transactional one
			// managed by the factory or a temporary one for the given invocation.
			EntityManager target = EntityManagerFactoryUtils.doGetTransactionalEntityManager(
					this.targetFactory, this.properties, this.synchronizedWithTransaction);

			if (method.getName().equals(""getTargetEntityManager"")) {
				// Handle EntityManagerProxy interface.
				if (target == null) {
					throw new IllegalStateException(""No transactional EntityManager available"");
				}
				return target;
			}
			else if (method.getName().equals(""unwrap"")) {
				Class<?> targetClass = (Class<?>) args[0];
				if (targetClass == null) {
					return (target != null ? target : proxy);
				}
				// We need a transactional target now.
				if (target == null) {
					throw new IllegalStateException(""No transactional EntityManager available"");
				}
				// Still perform unwrap call on target EntityManager.
			}
			else if (transactionRequiringMethods.contains(method.getName())) {
				// We need a transactional target now, according to the JPA spec.
				// Otherwise, the operation would get accepted but remain unflushed...
				if (target == null || (!TransactionSynchronizationManager.isActualTransactionActive() &&
						!target.getTransaction().isActive())) {
					throw new TransactionRequiredException(""No EntityManager with actual transaction available "" +
							""for current thread - cannot reliably process '"" + method.getName() + ""' call"");
				}
			}

			// Regular EntityManager operations.
			boolean isNewEm = false;
			if (target == null) {
				logger.debug(""Creating new EntityManager for shared EntityManager invocation"");
				target = (!CollectionUtils.isEmpty(this.properties) ?
						this.targetFactory.createEntityManager(this.properties) :
						this.targetFactory.createEntityManager());
				isNewEm = true;
			}

			// Invoke method on current EntityManager.
			try {
				Object result = method.invoke(target, args);
				if (result instanceof Query) {
					Query query = (Query) result;
					if (isNewEm) {
						Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(query.getClass(), this.proxyClassLoader);
						result = Proxy.newProxyInstance(this.proxyClassLoader, ifcs,
								new DeferredQueryInvocationHandler(query, target));
						isNewEm = false;
					}
					else {
						EntityManagerFactoryUtils.applyTransactionTimeout(query, this.targetFactory);
					}
				}
				return result;
			}
			catch (InvocationTargetException ex) {
				throw ex.getTargetException();
			}
			finally {
				if (isNewEm) {
					EntityManagerFactoryUtils.closeEntityManager(target);
				}
			}
		}"
5618836,none,"    public Collection fromRealm(String realmName) {
        if (realmPrincipals == null || realmPrincipals.isEmpty()) {
            return Collections.EMPTY_SET;
        }
        Set principals = realmPrincipals.get(realmName);
        if (principals == null || principals.isEmpty()) {
            principals = Collections.EMPTY_SET;
        }
        return Collections.unmodifiableSet(principals);
    }"
9405775,none,"    protected Container getGlobalCurrentFocusCycleRoot()
        throws SecurityException
    {
        synchronized (KeyboardFocusManager.class) {
            checkKFMSecurity();
            return currentFocusCycleRoot;
        }
    }"
6129787,none,"        @Override
        public boolean hasNext()
        {
            return this.next;
        }"
6454619,none,"	static void decompress(char[] array1, int start1, char[] array2, int start2, int length) {
		for (int i = 0; i < length; ++i) {
			helpers.putCharInArrayByIndex(array2, start2 + i, helpers.byteToCharUnsigned(helpers.getByteFromArrayByIndex(array1, start1 + i)));
		}
	}"
4534287,none,"    @GET
    @Path(""downloadtemplate"")
    @Produces(""application/vnd.ms-excel"")
    public Response getSavingsTemplate(@QueryParam(""officeId"")final Long officeId,
            @QueryParam(""staffId"")final Long staffId,@QueryParam(""dateFormat"") final String dateFormat) {
        return bulkImportWorkbookPopulatorService.getTemplate(GlobalEntityType.SAVINGS_ACCOUNT.toString(),officeId, staffId,dateFormat);
    }"
5904263,none,"  public final Text splitText(int offset) throws DOMException
  {
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
  }"
8775243,none,"    FSDataBoundedInputStream(FileSystem fs, Path file, InputStream in) {
      super(in);
      this.fs = fs;
      this.file = file;
    }"
8024427,none,"		public PREGEN__RECORD__OF__OCTETSTRING replace(final int index, final int len, final PREGEN__RECORD__OF__OCTETSTRING_template repl) {
			if (!repl.is_value()) {
				throw new TtcnError(""The fourth argument of function replace() is a template with non-specific value."");
			}
			return replace(index, len, repl.valueof());
		}"
7842685,none,"  public static ResumptionAction fromName(String name) {
    if (name == null || name.length() == 0) {
      throw new IllegalArgumentException(
          String.format(""Invalid ResumptionAction name: %s"",
              name));
    }
    for (int i = 0; i < PRIVATE_VALUES.length; i++) {
      if (name.equals(PRIVATE_VALUES[i].name)) {
        return PRIVATE_VALUES[i];
      }
    }
    throw new IllegalArgumentException(
        String.format(""Invalid ResumptionAction name: %s"", name));
  }"
6209901,none,"        @Override
        public void onNodeSelected(TreeNodeElement<D> node, SignalEvent event) {
          getSelectionModel().setTreeActive(true);
          selectNode(node.getData(), event, true);
        }"
9093112,none,"        @Specialization
        protected Object callNamedFunction(VirtualFrame frame, String symbol, RArgsValuesAndNames args, @SuppressWarnings(""unused"") RMissing packageName,
                        @Cached(""createRegisteredNativeSymbol(CallNST)"") DLL.RegisteredNativeSymbol rns,
                        @Cached(""create()"") DLL.RFindSymbolNode findSymbolNode,
                        @Cached(""createBinaryProfile()"") ConditionProfile registeredProfile) {
            return callNamedFunctionWithPackage(frame, symbol, args, null, rns, findSymbolNode, registeredProfile);
        }"
6633155,none,"  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    for (Map.Entry<String,JsonAttribute> attr: this.entrySet()) {
      if (sb.length()>0) {
        sb.append("","");
      }
      sb.append(""\"""").append(attr.getKey()).append(""\"":"").append(attr.getValue());
    }
    return sb.toString();
  }"
7144792,none,"    public HttpResponse(int code, String message,Map<String, List<String>> headers,
                        String content) {
        this.code = code;
        this.message = message;
        this.headers = new HashMap<>(headers);
        this.content = content;
    }"
9390001,none,"        public int hashCode() {
            // Sum up the hash codes of the components.
            int hash = 0;

            // For each type/value pair...
            for (int i = 0; i < tvs.size(); i++) {
                hash += tvs.elementAt(i).hashCode();
            }
            return hash;
        }"
6431594,none,"    @Override
    public Integer getOkResponse() {
        Optional<Integer> propertyValue = getProperty(DialogConditionType.OK_RESPONSE);
        return propertyValue.orElse(null);
    }"
7233796,none,"  @Implementation
  protected synchronized int checkSlicePermission(Uri uri, int pid, int uid) {
    if (uid == 0) {
      return PackageManager.PERMISSION_GRANTED;
    }
    Collection<Uri> uris = packageUidsToPermissionGrantedSliceUris.get(uid);
    if (uris != null && uris.contains(uri)) {
      return PackageManager.PERMISSION_GRANTED;
    }
    return PackageManager.PERMISSION_DENIED;
  }"
6236496,none,"    public final void rule__XWhileExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalMetaData.g:13570:1: ( ( () ) )
            // InternalMetaData.g:13571:1: ( () )
            {
            // InternalMetaData.g:13571:1: ( () )
            // InternalMetaData.g:13572:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0()); 
            }
            // InternalMetaData.g:13573:2: ()
            // InternalMetaData.g:13573:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
5515872,none,"    public RocketmqLog4jAppender() {
    }"
7727545,none,"    private static int[] getIntArray(String string) {
        if (string.equals(""[]"")) {
            return new int[]{};
        }
        string = string.substring(1, string.length() - 1);
        String[] splits = string.split("","");
        int[] array = new int[splits.length];
        for (int i = 0; i < splits.length; i++) {
            array[i] = Integer.parseInt(splits[i]);
        }
        return array;
    }"
7467151,none,"    private static List<Parameter> parseParametersOptional(MethodSpec spec, List<? extends VariableElement> types) {
        List<Parameter> parsedParams = new ArrayList<>();

        int typeStartIndex = 0;
        List<ParameterSpec> specifications = spec.getOptional();
        outer: for (int specIndex = 0; specIndex < specifications.size(); specIndex++) {
            ParameterSpec specification = specifications.get(specIndex);
            for (int typeIndex = typeStartIndex; typeIndex < types.size(); typeIndex++) {
                VariableElement variable = types.get(typeIndex);
                Parameter optionalParam = matchParameter(specification, variable, -1, -1);
                if (optionalParam != null) {
                    parsedParams.add(optionalParam);
                    typeStartIndex = typeIndex + 1;
                    continue outer;
                }
            }
        }

        if (typeStartIndex < types.size()) {
            // not enough types found
            return null;
        }
        return parsedParams;
    }"
5384416,none,"        @Override
        public Relationship mapToRelationship(final ProcessContext context, final FlowFile flowFile) {
            final List<Relationship> relationshipList = DistributeLoad.this.weightedRelationshipListRef.get();
            final int numRelationships = relationshipList.size();

            // create a HashSet that contains all of the available relationships, as calling #contains on HashSet
            // is much faster than calling it on a List
            boolean foundFreeRelationship = false;
            Relationship relationship = null;

            int attempts = 0;
            while (!foundFreeRelationship) {
                final long counterValue = counter.getAndIncrement();
                final int idx = (int) (counterValue % numRelationships);
                relationship = relationshipList.get(idx);
                foundFreeRelationship = context.getAvailableRelationships().contains(relationship);
                if (++attempts % numRelationships == 0 && !foundFreeRelationship) {
                    return null;
                }
            }

            return relationship;
        }"
8286887,none,"        public String command() {
            String flags;
            if (add) {
                flags = "" +FLAGS "";
            } else if (subtract) {
                flags = "" -FLAGS "";
            } else {
                flags = "" FLAGS "";
            }
            if (silent) {
                flags = flags + "".SILENT"";
            }
            return ""STORE "" + msn + flags + this.flags + "")"";
        }"
8566813,none,"  protected WALHdrContext readHeader(Builder builder, FSDataInputStream stream)
      throws IOException {
     boolean res = builder.mergeDelimitedFrom(stream);
     if (!res) return new WALHdrContext(WALHdrResult.EOF, null);
     if (builder.hasWriterClsName() &&
         !getWriterClsNames().contains(builder.getWriterClsName())) {
       return new WALHdrContext(WALHdrResult.UNKNOWN_WRITER_CLS, null);
     }
     String clsName = null;
     if (builder.hasCellCodecClsName()) {
       clsName = builder.getCellCodecClsName();
     }
     return new WALHdrContext(WALHdrResult.SUCCESS, clsName);
  }"
7727470,none,"    public MetricFactory(MetricSearch metricSearch, MetricValidator metricValidator,
                         boolean redirectHostMetrics, String hostMetricDir, String hostPostfixes) {
        this.metricSearch = metricSearch;
        this.metricValidator = metricValidator;
        this.redirectHostMetrics = redirectHostMetrics;
        this.hostMetricDir = hostMetricDir;
        this.hostPostfixes = Splitter.on(',').omitEmptyStrings().splitToList(hostPostfixes);
        if (redirectHostMetrics) {
            log.info(""Host host metrics redirection enabled for postfixes {} to dir {}"", hostPostfixes, hostMetricDir);
        } else {
            log.info(""Host metric redirection disabled"");
        }
    }"
4435287,none,"    @POST
    @Path(""resume/{type}/{entity}"")
    @Produces(MediaType.APPLICATION_JSON)
    @Monitored(event = ""resume-instance"")
    @Override
    public InstancesResult resumeInstance(
            @Context HttpServletRequest request,
            @Dimension(""type"") @PathParam(""type"") String type,
            @Dimension(""entity"") @PathParam(""entity"") String entity,
            @Dimension(""start-time"") @QueryParam(""start"") String startStr,
            @Dimension(""end-time"") @QueryParam(""end"") String endStr,
            @Dimension(""colo"") @QueryParam(""colo"") String colo,
            @Dimension(""lifecycle"") @QueryParam(""lifecycle"") List<LifeCycle> lifeCycles) {
        try {
            return super.resumeInstance(request, type, entity, startStr, endStr, colo, lifeCycles);
        } catch (Throwable throwable) {
            throw FalconWebException.newAPIException(throwable);
        }
    }"
6940151,none,"  public List<Version> getDefaultVersions() {
    return defaultVersions;
  }"
8972057,none,"  @Override
  public void deleteDocByQuery(String query) {
    if(docBuilder != null){
      docBuilder.writer.deleteByQuery(query);
    } 
  }"
4124650,none,"    public Response asJsonResponse() {
        return asResponse(MediaType.APPLICATION_JSON_TYPE);
    }"
8728404,none,"    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }"
7697841,none,"    public static String getOatFileInstructionSet(File oatFile) throws Throwable {
        ShareElfFile elfFile = null;
        String result = """";
        try {
            elfFile = new ShareElfFile(oatFile);
            final ShareElfFile.SectionHeader roDataHdr = elfFile.getSectionHeaderByName("".rodata"");
            if (roDataHdr == null) {
                throw new IOException(""Unable to find .rodata section."");
            }

            final FileChannel channel = elfFile.getChannel();
            channel.position(roDataHdr.shOffset);

            final byte[] oatMagicAndVersion = new byte[8];
            ShareElfFile.readUntilLimit(channel, ByteBuffer.wrap(oatMagicAndVersion), ""Failed to read oat magic and version."");

            if (oatMagicAndVersion[0] != 'o'
                    || oatMagicAndVersion[1] != 'a'
                    || oatMagicAndVersion[2] != 't'
                    || oatMagicAndVersion[3] != '\n') {
                throw new IOException(
                        String.format(""Bad oat magic: %x %x %x %x"",
                                oatMagicAndVersion[0],
                                oatMagicAndVersion[1],
                                oatMagicAndVersion[2],
                                oatMagicAndVersion[3])
                );
            }

            final int versionOffsetFromOatBegin = 4;
            final int versionBytes = 3;

            final String oatVersion = new String(oatMagicAndVersion,
                    versionOffsetFromOatBegin, versionBytes, Charset.forName(""ASCII""));
            try {
                Integer.parseInt(oatVersion);
            } catch (NumberFormatException e) {
                throw new IOException(""Bad oat version: "" + oatVersion);
            }

            ByteBuffer buffer = ByteBuffer.allocate(128);
            buffer.order(elfFile.getDataOrder());
            // TODO This is a risk point, since each oat version may use a different offset.
            // So far it's ok. Perhaps we should use oatVersionNum to judge the right offset in
            // the future.
            final int isaNumOffsetFromOatBegin = 12;
            channel.position(roDataHdr.shOffset + isaNumOffsetFromOatBegin);
            buffer.limit(4);
            ShareElfFile.readUntilLimit(channel, buffer, ""Failed to read isa num."");

            int isaNum = buffer.getInt();
            if (isaNum < 0 || isaNum >= InstructionSet.values().length) {
                throw new IOException(""Bad isa num: "" + isaNum);
            }

            switch (InstructionSet.values()[isaNum]) {
                case kArm:
                case kThumb2:
                    result = ""arm"";
                    break;
                case kArm64:
                    result = ""arm64"";
                    break;
                case kX86:
                    result = ""x86"";
                    break;
                case kX86_64:
                    result = ""x86_64"";
                    break;
                case kMips:
                    result = ""mips"";
                    break;
                case kMips64:
                    result = ""mips64"";
                    break;
                case kNone:
                    result = ""none"";
                    break;
                default:
                    throw new IOException(""Should not reach here."");
            }
        } finally {
            if (elfFile != null) {
                try {
                    elfFile.close();
                } catch (Exception ignored) {
                    // Ignored.
                }
            }
        }
        return result;
    }"
5328561,none,"        @Override
        public void process(OutputStream out) throws IOException {
            IOUtils.write(""<docs>"", out, StandardCharsets.UTF_8);
            for (SolrDocument doc : response.getResults()) {
                final String xml = ClientUtils.toXML(toSolrInputDocument(doc));
                IOUtils.write(xml, out, StandardCharsets.UTF_8);
            }
            IOUtils.write(""</docs>"", out, StandardCharsets.UTF_8);
        }"
7141052,none,"    private static IClassFile resolveClassFile(String uriString) {
        if (uriString == null || uriString.isEmpty()) {
            return null;
        }
        try {
            URI uri = new URI(uriString);
            if (uri != null && JDT_SCHEME.equals(uri.getScheme()) && ""contents"".equals(uri.getAuthority())) {
                String handleId = uri.getQuery();
                IJavaElement element = JavaCore.create(handleId);
                IClassFile cf = (IClassFile) element.getAncestor(IJavaElement.CLASS_FILE);
                return cf;
            }
        } catch (URISyntaxException e) {
            // ignore
        }
        return null;
    }"
6518475,none,"    public Collection<String> getAdded() {
      return added;
    }"
4417149,none,"    private void initWS()
    {
        // create new instance of the service implmentation
        EmployeeService impl = new EmployeeServiceImpl(db, conn);

        // construct/configure factory to create our specific service
        svrFactory = new JaxWsServerFactoryBean();
        //svrFactory.getInInterceptors().add(new LoggingInInterceptor());
        //svrFactory.getOutInterceptors().add(new LoggingOutInterceptor());
        // specify our implementation class
        svrFactory.setServiceClass(EmployeeService.class);
        // specify the address
        svrFactory.setAddress(serviceAddress);
        // set the instance to be used
        svrFactory.setServiceBean(impl);
    }"
5375248,none,"    @ApiModelProperty(
            value = ""If clustered, the address of the node from which the bulletin originated.""
    )
    public String getNodeAddress() {
        return nodeAddress;
    }"
9005699,none,"    UnifiedHLImpl(final UnifiedHighlighter.OffsetSource offsetSource) {
      this.offsetSource = offsetSource;
      maxPassages = new int[hlFields.size()];
      Arrays.fill(maxPassages, maxFrags);
    }"
8696357,none,"        public ModelMenu getModelMenu(Map<String, Object> context) {
            String name = this.getName(context);
            String location = this.getLocation(context);
            ModelMenu modelMenu = null;
            try {
                modelMenu = MenuFactory.getMenuFromLocation(location, name);
            } catch (Exception e) {
                String errMsg = ""Error rendering included menu named ["" + name + ""] at location ["" + location + ""]: "";
                Debug.logError(e, errMsg, module);
                throw new RuntimeException(errMsg + e);
            }
            return modelMenu;
        }"
8177486,none,"    protected void looseMarshalByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut)
        throws IOException {
        dataOut.writeBoolean(data != null);
        if (data != null) {
            dataOut.writeInt(data.length);
            dataOut.write(data);
        }
    }"
7131047,none,"    @Override
    public boolean equals(Object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj == null)
      {
        return false;
      }

      if (getClass() != obj.getClass())
      {
        return false;
      }

      final MethodIdentity other = (MethodIdentity) obj;
      return new EqualsBuilder().
          append(_methodQualifiedName, other._methodQualifiedName).
          append(_parameterTypeNames, other._parameterTypeNames).
          isEquals();
    }"
8599703,none,"  @Override
  protected boolean startTransition(final MasterProcedureEnv env, final RegionStateNode regionNode)
      throws IOException {
    return true;
  }"
9012151,none,"  @Override
  public int length() {
    return this.chars.length;
  }"
8960720,none,"    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }"
6772849,none,"    public ListenableFuture<APINodeList<Comment>> executeAsync(Map<String, Object> extraParams) throws APIException {
      return Futures.transform(
        executeAsyncInternal(extraParams),
        new Function<ResponseWrapper, APINodeList<Comment>>() {
           public APINodeList<Comment> apply(ResponseWrapper result) {
             try {
               return APIRequestGetComments.this.parseResponse(result.getBody(), result.getHeader());
             } catch (Exception e) {
               throw new RuntimeException(e);
             }
           }
         }
      );
    };"
8971411,none,"  public void testSortedSetEnumAdvanceIndependently() throws IOException {
    Directory directory = newDirectory();
    Analyzer analyzer = new MockAnalyzer(random());
    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);
    iwconfig.setMergePolicy(newLogMergePolicy());
    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);
    
    Document doc = new Document();
    SortedSetDocValuesField field1 = new SortedSetDocValuesField(""field"", new BytesRef(""2""));
    SortedSetDocValuesField field2 = new SortedSetDocValuesField(""field"", new BytesRef(""3""));
    doc.add(field1);
    doc.add(field2);
    iwriter.addDocument(doc);
    field1.setBytesValue(new BytesRef(""1""));
    iwriter.addDocument(doc);
    field2.setBytesValue(new BytesRef(""2""));
    iwriter.addDocument(doc);

    iwriter.commit();
    iwriter.forceMerge(1);

    DirectoryReader ireader = iwriter.getReader();
    iwriter.close();

    SortedSetDocValues dv = getOnlyLeafReader(ireader).getSortedSetDocValues(""field"");
    doTestSortedSetEnumAdvanceIndependently(dv);

    ireader.close();
    directory.close();
  }"
4434430,none,"    private void goNextPage() {
        LOGGER.info(""Navigating to next page..."");
        WebElement nextButton = driver.findElement(By.xpath(ACTIVE_NXT_BTN));
        nextButton.click();
        waitForElement(expectedElement, DEFAULT_TIMEOUT, ""Next page didn't load"");
    }"
6961928,none,"  @Override
  public final boolean equals(@Nullable Object object) {
    if (object instanceof HashCode) {
      HashCode that = (HashCode) object;
      return bits() == that.bits() && equalsSameBits(that);
    }
    return false;
  }"
6251730,none,"    public static void assertAssignmentQuota(final Long parentId, final long requested, final long limit,
            @NotNull final Class<?> type, @NotNull final Class<?> parentType, final Function<Long, Long> countFct) {
        assertAssignmentQuota(parentId, requested, limit, type.getSimpleName(), parentType.getSimpleName(), countFct);
    }"
7386739,none,"		private void addMethod(Method method) {
			addMethodIfPossible(method, ""get"", 0, BeanProperty::addGetter);
			addMethodIfPossible(method, ""is"", 0, BeanProperty::addGetter);
			addMethodIfPossible(method, ""set"", 1, BeanProperty::addSetter);
		}"
8984803,none,"  public int maxDoc() {
    if (this.maxDoc == -1) {
      throw new IllegalStateException(""maxDoc isn't set yet"");
    }
    return maxDoc;
  }"
6943892,none,"    private void applyAttributes(@NonNull AttributeSet attrs) {
        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.HoverView);
        try {
            createCollapsedDockFromAttrs(a);
        } finally {
            a.recycle();
        }
    }"
4490426,none,"  private void parseQuotedValue(byte prev) throws IOException {
    final byte newLine = this.newLine;
    final byte delimiter = this.delimiter;
    final TextOutput output = this.output;
    final TextInput input = this.input;
    final byte quote = this.quote;

    ch = input.nextCharNoNewLineCheck();

    while (!(prev == quote && (ch == delimiter || ch == newLine || isWhite(ch)))) {
      if (ch != quote) {
        if (prev == quote) { // unescaped quote detected
          if (parseUnescapedQuotes) {
            output.append(quote);
            output.append(ch);
            parseQuotedValue(ch);
            break;
          } else {
            throw new TextParsingException(
                context,
                ""Unescaped quote character '""
                    + quote
                    + ""' inside quoted value of CSV field. To allow unescaped quotes, set 'parseUnescapedQuotes' to 'true' in the CSV parser settings. Cannot parse CSV input."");
          }
        }
        output.append(ch);
        prev = ch;
      } else if (prev == quoteEscape) {
        output.append(quote);
        prev = NULL_BYTE;
      } else {
        prev = ch;
      }
      ch = input.nextCharNoNewLineCheck();
    }

    // Handles whitespaces after quoted value:
    // Whitespaces are ignored (i.e., ch <= ' ') if they are not used as delimiters (i.e., ch != ' ')
    // For example, in tab-separated files (TSV files), '\t' is used as delimiter and should not be ignored
    // Content after whitespaces may be parsed if 'parseUnescapedQuotes' is enabled.
    if (ch != newLine && ch <= ' ' && ch != delimiter) {
      final DrillBuf workBuf = this.workBuf;
      workBuf.resetWriterIndex();
      do {
        // saves whitespaces after value
        workBuf.writeByte(ch);
        ch = input.nextChar();
        // found a new line, go to next record.
        if (ch == newLine) {
          return;
        }
      } while (ch <= ' ' && ch != delimiter);

      // there's more stuff after the quoted value, not only empty spaces.
      if (!(ch == delimiter || ch == newLine) && parseUnescapedQuotes) {

        output.append(quote);
        for(int i =0; i < workBuf.writerIndex(); i++){
          output.append(workBuf.getByte(i));
        }
        // the next character is not the escape character, put it there
        if (ch != quoteEscape) {
          output.append(ch);
        }
        // sets this character as the previous character (may be escaping)
        // calls recursively to keep parsing potentially quoted content
        parseQuotedValue(ch);
      }
    }

    if (!(ch == delimiter || ch == newLine)) {
      throw new TextParsingException(context, ""Unexpected character '"" + ch
          + ""' following quoted value of CSV field. Expecting '"" + delimiter + ""'. Cannot parse CSV input."");
    }
  }"
7168092,none,"    public void setProfileAttributes(
        final VssJsonCollectionWrapper<List<ProfileAttributeBase<Object>>> attributesCollection, 
        final String id) { 

        final UUID locationId = UUID.fromString(""1392b6ac-d511-492e-af5b-2263e5545a5d""); //$NON-NLS-1$
        final ApiResourceVersion apiVersion = new ApiResourceVersion(""3.1-preview.2""); //$NON-NLS-1$

        final Map<String, Object> routeValues = new HashMap<String, Object>();
        routeValues.put(""id"", id); //$NON-NLS-1$

        final VssRestRequest httpRequest = super.createRequest(HttpMethod.PATCH,
                                                               locationId,
                                                               routeValues,
                                                               apiVersion,
                                                               attributesCollection,
                                                               VssMediaTypes.APPLICATION_JSON_TYPE,
                                                               VssMediaTypes.APPLICATION_JSON_TYPE);

        super.sendRequest(httpRequest);
    }"
5723163,none,"  @Override
  public Expr visitDatetime_literal(@NotNull Datetime_literalContext ctx) {
    if (checkIfExist(ctx.time_literal())) {
      return visitTime_literal(ctx.time_literal());
    } else if (checkIfExist(ctx.date_literal())) {
      return visitDate_literal(ctx.date_literal());
    } else if (checkIfExist(ctx.interval_literal())) {
      return visitInterval_literal(ctx.interval_literal());
    } else {
      return visitTimestamp_literal(ctx.timestamp_literal());
    }
  }"
5450135,none,"	protected void handleDefaultEscapeXML() {

      PortletConfig portletConfig = (PortletConfig) pageContext.getRequest().getAttribute(Constants.PORTLET_CONFIG);
      Map<String, String[]> containerRuntimeOptions = portletConfig.getContainerRuntimeOptions();
      if (containerRuntimeOptions != null) {
         String[] result = containerRuntimeOptions.get(Constants.ESCAPE_XML_RUNTIME_OPTION);
         if (result != null) {
            if (result.length > 0) {
               setEscapeXml(result[0]);
            }
         }
      }

	}"
9521523,none,"  @Override
  public synchronized int read(final byte[] b, final int off, final int len) throws IOException {
    int currentOff = off;
    int currentLen = len;
    int lastReadBytes;
    int totalReadBytes = 0;
    do {
      lastReadBytes = readOneBlock(b, currentOff, currentLen);
      if (lastReadBytes > 0) {
        currentOff += lastReadBytes;
        currentLen -= lastReadBytes;
        totalReadBytes += lastReadBytes;
      }
      if (currentLen <= 0 || currentLen > b.length - currentOff) {
        break;
      }
    } while (lastReadBytes > 0);
    return totalReadBytes > 0 ? totalReadBytes : lastReadBytes;
  }"
6757343,none,"    @Override
    public APIRequestCreateSpacoDataSetCollection setParams(Map<String, Object> params) {
      setParamsInternal(params);
      return this;
    }"
7373962,none,"		Listener(CountDownLatch latch) {
			this.latch = latch;
		}"
5499603,none,"    @Override
    @MultiMQAdminCmdMethod
    public Map<String, ConsumerGroupRollBackStat> resetOffset(ResetOffsetRequest resetOffsetRequest) {
        Map<String, ConsumerGroupRollBackStat> groupRollbackStats = Maps.newHashMap();
        for (String consumerGroup : resetOffsetRequest.getConsumerGroupList()) {
            try {
                Map<MessageQueue, Long> rollbackStatsMap =
                    mqAdminExt.resetOffsetByTimestamp(resetOffsetRequest.getTopic(), consumerGroup, resetOffsetRequest.getResetTime(), resetOffsetRequest.isForce());
                ConsumerGroupRollBackStat consumerGroupRollBackStat = new ConsumerGroupRollBackStat(true);
                List<RollbackStats> rollbackStatsList = consumerGroupRollBackStat.getRollbackStatsList();
                for (Map.Entry<MessageQueue, Long> rollbackStatsEntty : rollbackStatsMap.entrySet()) {
                    RollbackStats rollbackStats = new RollbackStats();
                    rollbackStats.setRollbackOffset(rollbackStatsEntty.getValue());
                    rollbackStats.setQueueId(rollbackStatsEntty.getKey().getQueueId());
                    rollbackStats.setBrokerName(rollbackStatsEntty.getKey().getBrokerName());
                    rollbackStatsList.add(rollbackStats);
                }
                groupRollbackStats.put(consumerGroup, consumerGroupRollBackStat);
            }
            catch (MQClientException e) {
                if (ResponseCode.CONSUMER_NOT_ONLINE == e.getResponseCode()) {
                    try {
                        ConsumerGroupRollBackStat consumerGroupRollBackStat = new ConsumerGroupRollBackStat(true);
                        List<RollbackStats> rollbackStatsList = mqAdminExt.resetOffsetByTimestampOld(consumerGroup, resetOffsetRequest.getTopic(), resetOffsetRequest.getResetTime(), true);
                        consumerGroupRollBackStat.setRollbackStatsList(rollbackStatsList);
                        groupRollbackStats.put(consumerGroup, consumerGroupRollBackStat);
                        continue;
                    }
                    catch (Exception err) {
                        logger.error(""op=resetOffset_which_not_online_error"", err);
                    }
                }
                else {
                    logger.error(""op=resetOffset_error"", e);
                }
                groupRollbackStats.put(consumerGroup, new ConsumerGroupRollBackStat(false, e.getMessage()));
            }
            catch (Exception e) {
                logger.error(""op=resetOffset_error"", e);
                groupRollbackStats.put(consumerGroup, new ConsumerGroupRollBackStat(false, e.getMessage()));
            }
        }
        return groupRollbackStats;
    }"
7916535,none,"    static Class findProviderClass(String className, ClassLoader cl,
                                           boolean doFallback)
        throws ClassNotFoundException, ConfigurationError
    {   
        //throw security exception if the calling thread is not allowed to access the
        //class. Restrict the access to the package classes as specified in java.security policy.
        SecurityManager security = System.getSecurityManager();
        try{
                if (security != null){
                    final int lastDot = className.lastIndexOf('.');
                    String packageName = className;
                    if (lastDot != -1) packageName = className.substring(0, lastDot);
                    security.checkPackageAccess(packageName);
                 }   
        }catch(SecurityException e){
            throw e;
        }
        
        Class providerClass;
        if (cl == null) {
            // XXX Use the bootstrap ClassLoader.  There is no way to
            // load a class using the bootstrap ClassLoader that works
            // in both JDK 1.1 and Java 2.  However, this should still
            // work b/c the following should be true:
            //
            // (cl == null) iff current ClassLoader == null
            //
            // Thus Class.forName(String) will use the current
            // ClassLoader which will be the bootstrap ClassLoader.
            providerClass = Class.forName(className);
        } else {
            try {
                providerClass = cl.loadClass(className);
            } catch (ClassNotFoundException x) {
                if (doFallback) {
                    // Fall back to current classloader
                    ClassLoader current = ObjectFactory.class.getClassLoader();
                    if (current == null) {
                        providerClass = Class.forName(className);
                    } else if (cl != current) {
                        cl = current;
                        providerClass = cl.loadClass(className);
                    } else {
                        throw x;
                    }
                } else {
                    throw x;
                }
            }
        }

        return providerClass;
    }"
8903716,none,"  public IfExprStringGroupColumnStringGroupColumn() {
    super();

    // Dummy final assignments.
    arg1Column = -1;
    arg2Column = -1;
    arg3Column = -1;
  }"
8242801,none,"    public void startElement(String uri,
                             String name,
                             String raw,
                             Attributes attr)
    throws SAXException {
        if (namespaceURI.equals(uri) && ignoreHooksCount == 0) {
            // this is our namespace:
            try {
                startTransformingElement(uri, name, raw, attr);
            } catch (ProcessingException e) {
                throw new SAXException(""ProcessingException: "" + e, e);
            } catch (IOException e) {
                throw new SAXException(""IOException occured during processing: "" + e, e);
            }
        } else {
            if (ignoreEventsCount == 0) {
                super.startElement(uri, name, raw, attr);
            }
        }
    }"
7762033,none,"  private static DimFilter negate(final DimFilter filter)
  {
    if (Filtration.matchEverything().equals(filter)) {
      return Filtration.matchNothing();
    } else if (Filtration.matchNothing().equals(filter)) {
      return Filtration.matchEverything();
    } else if (filter instanceof NotDimFilter) {
      return ((NotDimFilter) filter).getField();
    } else if (filter instanceof BoundDimFilter) {
      final BoundDimFilter negated = Bounds.not((BoundDimFilter) filter);
      return negated != null ? negated : new NotDimFilter(filter);
    } else {
      return new NotDimFilter(filter);
    }
  }"
5616304,none,"    public void destroy() {
        if (cacheManagerImplicitlyCreated) {
            try {
                net.sf.ehcache.CacheManager cacheMgr = getCacheManager();
                cacheMgr.shutdown();
            } catch (Throwable t) {
                if (log.isWarnEnabled()) {
                    log.warn(""Unable to cleanly shutdown implicitly created CacheManager instance.  "" +
                            ""Ignoring (shutting down)..."", t);
                }
            } finally {
                this.manager = null;
                this.cacheManagerImplicitlyCreated = false;
            }
        }
    }"
5220844,none,"        public void declareVariable(String name) {
            declarations.append(""declare variable "")
                .append(""$"")
                .append(name)
                .append("" external "")
                .append("";\n"");
        }"
8144651,none,"    public final void entryRuleCallExpression() throws RecognitionException {
        int entryRuleCallExpression_StartIndex = input.index();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return ; }
            // InternalExBeeLangTestLanguageParser.g:1031:1: ( ruleCallExpression EOF )
            // InternalExBeeLangTestLanguageParser.g:1032:1: ruleCallExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCallExpressionRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            ruleCallExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCallExpressionRule()); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, entryRuleCallExpression_StartIndex); }
        }
        return ;
    }"
5314620,none,"    @Override
    public void process(Operator operator, List<COSBase> arguments) throws MissingOperandException
    {
        if (arguments.size() < 6)
        {
            throw new MissingOperandException(operator, arguments);
        }
        if (!checkArrayTypesClass(arguments, COSNumber.class))
        {
            return;
        }

        COSNumber a = (COSNumber)arguments.get( 0 );
        COSNumber b = (COSNumber)arguments.get( 1 );
        COSNumber c = (COSNumber)arguments.get( 2 );
        COSNumber d = (COSNumber)arguments.get( 3 );
        COSNumber e = (COSNumber)arguments.get( 4 );
        COSNumber f = (COSNumber)arguments.get( 5 );

        Matrix matrix = new Matrix(a.floatValue(), b.floatValue(), c.floatValue(),
                                   d.floatValue(), e.floatValue(), f.floatValue());

        context.setTextMatrix(matrix);
        context.setTextLineMatrix(matrix.clone());
    }"
7546490,none,"	@Scheduled(fixedRate=2000)
	public void processQueues() {
		for (DeferredResult<String> result : this.responseBodyQueue) {
			result.setResult(""Deferred result"");
			this.responseBodyQueue.remove(result);
		}
		for (DeferredResult<String> result : this.exceptionQueue) {
			result.setErrorResult(new IllegalStateException(""DeferredResult error""));
			this.exceptionQueue.remove(result);
		}
		for (DeferredResult<ModelAndView> result : this.mavQueue) {
			result.setResult(new ModelAndView(""views/html"", ""javaBean"", new JavaBean(""bar"", ""apple"")));
			this.mavQueue.remove(result);
		}
	}"
9258251,none,"    @SuppressWarnings(""deprecation"")
    public void show() {
        Component component = getComponent();

        if (component != null) {
            component.show();
        }
    }"
4431359,none,"    @Override
    protected Collection<IPZoneEntity> loadFromService(ISecurityDataEnrichServiceClient client) {
        return client.listIPZones();
    }"
7337150,none,"    public _Job[] listJobs()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListJobs requestData = new _ReportingService2005Soap_ListJobs();

        final SOAPRequest request = createSOAPRequest(
                ""ListJobs"",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            ""ListJobs"");
                    }
                });

        final _ReportingService2005Soap_ListJobsResponse responseData = new _ReportingService2005Soap_ListJobsResponse();

        executeSOAPRequest(
            request,
            ""ListJobsResponse"",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getJobs();
    }"
7391660,none,"			public String toCommandLine() {
				return preparer.map(it -> it.apply(value)).orElseGet(() -> value.toString());
			}"
8674686,none,"    private void sessionEnd0(@Nullable IgniteInternalTx tx, boolean threwEx) throws IgniteCheckedException {
        try {
            if (tx == null) {
                if (sesLsnrs != null && sesHolder.get().contains(store)) {
                    for (CacheStoreSessionListener lsnr : sesLsnrs)
                        lsnr.onSessionEnd(locSes, !threwEx);
                }

                if (!sesHolder.get().ended(store))
                    store.sessionEnd(!threwEx);
            }
        }
        catch (Exception e) {
            if (!threwEx)
                throw U.cast(e);
        }
        finally {
            if (sesHolder != null)
                sesHolder.set(null);
        }
    }"
8890241,none,"  @Override
  public void clear() {
    this.type = null;
    this.typeQualifiers = null;
  }"
7803956,none,"  @Override
  public void afterUpdate(EntryEvent<K, V> event) {
    addEvent(event);
    try {
      afterUpdate2(event);
    } catch (VirtualMachineError e) {
      SystemFailure.initiateFailure(e);
      throw e;
    } catch (Throwable t) {
      this.callbackError = t;
    }
  }"
4383462,none,"    private void createServerIdEditGroup( Composite parent )
    {
        // ServerID Group
        Group serverIdGroup = BaseWidgetUtils.createGroup( parent, ""ServerID input"", 1 );
        GridLayout serverIdGroupGridLayout = new GridLayout( 2, false );
        serverIdGroup.setLayout( serverIdGroupGridLayout );
        serverIdGroup.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );

        // ServerID Text
        BaseWidgetUtils.createLabel( serverIdGroup, ""ID:"", 1 );
        idText = BaseWidgetUtils.createText( serverIdGroup, """", 1 );
        idText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );

        // URL Text
        BaseWidgetUtils.createLabel( serverIdGroup, ""URL:"", 1 );
        urlText = BaseWidgetUtils.createText( serverIdGroup, """", 1 );
        urlText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );
    }"
9506659,none,"  public ConnectionPoolId(final UserGroupInformation ugi, final String nnId,
      final Class<?> proto) {
    this.nnId = nnId;
    this.ugi = ugi;
    this.protocol = proto;
  }"
9481908,none,"    public String getValueOrNull(String name) throws InvalidXmlException {
      if (!subtrees.containsKey(name)) {
        return null;
      }
      LinkedList <Stanza> l = subtrees.get(name);
      if (l.size() != 1) {
        throw new InvalidXmlException(""More than one value found for "" + name);
      }
      return l.get(0).getValue();
    }"
9336762,none,"    protected void doClick(final MenuSelectionManager msm) {
        final Dimension size = menuItem.getSize();
        AquaUtils.blinkMenu(new AquaUtils.Selectable() {
            public void paintSelected(final boolean selected) {
                menuItem.setArmed(selected);
                menuItem.paintImmediately(0, 0, size.width, size.height);
            }
        });
        super.doClick(msm);
    }"
5182985,none,"    @Override
    protected boolean isUnreachableException(Throwable ex) {
        if (super.isUnreachableException(ex)) {
            return true;
        }

        if (ex instanceof SocketTimeoutException)
            return true;

        List<String> exceptionList = new ArrayList<>();
        exceptionList.add(ex.getClass().getName());

        Throwable t = ex.getCause();
        int depth = 0;
        while (t != null && depth < 5) {
            exceptionList.add(t.getClass().getName());
            depth++;
            if (t instanceof ConnectException) {
                return true;
            }
            t = t.getCause();
        }

        logger.trace(""Not an unreachable exception with causes {}"", exceptionList);
        return false;
    }"
6244777,none,"    public final int getPort() {
        return port;
    }"
6174003,none,"  private String resolve(String template) throws TemplateNotFoundException {
    try (Reader reader = new InputStreamReader(IoUtil.getResource(template))) {
      return CharStreams.toString(reader);
    } catch (IOException e) {
      throw new TemplateNotFoundException(e.getMessage(), e);
    }
  }"
4782948,none,"  private void grantOrRevokeRoleOnGroup(List<HivePrincipal> hivePrincipals, List<String> roles,
      HivePrincipal grantorPrinc, boolean isGrant) throws HiveAuthzPluginException,
      HiveAccessControlException {
    try {
      sentryClient = getSentryClient();
      // get principals
      Set<String> groups = Sets.newHashSet();
      for (HivePrincipal principal : hivePrincipals) {
        if (principal.getType() != HivePrincipalType.GROUP) {
          String msg =
              SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL + principal.getType();
          throw new HiveAuthzPluginException(msg);
        }
        groups.add(principal.getName());
      }

      // grant/revoke role to/from principals
      for (String roleName : roles) {
        if (isGrant) {
          sentryClient.grantRoleToGroups(grantorPrinc.getName(), roleName, groups);
        } else {
          sentryClient.revokeRoleFromGroups(grantorPrinc.getName(), roleName, groups);
        }
      }

    } catch (SentryAccessDeniedException e) {
      HiveOperation hiveOp = isGrant ? HiveOperation.GRANT_ROLE : HiveOperation.REVOKE_ROLE;
      executeOnFailureHooks(hiveOp, e);
    } catch (SentryUserException e) {
      String msg = ""Error when sentryClient grant/revoke role:"" + e.getMessage();
      executeOnErrorHooks(msg, e);
    } finally {
      if (sentryClient != null) {
        sentryClient.close();
      }
    }
  }"
7233373,none,"  @Implementation
  protected int getChildCount() {
    if (children == null) {
      return 0;
    }

    return children.size();
  }"
4852058,none,"    private ProgressNotificationEditor(Editor editor, String path, Function<String, Void> onProgress) {
        this.editor = editor;
        this.path = path;
        this.onProgress = onProgress;
    }"
7268054,none,"    private static int[] yArr(int... vals) {
        if (vals.length == 3) {
            y3arr[0] = vals[0];
            y3arr[1] = vals[1];
            y3arr[2] = vals[2];
            return y3arr;
        } else {
            y4arr[0] = vals[0];
            y4arr[1] = vals[1];
            y4arr[2] = vals[2];
            y4arr[3] = vals[3];
            return y4arr;
        }
    }"
7076341,none,"  public MultiException(Collection<? extends Throwable> causes) {
    this(null, causes);
  }"
7543232,none,"	@Override
	@ManagedOperation
	public void removeChannelMapping(String key) {
		Map<String, String> newChannelMappings = new ConcurrentHashMap<String, String>(this.channelMappings);
		newChannelMappings.remove(key);
		this.channelMappings = newChannelMappings;
	}"
5492178,none,"    @Override
    public boolean makeAcquisitionUnstealable(final MessageInstanceConsumer<?> consumer)
    {
        EntryState state = _state;
        if(state instanceof StealableConsumerAcquiredState
           && ((StealableConsumerAcquiredState) state).getConsumer() == consumer)
        {
            UnstealableConsumerAcquiredState unstealableState = ((StealableConsumerAcquiredState) state).getUnstealableState();
            boolean updated = _stateUpdater.compareAndSet(this, state, unstealableState);
            if(updated)
            {
                notifyStateChange(state, unstealableState);
            }
            return updated;
        }
        return state instanceof UnstealableConsumerAcquiredState
               && ((UnstealableConsumerAcquiredState) state).getConsumer() == consumer;
    }"
6920891,none,"  public boolean hasArchiveNotify() {
    return hasExtension(ArchiveNotify.class);
  }"
7119679,none,"	public void setMsg(String msg) {
		this.msg = msg;
	}"
7448715,none,"    @Override
    public void close() {
        HSObject.invalidate(locals);
        if (parent == null) {
            if (topScope.get() != this) {
                throw new IllegalStateException(""Unexpected JNI scope: "" + topScope.get());
            }
            topScope.set(null);
            objResult = PopLocalFrame(env, objResult);
        } else {
            HotSpotToSVMScope top = parent;
            while (top.parent != null) {
                top = top.parent;
            }
            top.leaf = parent;
        }
        HotSpotToSVMEntryPoints.trace(1, ""HS->SVM[ exit]: %s"", id);
    }"
4138124,none,"    @Override public SqlNode visit(SqlIdentifier id) {
      // First check for builtin functions which don't have
      // parentheses, like ""LOCALTIME"".
      SqlCall call =
          SqlUtil.makeCall(
              validator.getOperatorTable(),
              id);
      if (call != null) {
        return call.accept(this);
      }
      final SqlIdentifier fqId = getScope().fullyQualify(id).identifier;
      SqlNode expandedExpr = expandDynamicStar(id, fqId);
      validator.setOriginal(expandedExpr, id);
      return expandedExpr;
    }"
4578967,none,"    @Override
    public FOPGVTFontFamily resolve(String familyName) {
        FOPGVTFontFamily fopGVTFontFamily = super.resolve(familyName);
        // TODO why don't DB fonts work with GOCA?!?
        if (fopGVTFontFamily != null && fopGVTFontFamily.deriveFont(1, new HashMap())
                .getFont().getFontMetrics() instanceof DoubleByteFont) {
            notifyDBFontRejection(fopGVTFontFamily.getFamilyName());
            fopGVTFontFamily = null;
        }
        return fopGVTFontFamily;
    }"
9516021,none,"  private void lostFoundInit(DFSClient dfs) {
    lfInited = true;
    try {
      String lfName = ""/lost+found"";

      final HdfsFileStatus lfStatus = dfs.getFileInfo(lfName);
      if (lfStatus == null) { // not exists
        lfInitedOk = dfs.mkdirs(lfName, null, true);
        lostFound = lfName;
      } else if (!lfStatus.isDirectory()) { // exists but not a directory
        LOG.warn(""Cannot use /lost+found : a regular file with this name exists."");
        lfInitedOk = false;
      }  else { // exists and is a directory
        lostFound = lfName;
        lfInitedOk = true;
      }
    }  catch (Exception e) {
      e.printStackTrace();
      lfInitedOk = false;
    }
    if (lostFound == null) {
      LOG.warn(""Cannot initialize /lost+found ."");
      lfInitedOk = false;
      internalError = true;
    }
  }"
6873573,none,"	public void registerProjectsToFileBasedWorkspace(Iterable<URI> projectURIs, FileBasedWorkspace workspace)
			throws N4JSCompileException {

		// TODO GH-783 refactor FileBasedWorkspace, https://github.com/eclipse/n4js/issues/783
		// this is reverse mapping of the one that is kept in the workspace
		Map<String, URI> registeredProjects = new HashMap<>();
		workspace.getAllProjectLocationsIterator().forEachRemaining(uri -> {
			String projectName = workspace.getProjectDescription(uri).getProjectName();
			registeredProjects.put(projectName, URIUtils.normalize(uri));
		});

		// register all projects with the file based workspace.
		for (URI uri : projectURIs) {
			URI projectURI = URIUtils.normalize(uri);

			final ProjectDescription projectDescription = projectDescriptionLoader
					.loadProjectDescriptionAtLocation(projectURI);

			if (projectDescription == null) {
				throw new N4JSCompileException(
						""Cannot load project description for project at "" + projectURI.toFileString()
								+ "". Make sure the project contains a valid package.json file."");
			}

			final String projectName = projectDescription.getProjectName();

			if (skipRegistering(projectName, projectURI, registeredProjects)) {
				if (logger != null && logger.isCreateDebugOutput()) {
					logger.debug(""Skipping already registered project '"" + projectURI + ""'"");
				}
				/*
				 * We could call FileBasedWorkspace.registerProject which would fail silently. Still to avoid potential
				 * side effects and to keep {@code registeredProjects} management simpler,we will skip it explicitly.
				 */
				continue;
			}

			try {
				if (logger != null && logger.isCreateDebugOutput()) {
					logger.debug(""Registering project '"" + projectURI + ""'"");
				}
				workspace.registerProject(projectURI);
				registeredProjects.put(projectName, projectURI);
			} catch (N4JSBrokenProjectException e) {
				throw new N4JSCompileException(""Unable to register project '"" + projectURI + ""'"", e);
			}
		}
	}"
8920121,none,"  public void tryStoreVectorizedKey(HiveKey key, boolean partColsIsNull, int batchIndex)
      throws HiveException, IOException {
    // Assumption - batchIndex is increasing; startVectorizedBatch was called
    int size = indexes.size();
    int index = size < topN ? size : evicted;
    keys[index] = Arrays.copyOf(key.getBytes(), key.getLength());
    distKeyLengths[index] = key.getDistKeyLength();
    hashes[index] = key.hashCode();
    Integer collisionIndex = indexes.store(index);
    if (null != collisionIndex) {
      /*
       * since there is a collision index will be used for the next value 
       * so have the map point back to original index.
       */
      if ( indexes instanceof HashForGroup ) {
        indexes.store(collisionIndex);
      }
      // forward conditional on the survival of the corresponding key currently in indexes.
      ++batchNumForwards;
      batchIndexToResult[batchIndex] = MAY_FORWARD - collisionIndex;
      return;
    }
    indexToBatchIndex[index] = batchIndex;
    batchIndexToResult[batchIndex] = index;
    if (size != topN) return;
    evicted = indexes.removeBiggest();  // remove the biggest key
    if (index == evicted) {
      excluded++;
      batchIndexToResult[batchIndex] = EXCLUDE;
      indexToBatchIndex[index] = -1;
      return; // input key is bigger than any of keys in hash
    }
    removed(evicted);
    int evictedBatchIndex = indexToBatchIndex[evicted];
    if (evictedBatchIndex >= 0) {
      // reset the result for the evicted index
      batchIndexToResult[evictedBatchIndex] = EXCLUDE;
      indexToBatchIndex[evicted] = -1;
    }
    // Evict all results grouped with this index; it cannot be any key further in the batch.
    // If we evict a key from this batch, the keys grouped with it cannot be earlier that that key.
    // If we evict a key that is not from this batch, initial i = (-1) + 1 = 0, as intended.
    int evictedForward = (MAY_FORWARD - evicted);
    for (int i = evictedBatchIndex + 1; i < batchIndex && (batchNumForwards > 0); ++i) {
      if (batchIndexToResult[i] == evictedForward) {
        batchIndexToResult[i] = EXCLUDE;
        --batchNumForwards;
      }
    }
  }"
5843574,none,"    @Override
    public boolean hasMembers() {
        if (membership == null ) return false;
        return membership.hasMembers();
    }"
6824306,none,"    public final void norm1_LogicalORExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            norm1_LogicalORExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
6915312,none,"  private static boolean shouldParseContainerAtom(int atom) {
    return atom == Atom.TYPE_moov
        || atom == Atom.TYPE_trak
        || atom == Atom.TYPE_mdia
        || atom == Atom.TYPE_minf
        || atom == Atom.TYPE_stbl
        || atom == Atom.TYPE_edts
        || atom == Atom.TYPE_meta;
  }"
6841292,none,"  public static boolean match(
      String patternText,
      ParseTreeNode specimen,
      Map<String, ParseTreeNode> bindings) {
    Map<String, ParseTreeNode> tempBindings = getPatternNode(patternText)
        .match(specimen);

    if (tempBindings != null) {
      bindings.putAll(tempBindings);
      return true;
    }
    return false;
  }"
9093819,none,"    public static ToolsRFFI getToolsRFFI() {
        return getRFFI().toolsRFFI;
    }"
6923161,none,"    private static Range<Integer> union(Range<Integer> x, Range<Integer> y) {
      return x.isEmpty() ? y : y.isEmpty() ? x : x.span(y).canonical(INTEGERS);
    }"
7074267,none,"    @Override
    public TypeKind getKind() {
      return TypeKind.DECLARED;
    }"
6085688,none,"    @Override
    @TypeInfo(""ceylon.language.meta.model::CallableConstructor<Type,Arguments>|ceylon.language::Null"")
    public CallableConstructor<Type, Arguments> getDefaultConstructor() {
        if (hasConstructors() || hasEnumerated()) {
            Object ctor = getConstructor($reifiedArguments, """");
            if (ctor instanceof CallableConstructor) {
                return ((CallableConstructor<Type, Arguments>)ctor);
            } else {
                return null;
            }
        } else {
            return new ClassInitializerConstructor<>(this);
        }
    }"
5106994,none,"    private int computeBatchSize(int position, int length) {
        int batchSize = QUERY_BATCH_SIZE;
        while (length - position < batchSize) {
            batchSize = batchSize >> 1;
        }
        return batchSize;
    }"
8636574,none,"        private static List<Locale> getAvailableLocaleList() {
            TreeMap<String, Locale> localeMap = new TreeMap<>();
            String localesString = UtilProperties.getPropertyValue(""general"", ""locales.available"");
            if (UtilValidate.isNotEmpty(localesString)) {
                List<String> idList = StringUtil.split(localesString, "","");
                for (String id : idList) {
                    Locale curLocale = parseLocale(id);
                    localeMap.put(curLocale.getDisplayName(), curLocale);
                }
            } else {
                Locale[] locales = Locale.getAvailableLocales();
                for (int i = 0; i < locales.length && locales[i] != null; i++) {
                    String displayName = locales[i].getDisplayName();
                    if (!displayName.isEmpty()) {
                        localeMap.put(displayName, locales[i]);
                    }
                }
            }
            return Collections.unmodifiableList(new ArrayList<>(localeMap.values()));
        }"
7832597,none,"  private static VersionTagHolder createVersionTagHolder() {
    VersionTagHolder versionHolder = new VersionTagHolder();
    versionHolder.setOperation(Operation.GET_FOR_REGISTER_INTEREST);
    return versionHolder;
  }"
8404033,none,"    public void setHeight(Integer height) {
        this.height = height;
    }"
6605165,none,"    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }"
7043418,none,"    EC2CredentialsUtils(ConnectionUtils connectionUtils) {
        this.connectionUtils = connectionUtils;
    }"
4452266,none,"  public AbstractFileGroupScan(String userName) {
    super(userName);
  }"
8132887,none,"  public DatatypeRulesTestLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DatatypeRulesTestLanguagePackage.eINSTANCE;
    }
  }"
6957883,none,"  @Override
  public boolean contains(@Nullable Object edge) {
    E connectingEdge = getConnectingEdge();
    return (connectingEdge != null && connectingEdge.equals(edge));
  }"
7374061,none,"	public void setRetentionDuration(String retentionDuration) {
		this.retentionDuration = retentionDuration;
	}"
5991696,none,"    public void info(Supplier<String> msg) {
        if (log.isInfoEnabled()) {
            log.info(msg.get());
        }
    }"
8432784,none,"    public AllRedisProcessorsCreator(RedisClient redisClient, ExchangeConverter exchangeConverter) {
        this.processors.putAll(new ConnectionRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new HashesRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new KeysRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new ListsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new PubSubRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new SetsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new SortedSetsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new StringsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new TransactionRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new GeoRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
    }"
7733996,none,"    @Override
    public boolean isDone() {
        return super.isDone();
    }"
8659626,none,"    public RecurrenceRule(GenericValue rule) throws RecurrenceRuleException {
        this.rule = rule;
        if (!""RecurrenceRule"".equals(rule.getEntityName())) {
            throw new RecurrenceRuleException(""Invalid RecurrenceRule Value object."");
        }
        init();
    }"
7881040,none,"  @Override
  public ArchiveMemberPath getRelativeArchiveMemberPath(SourcePath sourcePath) {
    Preconditions.checkState(sourcePath instanceof ArchiveMemberSourcePath);
    ArchiveMemberSourcePath archiveMemberSourcePath = (ArchiveMemberSourcePath) sourcePath;

    Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());

    return ArchiveMemberPath.of(archiveRelativePath, archiveMemberSourcePath.getMemberPath());
  }"
6666849,none,"    @Override
    public APIRequestUpdate setParam(String param, Object value) {
      setParamInternal(param, value);
      return this;
    }"
4301941,none,"    public String getAdminRealm() {
        return adminServerSetting.getAdminRealm();
    }"
9442366,none,"    private static void setFieldValue(Field field, String value) {
        try {
            field.set(null, value);
        } catch (IllegalArgumentException | IllegalAccessException e) {
            throw new Error(""Unable to access or set message for field "" + field.getName());
        }
    }"
4371297,none,"        MtomValidationErrorHandler(ErrorHandler origErrorHandler, Node node) {
            this.origErrorHandler = origErrorHandler;
            this.node = node;
        }"
5625637,none,"        @Override
        public int getDefaultBackgroundColor()
        {
            return 0;
        }"
8038797,none,"	public static Iterator<EObject> getNonDerivedContents(EObject eObject) {
		EClassImpl.FeatureSubsetSupplier featureSupplier = (EClassImpl.FeatureSubsetSupplier) eObject.eClass().getEAllStructuralFeatures();
		EStructuralFeature[] eStructuralFeatures = featureSupplier.containments();

		return (eStructuralFeatures == null 
				? EContentsEList.<EObject> emptyContentsEList()
				: new EContentsEList<EObject>(eObject, eStructuralFeatures) {
					@Override
					protected ListIterator<EObject> newResolvingListIterator() {
						return new ResolvingFeatureIteratorImpl<EObject>(eObject, eStructuralFeatures) {
							@Override
							protected boolean isIncluded(EStructuralFeature eStructuralFeature) {
								return !eStructuralFeature.isDerived();
							}
						};
					}
				}).iterator();
	}"
7357208,none,"    public UsernamePasswordCredentials(final String username, final String password) {
        super();

        if (username == null) {
            throw new IllegalArgumentException(""Username may not be null"");
        }

        this.username = username;
        this.password = password;
    }"
9528887,none,"    @Override
    public TFOOT<T> $onmouseover(String value) {
      addAttr(""onmouseover"", value);
      return this;
    }"
8968711,none,"    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }"
6513603,none,"    ProductVersionExpansionRun(P2TargetPlatform targetPlatform, File productFile) {
        this.targetPlatform = targetPlatform;
        this.productFile = productFile;
    }"
7273316,none,"    public JAntiLabel(String text) {
        super(text);
    }"
7711083,none,"        public final @NotNull Builder setHeader(@NotNull String header) {
            this.setArg2(Unpooled.wrappedBuffer(header.getBytes(StandardCharsets.UTF_8)));
            this.header = header;
            return this;
        }"
3738168,none,"      public Builder clear() {
        super.clear();
        tableId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        schemaName_ = """";
        bitField0_ = (bitField0_ & ~0x00000002);
        tableName_ = """";
        bitField0_ = (bitField0_ & ~0x00000004);
        eventType_ = """";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (oldKeysBuilder_ == null) {
          oldKeys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          oldKeysBuilder_.clear();
        }
        if (keysBuilder_ == null) {
          keys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          keysBuilder_.clear();
        }
        if (columnsBuilder_ == null) {
          columns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          columnsBuilder_.clear();
        }
        executeTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        pairId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        syncMode_ = """";
        bitField0_ = (bitField0_ & ~0x00000200);
        syncConsistency_ = """";
        bitField0_ = (bitField0_ & ~0x00000400);
        size_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        remedy_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        sql_ = """";
        bitField0_ = (bitField0_ & ~0x00002000);
        ddlSchemaName_ = """";
        bitField0_ = (bitField0_ & ~0x00004000);
        hint_ = """";
        bitField0_ = (bitField0_ & ~0x00008000);
        withoutSchema_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }"
8142013,none,"      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }"
5045944,none,"    public RDFParserBuilder fromString(String string) {
        clearSource();
        this.content = string;
        return this;
    }"
8894917,none,"    public static org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.PurgeCacheResponseProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }"
4975742,none,"    private void to(final TopicNameExtractor<K, V> topicExtractor, final ProducedInternal<K, V> produced) {
        final String name = builder.newProcessorName(SINK_NAME);

        final StreamSinkNode<K, V> sinkNode = new StreamSinkNode<>(
            name,
            topicExtractor,
            produced
        );

        builder.addGraphNode(this.streamsGraphNode, sinkNode);
    }"
8496550,none,"    public StateMachine() {
        _initialStateEntry = new StateEntry(null);
    }"
4051372,none,"  public boolean hasFailed() throws ExecutionException, InterruptedException {
    if (processBundleResponse != null && processBundleResponse.toCompletableFuture().isDone()) {
      return !processBundleResponse.toCompletableFuture().get().getError().isEmpty();
    } else {
      // At the very least, we don't know that this has failed yet.
      return false;
    }
  }"
6986522,none,"  public SynchronizedStatement(SourcePosition sourcePosition, Expression expression, Block body) {
    super(sourcePosition);
    this.expression = checkNotNull(expression);
    this.body = checkNotNull(body);
  }"
5516822,none,"  @Override
  public byte[] encode(final T obj) {
    final Encoder<T> encoder = (Encoder<T>) clazzToEncoderMap.get(obj.getClass());
    if (encoder == null) {
      throw new RemoteRuntimeException(""Encoder for "" + obj.getClass() + "" not known."");
    }

    final WakeTuplePBuf.Builder tupleBuilder = WakeTuplePBuf.newBuilder();
    tupleBuilder.setClassName(obj.getClass().getName());
    tupleBuilder.setData(ByteString.copyFrom(encoder.encode(obj)));
    return tupleBuilder.build().toByteArray();
  }"
6198340,none,"    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (!(o instanceof Key)) {
        return false;
      }
      Key key = (Key) o;
      return annotationType.equals(key.annotationType) && type.equals(key.type);
    }"
4555364,none,"    public static boolean isInfinite(Number num) {
        if (num instanceof Double) {
            return ((Double) num).isInfinite();
        } else if (num instanceof Float) {
            return ((Float) num).isInfinite();
        } else if (hasTypeThatIsKnownToNotSupportInfiniteAndNaN(num)) {
            return false;
        } else {
            throw new UnsupportedNumberClassException(num.getClass());
        }           
    }"
4665134,none,"	@Override
	public <T> T invokeAny(
		@Nonnull Collection<? extends Callable<T>> tasks,
		long timeout,
		@Nonnull TimeUnit unit) throws ExecutionException, TimeoutException {

		long end = System.currentTimeMillis() + unit.toMillis(timeout);
		Exception exception = null;

		Iterator<? extends Callable<T>> iterator = tasks.iterator();

		while (end > System.currentTimeMillis() && iterator.hasNext()) {
			Callable<T> callable = iterator.next();

			try {
				return callable.call();
			} catch (Exception e) {
				// ignore exception and try next
				exception = e;
			}
		}

		if (iterator.hasNext()) {
			throw new TimeoutException(""Could not finish execution of tasks within time."");
		} else {
			throw new ExecutionException(""No tasks finished successfully."", exception);
		}
	}"
7184071,none,"  private void validateArrayStep(String arrStep)
    throws QueryException
  {
    boolean wildAllowed  = true;    // * is allowed initially
    boolean digitAllowed = true;    // Digit is allowed as next char
    boolean commaAllowed = false;   // Comma is allowed as next char

    boolean afterDigit    = false;  // Last non-space was a digit
    boolean toAllowed     = false;  // Any space after digit allows ""to""
    boolean afterTo       = false;  // After ""to"" expecting range end
    boolean toInProgress  = false;  // Prior char was 't' in ""to""
    boolean spaceRequired = false;  // A whitespace is required (after ""to"")
    boolean digitRequired = false;  // Digit required after comma or ""to""

    for (int i = 1; i < arrStep.length() - 1; ++i)
    {
      char currentChar = arrStep.charAt(i);

      if (currentChar == '*')
      {
        if (!wildAllowed)
          throwArrayException(arrStep);

        wildAllowed  = false;  // We've seen the only allowed wildcard
        digitAllowed = false;  // Only whitespace is allowed afterward
      }
      else if (currentChar == ',')
      {
        if (!commaAllowed)
          throwArrayException(arrStep);

        commaAllowed  = false;
        toAllowed     = false;
        afterDigit    = false;
        afterTo       = false;
        digitRequired = true;  // Next non-space must be a digit
      }
      else if (""0123456789"".indexOf(currentChar) >= 0)
      {
        if (!digitAllowed)
          throwArrayException(arrStep);

        wildAllowed   = false; // Wildcard no longer allowed
        commaAllowed  = true;
        afterDigit    = true;
        digitRequired = false;
      }
      else if ("" \t\n\r"".indexOf(currentChar) >= 0)
      {
        // Whitespace not allowed when parsing ""to""
        if (toInProgress)
          throwArrayException(arrStep);

        if (afterDigit)
        {
          // Last non-space was a digit - next non-space is ""to"" or comma
          digitAllowed = false;
          toAllowed    = !afterTo;
          commaAllowed = true;
        }
        else if (spaceRequired)
        {
          // This is the whitespace required after ""to""
          digitAllowed  = true;
          spaceRequired = false;
          digitRequired = true;  // At least one digit must follow
        }
      }
      else if (currentChar == 't')
      {
        if (!toAllowed)
          throwArrayException(arrStep);

        toInProgress = true;  // Next char must be the 'o' in ""to""
        commaAllowed = false;
        afterDigit   = false;
      }
      else if (currentChar == 'o')
      {
        if (!toInProgress)
          throwArrayException(arrStep);

        toInProgress  = false;
        toAllowed     = false;
        afterTo       = true;
        spaceRequired = true;  // ""to"" must be followed by whitespace
      }
      else
      {
        // Invalid character
        throwArrayException(arrStep);
      }
    }

    // Empty array or only whitespace found
    if (wildAllowed)
      throwArrayException(arrStep);

    // Incomplete ""to"" or comma sequence at end of subscript
    if (toInProgress || spaceRequired || digitRequired)
      throwArrayException(arrStep);
  }"
8001801,none,"    public final boolean synpred87_InternalBacktrackingContentAssistTestLanguage() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalBacktrackingContentAssistTestLanguage_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println(""impossible: ""+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }"
7186067,none,"        public CreateBudgetDetails build() {
            CreateBudgetDetails __instance__ =
                    new CreateBudgetDetails(
                            compartmentId,
                            targetCompartmentId,
                            displayName,
                            description,
                            amount,
                            resetPeriod,
                            freeformTags,
                            definedTags);
            __instance__.__explicitlySet__.addAll(__explicitlySet__);
            return __instance__;
        }"
3722557,none,"      public Builder setPrim(com.android.aapt.Resources.Primitive value) {
        copyOnWrite();
        instance.setPrim(value);
        return this;
        }"
9409891,none,"    protected Context getContinuationContext(Name n) throws NamingException {
        Object obj = lookup(n.get(0));
        CannotProceedException cpe = new CannotProceedException();
        cpe.setResolvedObj(obj);
        cpe.setEnvironment(myEnv);
        return NamingManager.getContinuationContext(cpe);
    }"
4315829,none,"    @Override
    public int hashCode()
    {
        int hash = 37;

        if ( baseDn != null )
        {
            hash = hash * 17 + baseDn.hashCode();
        }

        hash = hash * 17 + aliasDerefMode.hashCode();
        hash = hash * 17 + scope.hashCode();
        hash = hash * 17 + Long.valueOf( sizeLimit ).hashCode();
        hash = hash * 17 + timeLimit;
        hash = hash * 17 + ( typesOnly ? 0 : 1 );

        if ( attributes != null )
        {
            hash = hash * 17 + attributes.size();

            // Order doesn't matter, thus just add hashCode
            for ( String attr : attributes )
            {
                if ( attr != null )
                {
                    hash = hash + attr.hashCode();
                }
            }
        }

        BranchNormalizedVisitor visitor = new BranchNormalizedVisitor();
        filterNode.accept( visitor );
        hash = hash * 17 + filterNode.toString().hashCode();
        hash = hash * 17 + super.hashCode();

        return hash;
    }"
4151853,none,"  public AvaticaStatement newStatement(AvaticaConnection connection,
      Meta.StatementHandle h, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) {
    return new AvaticaJdbc41Statement(connection, h, resultSetType,
        resultSetConcurrency, resultSetHoldability);
  }"
7671918,none,"    public QMUIAlphaImageButton addRightImageButton(int drawableResId, int viewId) {
        return mTopBar.addRightImageButton(drawableResId, viewId);
    }"
4720056,none,"    @Override
    public void generateGroovy(GroovyGenerationContext context) {
        context.append(label);
        context.append("":"");
        expr.generateGroovy(context);
    }"
4301198,none,"        @Override
        public int getValue() {
            return ordinal();
        }"
5634327,none,"    public boolean equals(Object object)
    {
        boolean isEqual = false;

        if (super.equals(object) && (object instanceof DefineShape))
        {
            DefineShape defineShape = (DefineShape) object;

            if ( equals(defineShape.bounds, this.bounds) &&
                 equals(defineShape.shapeWithStyle, this.shapeWithStyle) &&
                 equals(defineShape.edgeBounds, this.edgeBounds) &&
                 (defineShape.usesFillWindingRule == this.usesFillWindingRule) &&
                 (defineShape.usesNonScalingStrokes == this.usesNonScalingStrokes) &&
                  (defineShape.usesScalingStrokes == this.usesScalingStrokes))
            {
                isEqual = true;
            }
        }

        return isEqual;
    }"
3796407,none,"      public void read(org.apache.thrift.protocol.TProtocol iprot, getNettyMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MetricInfo();
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }"
7748135,none,"        private boolean containsDownEntity(Set<Entity> seeds) {
            for (Entity seed : seeds) {
                if (!isViableSeed(seed)) {
                    return true;
                }
            }
            return false;
        }"
4297095,none,"    @Override
    public List<Permission> sessionPermissions(Session session)
        throws SecurityException
    {
        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, CLS_NM + "".sessionPermissions"");
        List<Permission> retPerms;
        FortRequest request = new FortRequest();
        request.setContextId(this.contextId);
        request.setSession(session);
        String szRequest = RestUtils.marshal(request);
        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_PERMS);
        FortResponse response = RestUtils.unmarshall(szResponse);
        if (response.getErrorCode() == 0)
        {
            retPerms = response.getEntities();
            Session outSession = response.getSession();
            session.copy(outSession);
        }
        else
        {
            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());
        }
        return retPerms;
    }"
6458150,none,"    public Optional<UserEntity> getUser ( final String userId )
    {
        return Optional.ofNullable ( this.userMap.get ( userId ) );
    }"
5426714,none,"    @Override
    @UnsupportedOperation
    public void clear() {
        throw new UnsupportedOperationException(ERROR_MSG);
    }"
8423865,none,"    public void setSslContextParameters(String sslContextParameters) {
        this.sslContextParameters = sslContextParameters;
    }"
6051478,none,"	@Override
	public IDataset getComposition() {
		return getDataset(NX_COMPOSITION);
	}"
7424164,none,"    @Override
    public Value emitFloatConvert(FloatConvert op, Value inputVal) {
        PlatformKind resultPlatformKind = getFloatConvertResultKind(op);
        LIRKind resultLirKind = LIRKind.combine(inputVal).changeType(resultPlatformKind);
        Variable result = getLIRGen().newVariable(resultLirKind);
        getLIRGen().append(new AArch64FloatConvertOp(op, result, asAllocatable(inputVal)));
        return result;
    }"
8200621,none,"	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}"
6529636,none,"    static public Object postUpdate(String itemName, String stateString) {
        ItemRegistry registry = ScriptServiceUtil.getItemRegistry();
        EventPublisher publisher = ScriptServiceUtil.getEventPublisher();
        if (publisher != null && registry != null) {
            try {
                Item item = registry.getItem(itemName);
                State state = TypeParser.parseState(item.getAcceptedDataTypes(), stateString);
                if (state != null) {
                    publisher.post(ItemEventFactory.createStateEvent(itemName, state));
                } else {
                    LoggerFactory.getLogger(BusEvent.class).warn(
                            ""Cannot convert '{}' to a state type which item '{}' accepts: {}."", stateString, itemName,
                            getAcceptedDataTypeNames(item));
                }
            } catch (ItemNotFoundException e) {
                LoggerFactory.getLogger(BusEvent.class).warn(""Item '{}' does not exist."", itemName);
            }
        }
        return null;
    }"
8087321,none,"    public final EObject ruleModel() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;


        	enterRule();

        try {
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:77:2: ( ( (lv_name_0_0= RULE_ID ) ) )
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:78:2: ( (lv_name_0_0= RULE_ID ) )
            {
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:78:2: ( (lv_name_0_0= RULE_ID ) )
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:79:3: (lv_name_0_0= RULE_ID )
            {
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:79:3: (lv_name_0_0= RULE_ID )
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:80:4: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2); 

            				newLeafNode(lv_name_0_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0());
            			

            				if (current==null) {
            					current = createModelElement(grammarAccess.getModelRule());
            				}
            				setWithLastConsumed(
            					current,
            					""name"",
            					lv_name_0_0,
            					""org.eclipse.xtext.common.Terminals.ID"");
            			

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
6579581,none,"  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.OPERATION;
  }"
5555115,none,"    public list_sentry_privileges_by_user_and_itsgroups_args(
      TListSentryPrivilegesRequest request)
    {
      this();
      this.request = request;
    }"
7747392,none,"    @Override
    public RabbitBroker getParent() {
        return (RabbitBroker) super.getParent();
    }"
7674694,none,"	private void addJobExecutionListener() {
		// Add all job execution listeners available in the bean factory
		// We won't have multiple batch job definitions on a given job module; hence all the job execution listeners
		// available in the bean factory correspond to the job module's batch job.
		Map<String, JobExecutionListener> listeners = this.beanFactory.getBeansOfType(JobExecutionListener.class);
		this.jobExecutionListeners.addAll(listeners.values());
	}"
8457702,none,"    public static void changeFunctionEndToken(String... endToken) {
        for (SimpleTokenType type : KNOWN_TOKENS) {
            if (type.getType() == TokenType.functionEnd) {
                KNOWN_TOKENS.remove(type);
            }
        }

        // add after the start tokens
        int pos = 0;
        for (SimpleTokenType type : KNOWN_TOKENS) {
            if (type.getType() == TokenType.functionStart) {
                pos++;
            }
        }

        // add after function start of list as its a more common token to be used
        for (String token : endToken) {
            KNOWN_TOKENS.add(pos, new SimpleTokenType(TokenType.functionEnd, token));
        }
    }"
7989222,none,"    public final void mT__74() throws RecognitionException {
        try {
            int _type = T__74;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalBug462047Lang.g:72:7: ( 'null' )
            // InternalBug462047Lang.g:72:9: 'null'
            {
            match(""null""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
9111672,none,"	protected void createButtonGroup( Group grpTop )
	{
		btnAdd = new Button( grpTop, SWT.NONE );
		{
			btnAdd.setText( Messages.getString( ""LineSeriesMarkerSheet.Label.Add"" ) ); //$NON-NLS-1$
			btnAdd.addSelectionListener( this );
		}

		newMarkerEditor = new MarkerEditorComposite( grpTop,
				createMarker( ),
				getContext( ),
				getDefaultMarker( ) );
		if ( markerTypeSet != null )
		{
			newMarkerEditor.setSupportedMarkerTypes( markerTypeSet );
		}
		if ( outlineText != null )
		{
			newMarkerEditor.setOutlineText( outlineText );
		}
		
		btnRemove = new Button( grpTop, SWT.NONE );
		{
			btnRemove.setText( Messages.getString( ""LineSeriesMarkerSheet.Label.Remove"" ) ); //$NON-NLS-1$
			btnRemove.addSelectionListener( this );
		}

		btnUp = new Button( grpTop, SWT.ARROW | SWT.UP );
		{
			btnUp.setToolTipText( Messages.getString( ""PaletteEditorComposite.Lbl.Up"" ) ); //$NON-NLS-1$
			btnUp.addSelectionListener( this );
		}

		btnDown = new Button( grpTop, SWT.ARROW | SWT.DOWN );
		{
			btnDown.setToolTipText( Messages.getString( ""PaletteEditorComposite.Lbl.Down"" ) ); //$NON-NLS-1$
			btnDown.addSelectionListener( this );
		}
	}"
6640747,none,"  public static void d(String tag, Throwable tr, String msg, Object... args) {
    if (sHandler.isLoggable(DEBUG)) {
      d(tag, formatString(msg, args), tr);
    }
  }"
5939530,none,"    static String replaceSubstitution(String base, Pattern from, String to, 
                                      boolean repeat) {
      Matcher match = from.matcher(base);
      if (repeat) {
        return match.replaceAll(to);
      } else {
        return match.replaceFirst(to);
      }
    }"
8333384,none,"		public final Thread start() {
			if (!init) {
				throw new IllegalStateException(""not initialized"");
			}
			synchronized (this) {
				if (started) {
					throw new IllegalStateException(""already started"");
				}
				started = true;
			}
			try {
				process = Runtime.getRuntime().exec(command);
			} catch (IOException e) {
				stop(e, Integer.MIN_VALUE);
				return null;
			}
			errStream = new FileUtil.Pipe(process.getErrorStream(), System.err);
			if (null != errSnoop) {
				errStream.setSnoop(errSnoop);
			}
			outStream = new FileUtil.Pipe(process.getInputStream(), System.out);
			if (null != outSnoop) {
				outStream.setSnoop(outSnoop);
			}
			inStream = new FileUtil.Pipe(System.in, process.getOutputStream());
			// start 4 threads, process & pipes for in, err, out
			Runnable processRunner = new Runnable() {
				@Override
				public void run() {
					Throwable thrown = null;
					int result = Integer.MIN_VALUE;
					try {
						// pipe threads are children
						new Thread(errStream).start();
						new Thread(outStream).start();
						new Thread(inStream).start();
						process.waitFor();
						result = process.exitValue();
					} catch (Throwable e) {
						thrown = e;
					} finally {
						stop(thrown, result);
					}
				}
			};
			Thread result = new Thread(processRunner, label);
			result.start();
			return result;
		}"
7238349,none,"  @Override
  public void finishActivity(Activity activity) {
    checkNotNull(controller);
    checkState(controller.get() == activity);
    activity.finish();
    Stage stage = ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);
    switch (stage) {
      case RESUMED:
        controller.pause().stop().destroy();
        return;
      case PAUSED:
        controller.stop().destroy();
        return;
      case STOPPED:
        controller.destroy();
        return;
      default:
        throw new IllegalStateException(
            String.format(
                ""Activity's stage must be RESUMED, PAUSED or STOPPED but was %s."", stage));
    }
  }"
5243521,none,"  private EntityCollection createETStreamOnComplexProp(Edm edm, OData odata) {
    EntityCollection entityCollection = new EntityCollection();

    Link readLink = new Link();
    readLink.setRel(Constants.NS_MEDIA_READ_LINK_REL);
    readLink.setHref(""readLink"");
    Entity entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyStream"", createImage(""darkturquoise"")));
    readLink.setInlineEntity(entity);
    
    Link readLink1 = new Link();
    readLink1.setRel(Constants.NS_MEDIA_READ_LINK_REL);
    readLink1.setHref(""readLink"");
    entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyEntityStream"", createImage(""darkturquoise"")));
    readLink1.setInlineEntity(entity);
    
    entityCollection.getEntities().add(new Entity()
        .addProperty(createPrimitive(""PropertyInt16"", Short.MAX_VALUE))
        .addProperty(createPrimitive(""PropertyInt32"", Integer.MAX_VALUE))
        .addProperty(new Property(null, ""PropertyEntityStream"", ValueType.PRIMITIVE, readLink1))
        .addProperty(createComplex(""PropertyCompWithStream"",
            ComplexTypeProvider.nameCTWithStreamProp.getFullQualifiedNameAsString(),
            new Property(null, ""PropertyStream"", ValueType.PRIMITIVE, readLink),
            createComplex(""PropertyComp"", 
                ComplexTypeProvider.nameCTTwoPrim.getFullQualifiedNameAsString(),
                createPrimitive(""PropertyInt16"", (short) 333),
                createPrimitive(""PropertyString"", ""TEST123"")))));
    
    Link editLink = new Link();
    editLink.setRel(Constants.NS_MEDIA_EDIT_LINK_REL);
    editLink.setHref(""http://mediaserver:1234/editLink"");
    editLink.setMediaETag(""eTag"");
    editLink.setType(""image/jpeg"");
    entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyStream"", createImage(""royalblue"")));
    editLink.setInlineEntity(entity);
    
    Link editLink2 = new Link();
    editLink2.setRel(Constants.NS_MEDIA_EDIT_LINK_REL);
    editLink2.setHref(""http://mediaserver:1234/editLink"");
    editLink2.setMediaETag(""eTag"");
    editLink2.setType(""image/jpeg"");
    entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyEntityStream"", createImage(""royalblue"")));
    editLink2.setInlineEntity(entity);

    entityCollection.getEntities().add(new Entity()
        .addProperty(createPrimitive(""PropertyInt16"", (short) 7))
        .addProperty(createPrimitive(""PropertyInt32"", (Integer) 10))
        .addProperty(new Property(null, ""PropertyEntityStream"", ValueType.PRIMITIVE, editLink2))
        .addProperty(createComplex(""PropertyCompWithStream"",
            ComplexTypeProvider.nameCTWithStreamProp.getFullQualifiedNameAsString(),
            new Property(null, ""PropertyStream"", ValueType.PRIMITIVE, editLink),
            createComplex(""PropertyComp"", 
                ComplexTypeProvider.nameCTTwoPrim.getFullQualifiedNameAsString(),
                createPrimitive(""PropertyInt16"", (short) 333),
                createPrimitive(""PropertyString"", ""TEST123"")))));

    setEntityType(entityCollection, edm.getEntityType(EntityTypeProvider.nameETStreamOnComplexProp));
    createEntityId(edm, odata, ""ESStreamOnComplexProp"", entityCollection);
    createOperations(""ESStreamOnComplexProp"", entityCollection, EntityTypeProvider.nameETStreamOnComplexProp);
    return entityCollection;
  }"
8778291,none,"    @Override
    HttpURLConnection getResponse(final HttpURLConnection conn)
        throws IOException {
      return conn;
    }"
3933339,none,"  private final void writePreInvoke() {
    //The place to go if the listener is null
    Label nullListener = newLabel();
    beginListenerInvocation(nullListener);

    // The listener is on the stack, we need (target, method, args)
    
    loadLocal(dispatchTarget);
    getStatic(typeBeingWoven, methodStaticFieldName, METHOD_TYPE);
    loadArgArray();
    
    //invoke it and store the token returned
    invokeInterface(LISTENER_TYPE, PRE_INVOKE_METHOD);
    storeLocal(preInvokeReturnedToken);
    
    mark(nullListener);
  }"
4594104,none,"  public void forEachIntByte(IntByteConsumer f) {
    for (int i = 0; i < size(); ++i) {
      f.apply(keys[i], values[i]);
    }
  }"
7357470,none,"    public LegacyActionKeyBindingSupport(final IWorkbench workbench, final Shell shell) {
        this(workbench, shell, null);
    }"
5785684,none,"  @Override
  public void toSummaryProtoStream(OutputStream outputStream) throws IOException {
    ProtoUtils.toSummaryEventProto(dagID, commitStartTime,
        getEventType(), null).writeDelimitedTo(outputStream);
  }"
7294753,none,"        @SuppressWarnings(""rawtypes"")
        protected Class createClass(byte[] code, ClassNode classNode) {
            theClass = classNode;
            return super.createClass(code, classNode);
        }"
7485370,none,"	public Customer1085Service(Customer1085Repository repo) {
	}"
4541660,none,"    @Override
    public void populate(Workbook workbook,String dateFormat) {
        Sheet savingsTransactionSheet = workbook.createSheet(TemplatePopulateImportConstants.SAVINGS_TRANSACTION_SHEET_NAME);
        setLayout(savingsTransactionSheet);
        officeSheetPopulator.populate(workbook,dateFormat);
        clientSheetPopulator.populate(workbook,dateFormat);
        extrasSheetPopulator.populate(workbook,dateFormat);
        populateSavingsTable(savingsTransactionSheet,dateFormat);
        setRules(savingsTransactionSheet,dateFormat);
        setDefaults(savingsTransactionSheet);
    }"
4088843,none,"    @Override
    public void customize() {
        newScript(CUSTOMIZING)
                .body.append(
                        format(""mkdir -p %s"", getRunDir()),
                        format(""cp -R %s/dist/{conf,html,logs,sbin} %s"", getExpandedInstallDir(), getRunDir()))
                .execute();

        // Install static content archive, if specified
        String archiveUrl = entity.getConfig(NginxController.STATIC_CONTENT_ARCHIVE_URL);
        if (Strings.isNonBlank(archiveUrl)) {
            getEntity().deploy(archiveUrl);
        }

        customizationCompleted = true;
    }"
8666215,none,"    private boolean fetchNext() throws IgniteCheckedException {
        if (data == null)
            return false;

        try {
            if (!data.next()) {
                close();

                return false;
            }

            if (res != null) {
                Value[] values = res.currentRow();

                for (int c = 0; c < row.length; c++) {
                    Value val = values[c];

                    if (val instanceof GridH2ValueCacheObject) {
                        GridH2ValueCacheObject valCacheObj = (GridH2ValueCacheObject)values[c];

                        row[c] = valCacheObj.getObject(true);
                    }
                    else
                        row[c] = val.getObject();
                }
            }
            else {
                for (int c = 0; c < row.length; c++)
                    row[c] = data.getObject(c + 1);
            }

            return true;
        }
        catch (SQLException e) {
            throw new IgniteSQLException(e);
        }
    }"
7465317,none,"    @SuppressWarnings(""unused"")
    public static boolean test(int i, int time) throws InterruptedException {
        waitTime = time;
        final Thread thread = new Thread();
        synchronized (thread) {
            // start the thread and wait for it
            thread.setDaemon(true); // in case the thread gets stuck
            thread.start();
            while (!thread.wait1Condition) {
                thread.wait(10000);
            }
        }
        synchronized (start) {
            thread.interrupt();
            thread.sentInterrupt = true;
        }
        synchronized (end) {
            while (!thread.wait2Condition) {
                end.wait(10000);
            }
        }
        return thread.interrupted;
    }"
8437389,none,"    public boolean matches(Exchange exchange) {
        if (predicate == null) {
            predicate = createPredicate(exchange);
        }
        return predicate.matches(exchange);
    }"
7236664,none,"  private ShadowInfo checkShadowPickers(String instrumentedClassName, Class<?> clazz) {
    String shadowPickerClassName = shadowPickers.get(instrumentedClassName);
    if (shadowPickerClassName == null) {
      return null;
    }

    ClassLoader classLoader = clazz.getClassLoader();
    try {
      Class<? extends ShadowPicker<?>> shadowPickerClass =
          (Class<? extends ShadowPicker<?>>) classLoader.loadClass(shadowPickerClassName);
      ShadowPicker<?> shadowPicker = shadowPickerClass.getDeclaredConstructor().newInstance();
      Class<?> selectedShadowClass = shadowPicker.pickShadowClass();
      if (selectedShadowClass == null) {
        return obtainShadowInfo(Object.class, true);
      }
      ShadowInfo shadowInfo = obtainShadowInfo(selectedShadowClass);

      if (!shadowInfo.shadowedClassName.equals(instrumentedClassName)) {
        throw new IllegalArgumentException(""Implemented class for ""
            + selectedShadowClass.getName() + "" ("" + shadowInfo.shadowedClassName + "") != ""
            + instrumentedClassName);
      }

      return shadowInfo;
    } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException
        | IllegalAccessException | InstantiationException e) {
      throw new RuntimeException(""Failed to resolve shadow picker for "" + instrumentedClassName,
          e);
    }
  }"
8866735,none,"    private static void walker(List<List<String>> finalResult, final List<List<String>> input,
        List<String> listSoFar, final int level) throws SemanticException {
      // Base case.
      if (level == (input.size() - 1)) {
        assert (input.get(level) != null) : ""Unique skewed element list has null list in "" + level
            + ""th position."";
        for (String v : input.get(level)) {
          List<String> oneCompleteIndex = new ArrayList<String>(listSoFar);
          oneCompleteIndex.add(v);
          finalResult.add(oneCompleteIndex);
        }
        return;
      }

      // Recursive.
      for (String v : input.get(level)) {
        List<String> clonedListSoFar = new ArrayList<String>(listSoFar);
        clonedListSoFar.add(v);
        int nextLevel = level + 1;
        walker(finalResult, input, clonedListSoFar, nextLevel);
      }
    }"
8419610,none,"    protected void buildServiceFromWSDL(String url) {
        getDefinition(url);
        super.buildServiceFromWSDL(url);
    }"
3920271,none,"  public int getIteratorsSize() {
    return (this.iterators == null) ? 0 : this.iterators.size();
  }"
7231342,none,"  @Implementation(minSdk = M)
  protected Network getActiveNetwork() {
    if (defaultNetworkActive) {
      return netIdToNetwork.get(getActiveNetworkInfo().getType());
    }
    return null;
  }"
9342880,none,"    @Override
    public boolean requestWindowFocus() {
        CEmbeddedFrame.updateGlobalFocusedWindow(target);
        target.synthesizeWindowActivation(true);
        return true;
    }"
7273237,none,"        ExternalJavaClass(JavaClass javaClass, boolean retained) {
            allInstancesSize = javaClass.getAllInstancesSize();
            isArray = javaClass.isArray();
            instanceSize = javaClass.getInstanceSize();
            instancesCount = javaClass.getInstancesCount();
            retainedSizeByClass = retained ? javaClass.getRetainedSizeByClass() : DataType.RETAINED_SIZE.getNotAvailableValue();
            javaClassId = javaClass.getJavaClassId();
            name = javaClass.getName();
        }"
8119264,none,"    public final void rule__WithContextExpression__Group_3__0() throws RecognitionException {
        int rule__WithContextExpression__Group_3__0_StartIndex = input.index();

        		int stackSize = keepStackSize();
        	
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 692) ) { return ; }
            // InternalSimpleBeeLangTestLanguage.g:9695:1: ( rule__WithContextExpression__Group_3__0__Impl rule__WithContextExpression__Group_3__1 )
            // InternalSimpleBeeLangTestLanguage.g:9696:2: rule__WithContextExpression__Group_3__0__Impl rule__WithContextExpression__Group_3__1
            {
            pushFollow(FollowSets000.FOLLOW_9);
            rule__WithContextExpression__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FollowSets000.FOLLOW_2);
            rule__WithContextExpression__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 692, rule__WithContextExpression__Group_3__0_StartIndex); }

            	restoreStackSize(stackSize);

        }
        return ;
    }"
6458156,none,"    public InstantTypeAdapter ( final DateTimeFormatter formatter )
    {
        this.formatter = formatter.withLocale ( Locale.US );
    }"
8965576,none,"  @Override
  public void walk(Node nd) throws SemanticException {
    opStack.push(nd);
    dispatch(nd, opStack);

    // The rule has been applied, we bail out
    if (retMap.get(nd) != null) {
      opStack.pop();
      return;
    }

    // move all the children to the front of queue
    if (nd.getChildren() != null) {
      for (Node n : nd.getChildren()) {
        walk(n);
      }
    }

    opStack.pop();
  }"
4900050,none,"  @Override
  public List<String> getPropertyNames() {
    return Collections.EMPTY_LIST;
  }"
7077563,none,"    public void setExtendedKeyUsage(Set<String> keyPurposeSet) throws IOException {
        if ((keyPurposeSet == null) || keyPurposeSet.isEmpty()) {
            this.keyPurposeSet = null;
            keyPurposeOIDSet = null;
        } else {
            this.keyPurposeSet =
                Collections.unmodifiableSet(new HashSet<String>(keyPurposeSet));
            keyPurposeOIDSet = new HashSet<ObjectIdentifier>();
            for (String s : this.keyPurposeSet) {
                keyPurposeOIDSet.add(new ObjectIdentifier(s));
            }
        }
    }"
4755469,none,"  private void printWithBanner(String s, char c) {
    this.outputBufferPrintStream.print(s);
    this.outputBufferPrintStream.print(' ');
    for (int i = 0; i < (CONSOLE_WIDTH - s.length() - 1); i++) {
      this.outputBufferPrintStream.print(c);
    }
    this.outputBufferPrintStream.println();
  }"
6606189,none,"    public String myCacheKey() {
        if (getChromosome() == null || getChromosome().getId() == null ||
                getStartIndex() == null || getEndIndex() == null || getId() == null) {
            throw new IllegalArgumentException(MessageHelper.getMessage(""error.hash""));
        }

        StringBuilder sb = new StringBuilder();
        sb = sb.append(getId())
                .append(HASH_DELIMITER)
                .append(getChromosome().getId())
                .append(HASH_DELIMITER)
                .append(getStartIndex())
                .append(HASH_DELIMITER)
                .append(getEndIndex());
        return sb.toString();
    }"
7272610,none,"        public String formatValue(long value, int format) {
            switch (format) {
                case FORMAT_TOOLTIP:
                case FORMAT_UNITS:
                    return PERCENT_FORMAT.format(value / factor);
                case FORMAT_DETAILS:
                case FORMAT_EXPORT:
                    return NUMBER_FORMAT.format(value * 100 / factor);
                default:
                    return null;
            }
        }"
4045122,none,"    public static ITypeTraits[] serdesToTypeTraits(ISerializerDeserializer[] serdes, int payloadSize) {
        ITypeTraits[] typeTraits = new ITypeTraits[serdes.length + 1];
        for (int i = 0; i < serdes.length; i++) {
            typeTraits[i] = serdeToTypeTrait(serdes[i]);
        }
        typeTraits[serdes.length] = new FixedLengthTypeTrait(payloadSize);
        return typeTraits;
    }"
4473720,none,"	protected void prepare(final String prepareScript,
			final String prepareScriptDelimiter,
			final Map<String, Object> params) {
		if (prepareScript != null && prepareScript.length() > 0) {
			String[] statements = prepareScript.split(prepareScriptDelimiter);
			// throw out empty lines
			for (String sql : statements) {
				if (sql != null && sql.trim().length() > 0) {
					this.namedJdbcTemplate.update(sql, params);
				}
			}
		}
	}"
9213827,none,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""java.util.regex.Matcher"")
                .append(""[pattern="").append(pattern())
                .append("" region="")
                .append(regionStart()).append(',').append(regionEnd())
                .append("" lastmatch="");
        if ((first >= 0) && (group() != null)) {
            sb.append(group());
        }
        sb.append(']');
        return sb.toString();
    }"
7451699,none,"    @Override
    public boolean isInConfiguration(IsInConfigurationAccess access) {
        return access.findClassByName(""org.codehaus.groovy.reflection.ClassInfo"") != null;
    }"
7496459,none,"	@Override
	public void killClient(String host, int port) {

		Assert.hasText(host, ""Host for 'CLIENT KILL' must not be 'null' or 'empty'."");

		String client = String.format(""%s:%s"", host, port);
		try {
			if (isPipelined()) {
				pipeline(connection.newLettuceStatusResult(getAsyncConnection().clientKill(client)));
				return;
			}
			getConnection().clientKill(client);
		} catch (Exception e) {
			throw convertLettuceAccessException(e);
		}
	}"
7495736,none,"    public static <T extends PointerBase> T pinArrayAndGetAddress(Object array) {
        PinnedObject pin = PinnedObject.create(array);
        pinnedObjectsListHead.set(new PinnedObjectListNode(pin, pinnedObjectsListHead.get()));
        return pin.addressOfArrayElement(0);
    }"
6536222,none,"    private URI map(String pathWithScheme) {
        java.net.URI javaNetUri = toURI(pathWithScheme, clientLocation);
        logger.trace(""Going to map path {}"", javaNetUri);
        URI ret = URI.createURI(toPathAsInXtext212(javaNetUri));
        logger.trace(""Mapped path {} to {}"", pathWithScheme, ret);
        return ret;
    }"
8050493,none,"	@org.junit.Test
	public void namingConvention_ttcn() throws Exception {
		Designer_plugin_tests.checkSyntaxMarkersOnFile(namingConvention_ttcn_initializer(), ""src/Basic_tests/namingConvention.ttcn"");
	}"
4075888,none,"    private void finalizeCheckpoint(String checkpointId,
                                    File checkpointedDir,
                                    byte[] txid) throws IOException {
        File[] files = checkpointedDir.listFiles();

        CheckpointMetadata.Builder metadataBuilder = CheckpointMetadata.newBuilder();
        for (File file : files) {
            metadataBuilder.addFiles(file.getName());
        }
        if (null != txid) {
            metadataBuilder.setTxid(UnsafeByteOperations.unsafeWrap(txid));
        }
        metadataBuilder.setCreatedAt(System.currentTimeMillis());

        String destCheckpointPath = RocksUtils.getDestCheckpointMetadataPath(dbPrefix, checkpointId);
        try (OutputStream os = checkpointStore.openOutputStream(destCheckpointPath)) {
            os.write(metadataBuilder.build().toByteArray());
        }
    }"
7409821,none,"    @Override
    public boolean isNotEmpty() {
        return size > 0;
    }"
8728601,none,"      public updateUnicoreJobSubmissionDetails_args getEmptyArgsInstance() {
        return new updateUnicoreJobSubmissionDetails_args();
      }"
6088559,none,"        Type asTuple() {
            final Type result;
            if (types.size() == 0) {
                result = unit.getEmptyType();
            } else {
                final Type sequentialType;
                if (variadic) {
                    Part part = new Part(""Sequence"", Collections.singletonList(getLast()));
                    sequentialType = loadType(""ceylon.language"", 
                            atLeastOne ? ""ceylon.language.Sequence"" : ""ceylon.language.Sequential"", 
                                    part, null);
                } else {
                    sequentialType = unit.getEmptyType();
                }
                
                if (variadic && types.size() == 1) {
                    result = sequentialType;
                } else {
                    Part part = new Part();
                    // if we're variadic we put the element type there because we skip it below
                    // if we're not variadic we are not going to skip it so let's not union it with itself
                    Type union = variadic ? getLast() : null;
                    Type tupleType = sequentialType;
                    // A,B= 
                    // union = null
                    // tupleType = []
                    // t = B
                    // union = B
                    // tupleType = [B]
                    // tupleType = [B]|[]
                    // t = A
                    // union = A|B
                    // tupleType = [A,[B]|[]]

                    // A=,B= 
                    // union = null
                    // tupleType = []
                    // t = B
                    // union = B
                    // tupleType = [B]
                    // tupleType = [B]|[]
                    // t = A
                    // union = A|B
                    // tupleType = [A,[B]|[]]
                    // tupleType = [A,[B]|[]]|[]

                    // A=,B* 
                    // union = B
                    // tupleType = [B*]
                    // t = A
                    // union = A|B
                    // tupleType = [A,[B*]]
                    // tupleType = [A,[B*]]|[]

                    int makeDefaulted = defaulted;
                    for (int ii  = types.size()-(variadic? 2 : 1); ii >= 0; ii--) {
                        Type t = types.get(ii);
                        // FIXME: subtyping in the type parser may cause issues
                        if(union != null) // any second element (variadic or not)
                            union = ModelUtil.unionType(union, t, unit);
                        else
                            union = t; // any first element
                        part.parameters = Arrays.asList(union, t, tupleType);
                        part.name = ""Tuple"";
                        tupleType = loadType(""ceylon.language"", ""ceylon.language.Tuple"", part, null);
                        if(makeDefaulted > 0){
                            makeDefaulted--;
                            tupleType = union(Arrays.asList(unit.getEmptyType(), tupleType), unit);
                        }
                    }
                    result = tupleType;
                }
            }
            return result;
        }"
8894493,none,"  public void unsetTable_name() {
    this.table_name = null;
  }"
8935070,none,"  public DynamicSerDeFieldRequiredness(int id) {
    super(id);
  }"
4073701,none,"    @Override
    public boolean parse(DataOutput out) throws HyracksDataException {
        try {
            resetPools();
            return parseAdmInstance(recordType, out);
        } catch (ParseException e) {
            e.setLocation(filename, admLexer.getLine(), admLexer.getColumn());
            throw e;
        } catch (IOException e) {
            throw new ParseException(e, filename, admLexer.getLine(), admLexer.getColumn());
        }
    }"
9301710,none,"    List<JCVariableDecl> freevarDefs(int pos, List<VarSymbol> freevars, Symbol owner,
            long additionalFlags) {
        long flags = FINAL | SYNTHETIC | additionalFlags;
        List<JCVariableDecl> defs = List.nil();
        Set<Name> proxyNames = new HashSet<>();
        for (List<VarSymbol> l = freevars; l.nonEmpty(); l = l.tail) {
            VarSymbol v = l.head;
            int index = 0;
            Name proxyName;
            do {
                proxyName = proxyName(v.name, index++);
            } while (!proxyNames.add(proxyName));
            VarSymbol proxy = new VarSymbol(
                flags, proxyName, v.erasure(types), owner);
            proxies.put(v, proxy);
            JCVariableDecl vd = make.at(pos).VarDef(proxy, null);
            vd.vartype = access(vd.vartype);
            defs = defs.prepend(vd);
        }
        return defs;
    }"
4500508,none,"  private Object getKey(Event e) {
    // Write the data to HDFS
    String timestamp = e.getHeaders().get(""timestamp"");
    long eventStamp;

    if (timestamp == null) {
      eventStamp = System.currentTimeMillis();
    } else {
      eventStamp = Long.valueOf(timestamp);
    }
    return new LongWritable(eventStamp);
  }"
8999846,none,"    @Override
    public void streamObjects(Consumer<Object> cons) {
      Object val = getObject();
      if (exists()) {
        cons.accept(val);
      }
    }"
7728166,none,"    private void log(Operation op, OperationProcessingContext context, String msg, Level logLevel) {
        String hostId = context.host != null ? context.host.getId() : """";
        String path = op.getUri() != null ? op.getUri().getPath() : """";
        Filter filter = this.filters.get(context.currentFilterPosition);
        String filterName = filter != null ? filter.getClass().getSimpleName() : """";
        String logMsg = String.format(""(host: %s, op %d %s %s) filter %s: %s"",
                hostId, op.getId(), op.getAction(),  path, filterName, msg);
        Level level = logLevel != null ? logLevel : Level.INFO;
        Utils.log(getClass(), op.getUri().getPath(), level, logMsg);
    }"
5857311,none,"  static private String getText(String text) {
    int start = text.indexOf(""<TEXT>"");
    int end = text.indexOf(""</TEXT>"");
    if (start != -1 && end != -1) {
      return text.substring(start + 6, end);
    } else {
      return text;
    }
  }"
9022587,none,"  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {
    // the line number is passed for error reporting in MT mode as well as for optional rowId.
    // first, create the lucene document
    for (int i=0; i<vals.length; i++) {
      if (adders[i]==null) continue;  // skip this field
      String val = vals[i];
      adders[i].add(doc, line, i, val);
    }

    // add any literals
    for (String fname : literals.keySet()) {
      String val = literals.get(fname);
      doc.addField(fname, val);
    }
    if (rowId != null){
      doc.addField(rowId, line + rowIdOffset);
    }
    template.solrDoc = doc;
    processor.processAdd(template);
  }"
6971634,none,"    @Override
    public WeakValueReference<K, V, StrongKeyWeakValueEntry<K, V>> newWeakValueReferenceForTesting(
        InternalEntry<K, V, ?> e, V value) {
      return new WeakValueReferenceImpl<>(queueForValues, value, castForTesting(e));
    }"
9269951,none,"    @BeanProperty(bound = false)
    public boolean getScrollableTracksViewportWidth() {
        Container parent = SwingUtilities.getUnwrappedParent(this);
        if (parent instanceof JViewport) {
            JViewport port = (JViewport) parent;
            TextUI ui = getUI();
            int w = port.getWidth();
            Dimension min = ui.getMinimumSize(this);
            Dimension max = ui.getMaximumSize(this);
            if ((w >= min.width) && (w <= max.width)) {
                return true;
            }
        }
        return false;
    }"
4667521,none,"	@SuppressWarnings(""unchecked"")
	@Override
	@PublicEvolving
	public Class<T> getTypeClass() {
		return arrayType;
	}"
7964380,none,"    public final void mRULE_STRING() throws RecognitionException {
        try {
            int _type = RULE_STRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalXImportSectionTestLang.g:6435:13: ( ( '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )? | '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )? ) )
            // InternalXImportSectionTestLang.g:6435:15: ( '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )? | '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )? )
            {
            // InternalXImportSectionTestLang.g:6435:15: ( '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )? | '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )? )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0=='\""') ) {
                alt15=1;
            }
            else if ( (LA15_0=='\'') ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("""", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalXImportSectionTestLang.g:6435:16: '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )?
                    {
                    match('\""'); 
                    // InternalXImportSectionTestLang.g:6435:20: ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )*
                    loop11:
                    do {
                        int alt11=3;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0=='\\') ) {
                            alt11=1;
                        }
                        else if ( ((LA11_0>='\u0000' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\uFFFF')) ) {
                            alt11=2;
                        }


                        switch (alt11) {
                    	case 1 :
                    	    // InternalXImportSectionTestLang.g:6435:21: '\\\\' .
                    	    {
                    	    match('\\'); 
                    	    matchAny(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalXImportSectionTestLang.g:6435:28: ~ ( ( '\\\\' | '\""' ) )
                    	    {
                    	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uFFFF') ) {
                    	        input.consume();

                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;}


                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);

                    // InternalXImportSectionTestLang.g:6435:44: ( '\""' )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0=='\""') ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // InternalXImportSectionTestLang.g:6435:44: '\""'
                            {
                            match('\""'); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // InternalXImportSectionTestLang.g:6435:49: '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )?
                    {
                    match('\''); 
                    // InternalXImportSectionTestLang.g:6435:54: ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )*
                    loop13:
                    do {
                        int alt13=3;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0=='\\') ) {
                            alt13=1;
                        }
                        else if ( ((LA13_0>='\u0000' && LA13_0<='&')||(LA13_0>='(' && LA13_0<='[')||(LA13_0>=']' && LA13_0<='\uFFFF')) ) {
                            alt13=2;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // InternalXImportSectionTestLang.g:6435:55: '\\\\' .
                    	    {
                    	    match('\\'); 
                    	    matchAny(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalXImportSectionTestLang.g:6435:62: ~ ( ( '\\\\' | '\\'' ) )
                    	    {
                    	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uFFFF') ) {
                    	        input.consume();

                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;}


                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);

                    // InternalXImportSectionTestLang.g:6435:79: ( '\\'' )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0=='\'') ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // InternalXImportSectionTestLang.g:6435:79: '\\''
                            {
                            match('\''); 

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
6286234,none,"    public BaseHome() throws IOException
    {
        this(new String[0]);
    }"
6030541,none,"	@Override
	public void processRTTmeasurement(long measuredRTT, Exchange exchange, int retransmissionCount){		
		//System.out.println(""Measured an RTT of "" + measuredRTT + "" after using "" + retransmissionCount + "" retries."" );
		RemoteEndpoint endpoint = getRemoteEndpoint(exchange);
		int rtoType = endpoint.getExchangeEstimatorState(exchange);
		
		// The basic rto algorithm does not care for the blind estimator, set weak/strong to false
		endpoint.setBlindStrong(false);
		endpoint.setBlindWeak(false);
		//Perform normal update of the RTO
		updateEstimator(measuredRTT, rtoType, endpoint);

	}"
5684516,none,"    protected List<String> getSelectionsInContext(String label, Collection<String> allEntities, String context) {
        List<String> allEntityString = new ArrayList<String>();

        for (String selectedText : allEntities) {
            if (context.contains(selectedText) && selectedText.compareToIgnoreCase(label) != 0) {
                allEntityString.add(selectedText);
            }

        }

        return allEntityString;
    }"
7746730,none,"        @Override
        protected void notifyOverrides() {
            notifyListener.doOverrideIfNecessary();
        }"
5596973,none,"    private static int[][] getCoordinates(List<ShapeRecord> records)
    {
        int[][] coordinates = new int[records.size()][2];
        ShapeRecord record;
        for(int i=0; i<records.size(); i++)
        {
            record = records.get(i);
            if (record instanceof StyleChangeRecord)
            {
                StyleChangeRecord scr = (StyleChangeRecord)record;
                coordinates[i][0] = scr.getMoveDeltaX();
                coordinates[i][1] = scr.getMoveDeltaY();
            }
            else if (record instanceof StraightEdgeRecord)
            {
                StraightEdgeRecord ser = (StraightEdgeRecord)record;
                coordinates[i][0] = coordinates[i-1][0] + ser.getDeltaX();
                coordinates[i][1] = coordinates[i-1][1] + ser.getDeltaY();
            }
            else if (record instanceof CurvedEdgeRecord)
            {
                CurvedEdgeRecord cer = (CurvedEdgeRecord)record;                    
                coordinates[i][0] = coordinates[i-1][0] + cer.getControlDeltaX() + cer.getAnchorDeltaX();
                coordinates[i][1] = coordinates[i-1][1] + cer.getControlDeltaY() + cer.getAnchorDeltaY();
            }                  
        }
        return coordinates;
    }"
7137322,none,"  @SuppressWarnings({""unchecked""})
  @Override
  public RB addReqParam(String key, Object value)
  {
    return (RB) super.addReqParam(key, value);
  }"
7504433,none,"	@Override
	public Cursor<T> open() {
		this.delegate = delegate.open();
		return this;
	}"
6764592,none,"  public static PageInsightsAsyncExportRun fetchById(String id, APIContext context) throws APIException {
    return
      new APIRequestGet(id, context)
      .requestAllFields()
      .execute();
  }"
4433801,none,"    public static void assertFailed(APIResult response) {
        Assert.assertNotEquals(response.getMessage(), ""null"",
            ""response message should not be null"");
        Assert.assertEquals(response.getStatus(), APIResult.Status.FAILED,
                ""Status should be FAILED. Message: "" + response.getMessage());
    }"
7554762,none,"	@Override
	protected String getGatewayClassName(Element element) {
		return ((StringUtils.hasText(element.getAttribute(""marshaller""))) ?
				MarshallingWebServiceOutboundGateway.class : SimpleWebServiceOutboundGateway.class).getName();
	}"
4242529,none,"    @Override
    public void interpretPixel(final ImageBuilder imageBuilder, final int[] samples, final int x,
            final int y) throws ImageReadException, IOException {

        final int sc = samples[0];
        final int sm = samples[1];
        final int sy = samples[2];
        final int sk = samples[3];

        final int rgb = ColorConversions.convertCMYKtoRGB(sc, sm, sy, sk);
        imageBuilder.setRGB(x, y, rgb);
    }"
6915447,none,"  @Override
  public void prepare(MediaSource mediaSource, boolean resetPosition, boolean resetState) {
    throw new UnsupportedOperationException();
  }"
5150385,none,"    private static ScheduledExecutorService createTimeoutCheckScheduler()
    {
        ThreadFactory threadFactory = newDaemonThreadFactory( ""timeout-check-timer"" );
        return newScheduledThreadPool( 1, threadFactory );
    }"
5661062,none,"    TreeNodeChildren(final TreeNode parent, final Object metadata, final PropertyAccessor accessor) {
        this.parent   = parent;
        this.metadata = metadata;
        this.accessor = accessor;
        this.children = new TreeNode[accessor.count()];
        /*
         * Search for something that looks like the main property, to be associated with the parent node
         * instead than provided as a child. The intent is to have more compact and easy to read trees.
         * That property shall be a singleton for a simple value (not another metadata object).
         */
        if (parent.table.valuePolicy == ValueExistencePolicy.COMPACT) {
            TitleProperty an = accessor.implementation.getAnnotation(TitleProperty.class);
            if (an == null) {
                Class<?> implementation = parent.table.standard.getImplementation(accessor.type);
                if (implementation != null) {
                    an = implementation.getAnnotation(TitleProperty.class);
                }
            }
            if (an != null) {
                final int index = accessor.indexOf(an.name(), false);
                final Class<?> type = accessor.type(index, TypeValuePolicy.ELEMENT_TYPE);
                if (type != null && !parent.isMetadata(type) && type == accessor.type(index, TypeValuePolicy.PROPERTY_TYPE)) {
                    titleProperty = index;
                    return;
                }
            }
        }
        titleProperty = -1;
    }"
4301991,none,"        public AuthorizationData getAuthzData() {
            if (authzData == null) {
                authzData = getFieldAs(IntendedForApplicationClassField.IFAC_elements, AuthorizationData.class);
            }
            return authzData;
        }"
8766133,none,"  @SuppressWarnings(""unchecked"")
  private static Class<? extends Principal> getOsPrincipalClass() {
    ClassLoader cl = ClassLoader.getSystemClassLoader();
    try {
      String principalClass = null;
      if (IBM_JAVA) {
        if (is64Bit) {
          principalClass = ""com.ibm.security.auth.UsernamePrincipal"";
        } else {
          if (windows) {
            principalClass = ""com.ibm.security.auth.NTUserPrincipal"";
          } else if (aix) {
            principalClass = ""com.ibm.security.auth.AIXPrincipal"";
          } else {
            principalClass = ""com.ibm.security.auth.LinuxPrincipal"";
          }
        }
      } else {
        principalClass = windows ? ""com.sun.security.auth.NTUserPrincipal""
            : ""com.sun.security.auth.UnixPrincipal"";
      }
      return (Class<? extends Principal>) cl.loadClass(principalClass);
    } catch (ClassNotFoundException e) {
      LOG.error(""Unable to find JAAS classes:"" + e.getMessage());
    }
    return null;
  }"
6637982,none,"    private static GraphRequest createGrantedPermissionsRequest(
            AccessToken accessToken,
            GraphRequest.Callback callback
    ) {
        Bundle parameters = new Bundle();
        return new GraphRequest(
                accessToken,
                ME_PERMISSIONS_GRAPH_PATH,
                parameters,
                HttpMethod.GET,
                callback);
    }"
4302392,none,"    @Override
    public String toString() {
        String typeStr = tag().typeStr() + "" [""
            + ""tag="" + tag()
            + "", len="" + getHeaderLength() + ""+"" + getBodyLength()
            + ""] "";
        return typeStr + ""eoc"";
    }"
7306360,none,"	private Object readTypeToken(TypeToken<?> token, HttpInputMessage inputMessage) throws IOException {
		Reader json = new InputStreamReader(inputMessage.getBody(), getCharset(inputMessage.getHeaders()));
		try {
			return this.gson.fromJson(json, token.getType());
		}
		catch (JsonParseException ex) {
			throw new HttpMessageNotReadableException(""Could not read JSON: "" + ex.getMessage(), ex);
		}
	}"
6182357,none,"  @Override
  public String toString() {
    return ""ExecInfo{""
        + ""id='""
        + id
        + '\''
        + "", container=""
        + container
        + "", processConfig=""
        + processConfig
        + "", openStdout='""
        + openStdout
        + '\''
        + "", openStderr='""
        + openStderr
        + '\''
        + "", openStdin='""
        + openStdin
        + '\''
        + "", running='""
        + running
        + '\''
        + "", exitCode='""
        + exitCode
        + '\''
        + '}';
  }"
4300952,none,"    @Override
    public KrbIdentity getIdentity(String principalName) throws KrbException {
        if (idCache.containsKey(principalName)) {
            return idCache.get(principalName);
        }

        KrbIdentity identity = underlying.getIdentity(principalName);
        if (identity != null) {
            idCache.put(principalName, identity);
        }

        return identity;
    }"
7782626,none,"	protected boolean makeContentVisible()
	{
		// if user is refreshing whole page, the window will not be shown
		if (getWebRequest().isAjax() == false)
		{
			return false;
		}
		else
		{
			return shown;
		}
	}"
6298870,none,"        @Override
        public String toString()
        {
            return String.format(""%s[i=%s,cb=%s]"",super.toString(),_info,_callback);
        }"
9340675,none,"    public ReferenceType referenceType() {
        if (type == null) {
            try {
                JDWP.ObjectReference.ReferenceType rtinfo =
                    JDWP.ObjectReference.ReferenceType.process(vm, this);
                type = vm.referenceType(rtinfo.typeID,
                                        rtinfo.refTypeTag);
            } catch (JDWPException exc) {
                throw exc.toJDIException();
            }
        }
        return type;
    }"
5374635,none,"    @SuppressWarnings(""rawtypes"")
    protected void incSpillCount(Enum counter, long numRecsSpilled) {
        PigStatusReporter reporter = PigStatusReporter.getInstance();
        if (reporter != null && reporter.getCounter(counter)!=null) {
            reporter.getCounter(counter).increment(numRecsSpilled);
        } else {
            PigHadoopLogger.getInstance().warn(mContents, ""Spill counter incremented"", counter);
        }
    }"
4969461,none,"    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!(obj instanceof Quota))
            return false;
        Quota that = (Quota) obj;
        return (that.bound == this.bound) && (that.upper == this.upper);
    }"
4821096,none,"		@Override
		public void actionPerformed(ActionEvent e) {
			DefaultMutableTreeNode node = getSelectedNode();
			String newValue;
			if (example != null && example.length() > 0)
				newValue = example;
			else
				newValue = NEW_VALUE;

			@SuppressWarnings(""unused"")
			DefaultMutableTreeNode added = addPojo(node, newValue, 0);
			setStatus(""Added new value.  Edit value on right."", null);
		}"
9490334,none,"  private static WebAppContext createWebAppContext(Builder b,
      AccessControlList adminsAcl, final String appDir) {
    WebAppContext ctx = new WebAppContext();
    ctx.setDefaultsDescriptor(null);
    ServletHolder holder = new ServletHolder(new DefaultServlet());
    Map<String, String> params = ImmutableMap. <String, String> builder()
            .put(""acceptRanges"", ""true"")
            .put(""dirAllowed"", ""false"")
            .put(""gzip"", ""true"")
            .put(""useFileMappedBuffer"", ""true"")
            .build();
    holder.setInitParameters(params);
    ctx.setWelcomeFiles(new String[] {""index.html""});
    ctx.addServlet(holder, ""/"");
    ctx.setDisplayName(b.name);
    ctx.setContextPath(""/"");
    ctx.setWar(appDir + ""/"" + b.name);
    String tempDirectory = b.conf.get(HTTP_TEMP_DIR_KEY);
    if (tempDirectory != null && !tempDirectory.isEmpty()) {
      ctx.setTempDirectory(new File(tempDirectory));
      ctx.setAttribute(""javax.servlet.context.tempdir"", tempDirectory);
    }
    ctx.getServletContext().setAttribute(CONF_CONTEXT_ATTRIBUTE, b.conf);
    ctx.getServletContext().setAttribute(ADMINS_ACL, adminsAcl);
    addNoCacheFilter(ctx);
    return ctx;
  }"
6999266,none,"  public static File gunzip(File src, File dest) {

    byte[] buffer = new byte[1024];

    try{

      GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(src));

      FileOutputStream out = new FileOutputStream(dest);

      int len;
      while ((len = gzis.read(buffer)) > 0) {
        out.write(buffer, 0, len);
      }

      gzis.close();
      out.close();

    } catch(IOException ex){
       ex.printStackTrace();
    }
    return dest;
   }"
3698665,none,"    public Self addExceptionHandler(GenericExceptionHandler<Input, Output> handler) {
        exceptionHandlers.add(handler);
        return getThis();
    }"
7717190,none,"        LogFileLoader(final String path, @Nullable Instant start, @Nullable Instant end) {
            super(path);
            this.grokCompiler = GrokCompiler.newInstance();
            this.grokCompiler.registerDefaultPatterns();
            this.grokCompiler.registerPatternFromClasspath(""/patterns/log-patterns"");
            this.grok = grokCompiler.compile(logFormat, true);
            this.start = start;
            this.end = end;
            this.parsingErrors = new StringListColumn(
                new ColumnDescription(parseErrorColumn, ContentsKind.String));
            this.lineNumber = new IntListColumn(
                    new ColumnDescription(lineNumberColumn, ContentsKind.Integer));
            String originalPattern = this.grok.getOriginalGrokPattern();
            String timestampPattern = GrokExtra.extractGroupPattern(
                    this.grokCompiler.getPatternDefinitions(),
                    originalPattern, GenericLogs.timestampColumnName);
            if (timestampPattern == null) {
                HillviewLogger.instance.warn(""Pattern does not contain column named 'Timestamp'"",
                        ""{0}"", originalPattern);
                this.dateTime = null;
            } else {
                this.dateTime = this.grokCompiler.compile(
                        ""%{"" + timestampPattern + "":"" + GenericLogs.timestampColumnName + ""}"", true);
            }
        }"
5534322,none,"    PartitionReceiverHandlerImpl(SystemStreamPartition ssp, Counter eventReadRate, Counter eventByteReadRate,
        SamzaHistogram readLatency, Counter readErrors, Interceptor interceptor, int maxEventCount) {
      this.ssp = ssp;
      this.eventReadRate = eventReadRate;
      this.eventByteReadRate = eventByteReadRate;
      this.readLatency = readLatency;
      this.errorRate = readErrors;
      this.interceptor = interceptor;
      this.maxEventCount = maxEventCount;
    }"
6935551,none,"  public static ExtensionDescription getDefaultDescription(boolean required,
      boolean repeatable) {
    ExtensionDescription desc =
        ExtensionDescription.getDefaultDescription(GphotoPhotoId.class);
    desc.setRequired(required);
    desc.setRepeatable(repeatable);
    return desc;
  }"
6212329,none,"  @Override
  public Type<GutterClickHandler> getAssociatedType() {
    return TYPE;
  }"
5854207,none,"        private String escapeCDATA(String text) {
            if( text==null ) return """";
            int len = text.length();
            CharArrayWriter result = new CharArrayWriter(len);
            for (int i=0; i<len; i++) {
                if (((i+2) < len)
                        && (text.charAt(i) == ']')
                        && (text.charAt(i+1) == ']')
                        && (text.charAt(i+2) == '>')) {
                    // match found
                    result.write(']');
                    result.write(']');
                    result.write('&');
                    result.write('g');
                    result.write('t');
                    result.write(';');
                    i += 2;
                } else {
                    result.write(text.charAt(i));
                }
            }
            return result.toString();
        }"
3844294,none,"    public listNamespaceIterators_result setOuch1(@org.apache.thrift.annotation.Nullable AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }"
7965671,none,"  public Iterable<JvmMember> getMembersToBeCompiled(final JvmDeclaredType type) {
    if (type instanceof JvmEnumerationType) {
      return _getMembersToBeCompiled((JvmEnumerationType)type);
    } else if (type instanceof JvmGenericType) {
      return _getMembersToBeCompiled((JvmGenericType)type);
    } else if (type != null) {
      return _getMembersToBeCompiled(type);
    } else {
      throw new IllegalArgumentException(""Unhandled parameter types: "" +
        Arrays.<Object>asList(type).toString());
    }
  }"
8935536,none,"    public com.google.protobuf.ByteString
        getHiveQueryIdBytes() {
      java.lang.Object ref = hiveQueryId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hiveQueryId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }"
4122935,none,"    @Override
    protected Optional<HostAndPort> getMappedEndpoint(Entity source, MachineLocation machine, int port) {
        String address = source.sensors().get(Attributes.SUBNET_ADDRESS);
        if (Strings.isNonBlank(address)) {
            return Optional.of(HostAndPort.fromParts(address, port));
        } else {
            return Optional.absent();
        }
    }"
8873169,none,"      public void read(org.apache.thrift.protocol.TProtocol iprot, add_check_constraint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o1 = new NoSuchObjectException();
                struct.o1.read(iprot);
                struct.setO1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // O2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o2 = new MetaException();
                struct.o2.read(iprot);
                struct.setO2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }"
7272514,none,"    void showInThreads(Instance instance) {
        ((OverviewControllerUI) getPanel()).showInThreads(instance);
    }"
4919602,none,"    public void configure(TestElement el) {
        setName(el.getName());
        Arguments arguments = (Arguments) el.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue();

        boolean useRaw = el.getPropertyAsBoolean(HTTPSamplerBase.POST_BODY_RAW, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);
        if(useRaw) {
            String postBody = computePostBody(arguments, true); // Convert CRLF to CR, see modifyTestElement
            postBodyContent.setInitialText(postBody); 
            postBodyContent.setCaretPosition(0);
            argsPanel.clear();
            postContentTabbedPane.setSelectedIndex(tabRawBodyIndex, false);
        } else {
            postBodyContent.setInitialText("""");
            argsPanel.configure(arguments);
            postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS, false);
        }
        if(showFileUploadPane) {
            filesPanel.configure(el);
        }

        domain.setText(el.getPropertyAsString(HTTPSamplerBase.DOMAIN));

        String portString = el.getPropertyAsString(HTTPSamplerBase.PORT);

        // Only display the port number if it is meaningfully specified
        if (portString.equals(HTTPSamplerBase.UNSPECIFIED_PORT_AS_STRING)) {
            port.setText(""""); // $NON-NLS-1$
        } else {
            port.setText(portString);
        }
        protocol.setText(el.getPropertyAsString(HTTPSamplerBase.PROTOCOL));
        contentEncoding.setText(el.getPropertyAsString(HTTPSamplerBase.CONTENT_ENCODING));
        path.setText(el.getPropertyAsString(HTTPSamplerBase.PATH));
        if (notConfigOnly){
            method.setText(el.getPropertyAsString(HTTPSamplerBase.METHOD));
            followRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.FOLLOW_REDIRECTS));
            autoRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.AUTO_REDIRECTS));
            useKeepAlive.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.USE_KEEPALIVE));
            useMultipart.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.DO_MULTIPART_POST));
            useBrowserCompatibleMultipartMode.setSelected(el.getPropertyAsBoolean(
                    HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART, HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT));
        }
    }"
6471435,none,"        SDEInstaller(File inClassFile, byte[] sdeAttr, File outClassFile)
            throws IOException {
            if (!inClassFile.exists()) {
                throw new FileNotFoundException(""no such file: "" + inClassFile);
            }

            this.sdeAttr = sdeAttr;
            // get the bytes
            orig = readWhole(inClassFile);
            gen = new byte[orig.length + sdeAttr.length + 100];

            // do it
            addSDE();

            // write result
            FileOutputStream outStream = new FileOutputStream(outClassFile);
            outStream.write(gen, 0, genPos);
            outStream.close();
        }"
5930471,none,"    public void threadSingletonServiceAdded(@Observes ComponentAdded<ThreadSingletonService> componentAdded) {
        if (componentAdded.getComponent() != this) {
            return;
        }

        contextThreadListener = new OWBContextThreadListener();
        ThreadContext.addThreadContextListener(contextThreadListener);
    }"
4404282,none,"    private void initListeners()
    {
        importTemplatesButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                importTemplatesAction();
            }
        } );

        exportTemplatesButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                exportTemplatesAction();
            }
        } );

        removeTemplateButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                removeTemplateAction();
            }
        } );

        setDefaultTemplateButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                setDefaultTemplateAction();
            }
        } );

        useForAnyEntryButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                useForAnyEntryAction();
            }
        } );

        useForOnlyEntriesWithTemplateButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                useForOnlyEntriesWithTemplateAction();
            }
        } );
    }"
3945316,none,"	public Clause getClause(Resource resource) {
		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
		Version version = ResourceHelper.getVersionAttribute(resource);
		String type = ResourceHelper.getTypeAttribute(resource);
		for (Clause clause : clauses) {
			if (symbolicName.equals(clause.getPath())
					&& clause.getDeployedVersion().equals(version)
					&& type.equals(clause.getType()))
				return clause;
		}
		return null;
	}"
6579602,none,"        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalEntities()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalEntities()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }"
7402299,none,"        @Override
        public void add(int arg0, Element arg1) {
            elementsInSegment.add(arg0, arg1);
        }"
8163123,none,"    @Override
    public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
        TransactionContext c = persistenceAdapter.getTransactionContext();
        try {
            return adapter.doGetSubscriberEntry(c, destination, clientId, subscriptionName);
        } catch (SQLException e) {
            JDBCPersistenceAdapter.log(""JDBC Failure: "", e);
            throw IOExceptionSupport.create(""Failed to lookup subscription for: "" + clientId + "". Reason: "" + e, e);
        } finally {
            c.close();
        }
    }"
6998192,none,"    private void recomputeHeight() {
      this.height = 1 + Math.max(height(left), height(right));
    }"
6765637,none,"    @Override
    public APINodeList<Flight> execute(Map<String, Object> extraParams) throws APIException {
      ResponseWrapper rw = executeInternal(extraParams);
      lastResponse = parseResponse(rw.getBody(),rw.getHeader());
      return lastResponse;
    }"
5923886,none,"  public List<String> getTraceback() {
    return traceback;
  }"
9205662,none,"	private void setDataType( StyleEntry entry, Object value, String dataLocale )
	{
		ULocale locale = getLocale( dataLocale );
		setDataType( entry, value, locale );
	}"
9007330,none,"  public void track(final File file, final Object marker) {
    track(file, marker, null);
  }"
7451785,none,"        private Builder() {
            this.options = 0;
            this.flavor = null;
        }"
6465533,none,"    private void buildNode1076()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=11692""), new QualifiedName(0, ""OutputArguments""), new LocalizedText(""en"", ""OutputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=11690""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=37""), ExpandedNodeId.parse(""svr=0;i=78""), NodeClass.Object, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=11690""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Position</ns2:Name><ns2:DataType><ns2:Identifier>i=9</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
6778053,none,"    public APIRequestGetBusinessActivities requestTargetBusinessObjectIdField () {
      return this.requestTargetBusinessObjectIdField(true);
    }"
4541855,none,"    @Autowired
    public CloseShareAccountCommandHandler(final ShareAccountWritePlatformService shareAccountWritePlatformService) {
        this.shareAccountWritePlatformService = shareAccountWritePlatformService ;
    }"
9160221,none,"	private static String stripNamespace( String name, String namespace )
	{
		if ( name == null || namespace == null )
			return name;

		String tmpNamespace = StringUtil.extractNamespace( name );
		if ( tmpNamespace == null )
			return name;

		if ( !namespace.equalsIgnoreCase( tmpNamespace ) )
			return name;

		return StringUtil.extractName( name );
	}"
4886061,none,"    public synchronized void reload() throws ItemNotFoundException, RepositoryException {
        if (isComplete()) {
            // nothing to do
            return;
        }

        NodeId id = parent.getWorkspaceId();
        Iterator<ChildInfo> childNodeInfos = factory.getItemStateFactory().getChildNodeInfos(id);
        update(childNodeInfos);
    }"
7934374,none,"	public void visit(DirectedGraph dg) {
		CompoundDirectedGraph graph = (CompoundDirectedGraph) dg;

		NodeList roots = new NodeList();
		// Find all subgraphs and root subgraphs
		for (int i = 0; i < graph.nodes.size(); i++) {
			Object node = graph.nodes.get(i);
			if (node instanceof Subgraph) {
				Subgraph s = (Subgraph) node;
				Insets padding = dg.getPadding(s);
				s.head = new SubgraphBoundary(s, padding, 0);
				s.tail = new SubgraphBoundary(s, padding, 2);
				Edge headToTail = new Edge(s.head, s.tail);
				headToTail.weight = 10;
				graph.edges.add(headToTail);
				graph.containment.add(headToTail);

				graph.subgraphs.add(s);
				if (s.getParent() == null)
					roots.add(s);
				if (s.members.size() == 2) // The 2 being the head and tail only
					graph.edges.add(new Edge(s.head, s.tail));
			}
		}

		buildNestingTreeIndices(roots, 0);
		convertSubgraphEndpoints(graph);
		addContainmentEdges(graph);
		replaceSubgraphsWithBoundaries(graph);
	}"
8085059,none,"    public final void rule__FeatureOfThis__Group__1__Impl() throws RecognitionException {
        int rule__FeatureOfThis__Group__1__Impl_StartIndex = input.index();

        		int stackSize = keepStackSize();
        	
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 769) ) { return ; }
            // InternalSimpleBeeLangTestLanguage.g:10732:1: ( ( ( rule__FeatureOfThis__FeatureNameAssignment_1 ) ) )
            // InternalSimpleBeeLangTestLanguage.g:10733:1: ( ( rule__FeatureOfThis__FeatureNameAssignment_1 ) )
            {
            // InternalSimpleBeeLangTestLanguage.g:10733:1: ( ( rule__FeatureOfThis__FeatureNameAssignment_1 ) )
            // InternalSimpleBeeLangTestLanguage.g:10734:2: ( rule__FeatureOfThis__FeatureNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFeatureOfThisAccess().getFeatureNameAssignment_1()); 
            }
            // InternalSimpleBeeLangTestLanguage.g:10735:2: ( rule__FeatureOfThis__FeatureNameAssignment_1 )
            // InternalSimpleBeeLangTestLanguage.g:10735:3: rule__FeatureOfThis__FeatureNameAssignment_1
            {
            pushFollow(FollowSets000.FOLLOW_2);
            rule__FeatureOfThis__FeatureNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFeatureOfThisAccess().getFeatureNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 769, rule__FeatureOfThis__Group__1__Impl_StartIndex); }

            	restoreStackSize(stackSize);

        }
        return ;
    }"
6537117,none,"    @Override
    public SensorEnum getSensorType(Short sensorIndex) {
        if (sensorIndex != null) {
            DeviceSensorValue devSenVal = getDeviceSensorValue(sensorIndex);
            return devSenVal != null ? devSenVal.getSensorType() : null;
        }
        return null;
    }"
4172212,none,"    public WeightedAshwoodEntitySorter() {
        this.weightedDbEntityComparator = new WeightedDbEntityComparator();
        this.weightedObjEntityComparator = new WeightedObjEntityComparator();
        this.entityWeights = Collections.emptyMap();
    }"
5180986,none,"  public JavaCharStream(java.io.Reader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
    nextCharBuf = new char[4096];
  }"
9236949,none,"    protected List<XRGlyphCacheEntry>[] seperateGlyphTypes(List<XRGlyphCacheEntry> glyphList, boolean containsLCDGlyphs) {
        ArrayList<XRGlyphCacheEntry> lcdGlyphs = null;
        ArrayList<XRGlyphCacheEntry> grayGlyphs = null;

        for (XRGlyphCacheEntry cacheEntry : glyphList) {
            if (cacheEntry.isGrayscale(containsLCDGlyphs)) {
                if (grayGlyphs == null) {
                    grayGlyphs = new ArrayList<>(glyphList.size());
                }
                cacheEntry.setGlyphSet(grayGlyphSet);
                grayGlyphs.add(cacheEntry);
            } else {
                if (lcdGlyphs == null) {
                    lcdGlyphs = new ArrayList<>(glyphList.size());
                }
                cacheEntry.setGlyphSet(lcdGlyphSet);
                lcdGlyphs.add(cacheEntry);
            }
        }
        // Arrays and generics don't play well together
        @SuppressWarnings({""unchecked"", ""rawtypes""})
        List<XRGlyphCacheEntry>[] tmp =
            (List<XRGlyphCacheEntry>[]) (new List[] { grayGlyphs, lcdGlyphs });
        return tmp;
    }"
9393147,none,"    @Override
    public void visitTryCatchBlock(Label start, Label end, Label handler,
            String type) {
        if (!inlining) {
            // try-catch blocks are saved here and replayed at the end
            // of the method (in visitMaxs)
            blocks.add(new CatchBlock(start, end, handler, type));
        } else {
            super.visitTryCatchBlock(start, end, handler, type);
        }
    }"
8055895,none,"    public final void mT__15() throws RecognitionException {
        try {
            int _type = T__15;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalInheritanceTest3Language.g:13:7: ( '{' )
            // InternalInheritanceTest3Language.g:13:9: '{'
            {
            match('{'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
6761533,none,"    @Override
    public APINode execute(Map<String, Object> extraParams) throws APIException {
      ResponseWrapper rw = executeInternal(extraParams);
      lastResponse = parseResponse(rw.getBody(), rw.getHeader());
      return lastResponse;
    }"
7195523,none,"        public CreateCertificateRequest build() {
            CreateCertificateRequest request = buildWithoutInvocationCallback();
            request.setInvocationCallback(invocationCallback);
            return request;
        }"
5025413,none,"  synchronized
  public
  void removeAllAppenders() {
    if(aai != null) {
      Vector appenders = new Vector();
      for (Enumeration iter = aai.getAllAppenders(); iter != null && iter.hasMoreElements();) {
          appenders.add(iter.nextElement());
      }
      aai.removeAllAppenders();
      for(Enumeration iter = appenders.elements(); iter.hasMoreElements();) {
          fireRemoveAppenderEvent((Appender) iter.nextElement());
      }
      aai = null;
    }
  }"
8565824,none,"  @Override
  protected void enqueue(final Procedure procedure, final boolean addFront) {
    if (addFront) {
      runnables.addFirst(procedure);
    } else {
      runnables.addLast(procedure);
    }
  }"
3985516,none,"    public void clearProxy()
    {
        proxy = null;
    }"
5912103,none,"        public org.apache.xmlbeans.samples.validation.todolist.ItemType insertNewItem(int i)
        {
            synchronized (monitor())
            {
                check_orphaned();
                org.apache.xmlbeans.samples.validation.todolist.ItemType target = null;
                target = (org.apache.xmlbeans.samples.validation.todolist.ItemType)get_store().insert_element_user(ITEM$0, i);
                return target;
            }
        }"
6459500,none,"    public RangeDecoderFromBuffer(int inputSizeMax, ArrayCache arrayCache) {
        // We will use the *end* of the array so if the cache gives us
        // a bigger-than-requested array, we still want to use buf.length.
        buf = arrayCache.getByteArray(inputSizeMax - INIT_SIZE, false);
        pos = buf.length;
    }"
7121075,none,"    protected void runFunctions(final CommandHandler handler) throws Exception {        
        handler.runCommandWithReturnCodeCheck(
                getStartFunctionHostCommand(),
                true, /* showStdout */
                getDeploymentStagingDirectoryPath(),
                CommandUtils.getValidReturnCodes(),
                RUN_FUNCTIONS_FAILURE
        );
    }"
5066014,none,"    public StringFormattedMessage(final Locale locale, final String messagePattern, final Object... arguments) {
        this.locale = locale;
        this.messagePattern = messagePattern;
        this.argArray = arguments;
        if (arguments != null && arguments.length > 0 && arguments[arguments.length - 1] instanceof Throwable) {
            this.throwable = (Throwable) arguments[arguments.length - 1];
        }
    }"
6847017,none,"  @Override
  protected void translateCore(final ITranslationEnvironment environment,
      final IInstruction instruction, final List<ReilInstruction> instructions) {
    final IOperandTreeNode registerOperand1 =
        instruction.getOperands().get(0).getRootNode().getChildren().get(0);
    final IOperandTreeNode registerOperand2 =
        instruction.getOperands().get(1).getRootNode().getChildren().get(0);
    final IOperandTreeNode registerOperand3 =
        instruction.getOperands().get(2).getRootNode().getChildren().get(0);
    final IOperandTreeNode registerOperand4 =
        instruction.getOperands().get(3).getRootNode().getChildren().get(0);

    final String targetRegister = (registerOperand1.getValue());
    final String sourceRegister1 = (registerOperand2.getValue());
    final String sourceRegister2 = (registerOperand3.getValue());
    final String sourceRegister3 = (registerOperand4.getValue());

    final OperandSize bt = OperandSize.BYTE;
    final OperandSize dw = OperandSize.DWORD;
    final OperandSize wd = OperandSize.WORD;

    long baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    final String operand2 = environment.getNextVariableString();
    final String tmpRotate1 = environment.getNextVariableString();
    final String tmpRotate2 = environment.getNextVariableString();
    final String diffOfProducts = environment.getNextVariableString();
    final String operand2from15to0 = environment.getNextVariableString();
    final String operand2from31to16 = environment.getNextVariableString();
    final String registerRmfrom15to0 = environment.getNextVariableString();
    final String registerRmfrom31to16 = environment.getNextVariableString();
    final String tmpVar1 = environment.getNextVariableString();
    final String tmpVar2 = environment.getNextVariableString();
    final String tmpVar3 = environment.getNextVariableString();
    final String trueDiffOfProducts = environment.getNextVariableString();
    final String product1 = environment.getNextVariableString();
    final String product2 = environment.getNextVariableString();

    if (instruction.getMnemonic().contains(""X"")) {
      instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister2, bt,
          String.valueOf(-16), dw, tmpRotate1));
      instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister2, bt,
          String.valueOf(16), dw, tmpRotate2));
      instructions.add(ReilHelpers.createOr(baseOffset++, dw, tmpRotate1, dw, tmpRotate2, dw,
          operand2));
      instructions.add(ReilHelpers.createAnd(baseOffset++, dw, operand2, dw,
          String.valueOf(0xFFFFFFFFL), dw, operand2));
    } else {
      instructions.add(ReilHelpers.createStr(baseOffset++, dw, sourceRegister2, dw, operand2));
    }

    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, operand2, dw, String.valueOf(0xFFFFL),
        dw, operand2from15to0));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, sourceRegister1, dw,
        String.valueOf(0xFFFFL), dw, registerRmfrom15to0));

    Helpers.signedMul(baseOffset, environment, instruction, instructions, wd, operand2from15to0,
        wd, registerRmfrom15to0, dw, product1);
    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    instructions.add(ReilHelpers.createBsh(baseOffset++, dw, operand2, dw, String.valueOf(-16L),
        dw, tmpVar1));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar1, dw, String.valueOf(0xFFFFL),
        dw, operand2from31to16));
    instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister1, dw,
        String.valueOf(-16L), dw, tmpVar2));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar2, dw, String.valueOf(0xFFFFL),
        dw, registerRmfrom31to16));
    Helpers.signedMul(baseOffset, environment, instruction, instructions, wd, operand2from31to16,
        wd, registerRmfrom31to16, dw, product2);
    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    Helpers.signedSub(baseOffset, environment, instruction, instructions, product2, product1,
        diffOfProducts, trueDiffOfProducts);
    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    instructions.add(ReilHelpers.createAdd(baseOffset++, dw, sourceRegister3, dw, diffOfProducts,
        dw, tmpVar3));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar3, dw,
        String.valueOf(0xFFFFFFFFL), dw, targetRegister));

    Helpers.overflowCondition(baseOffset, environment, instruction, instructions, tmpVar3);
  }"
8029682,none,"	private boolean deriveTypeHierarchyFromOverridden(ParserRule rule, Grammar grammar) throws TransformationException {
		AbstractRule parentRule = GrammarUtil.findRuleForName(grammar, rule.getName());
		if (parentRule != null) {
			if (parentRule != rule && parentRule instanceof ParserRule) {
				ParserRule casted = (ParserRule) parentRule;
				if (casted.isFragment() != rule.isFragment()) {
					if (rule.isFragment()) {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""A fragment rule cannot override a production rule."", rule);
					} else {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""Only fragment rule can override other fragment rules."", rule);
					}
				}
				if (casted.isWildcard() != rule.isWildcard()) {
					if (rule.isWildcard()) {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""A wildcard fragment rule cannot override a typed fragment rule."", rule);
					} else {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""Only wildcard fragment rules can override other wildcard fragments."", rule);
					}
				}
				if (rule.isFragment() && !rule.isWildcard() && parentRule.getType() != null) {
					if (rule.getType().getClassifier() != parentRule.getType().getClassifier()) {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""Overriding fragment rules cannot redeclare their type."", rule.getType());
					}
				}
				checkParameterLists(rule, casted);
			}
			if (parentRule.getType() != null && parentRule != rule) {			
				if (parentRule.getType().getClassifier() instanceof EDataType)
					throw new TransformationException(TransformationErrorCode.InvalidSupertype,
							""Cannot inherit from datatype rule and return another type."", rule.getType());
				EClassifierInfo parentTypeInfo = eClassifierInfos.getInfoOrNull(parentRule.getType());
				if (parentTypeInfo == null)
					throw new TransformationException(TransformationErrorCode.InvalidSupertype,
							""Cannot determine return type of overridden rule."", rule.getType());
				addSuperType(rule, rule.getType(), parentTypeInfo);
				return true;
			}
		}
		return false;
	}"
9215037,none,"    public ProfileBranchNode(ResolvedJavaMethod method, int freqLog, int probabilityLog, int bci, int targetBci) {
        super(TYPE, method, freqLog, probabilityLog);
        assert targetBci <= bci;
        this.branchCondition = null;
        this.bci = bci;
        this.targetBci = targetBci;
    }"
7095948,none,"    @Deprecated
    protected void handleComputeFields(int julianDay) {
        int year, month, dayOfMonth, dayOfYear;

        long daysSinceEpoch = julianDay - PERSIAN_EPOCH;
        year = 1 + (int) floorDivide(33 * daysSinceEpoch + 3, 12053);

        long farvardin1 = 365L * (year - 1L) + floorDivide(8L * year + 21, 33L);
        dayOfYear = (int)(daysSinceEpoch - farvardin1); // 0-based
        if (dayOfYear < 216) { // Compute 0-based month
            month = dayOfYear / 31;
        } else {
            month = (dayOfYear - 6) / 30;
        }
        dayOfMonth = dayOfYear - MONTH_COUNT[month][2] + 1;
        ++dayOfYear; // Make it 1-based now
        
        internalSet(ERA, 0);
        internalSet(YEAR, year);
        internalSet(EXTENDED_YEAR, year);
        internalSet(MONTH, month);
        internalSet(DAY_OF_MONTH, dayOfMonth);
        internalSet(DAY_OF_YEAR, dayOfYear);       
    }    "
7810086,none,"  @Override
  protected void setLastModifiedAndAccessedTimes(final long lastModified, final long lastAccessed) {
    _setLastModified(lastModified);
    if (!DISABLE_ACCESS_TIME_UPDATE_ON_PUT) {
      setLastAccessed(lastAccessed);
    }
  }"
4634991,none,"    private void finishIndyCall(Handle bsmHandle, String methodName, String sig, int numberOfArguments, Object... bsmArgs) {
        CompileStack compileStack = controller.getCompileStack();
        OperandStack operandStack = controller.getOperandStack();

        controller.getMethodVisitor().visitInvokeDynamicInsn(methodName, sig, bsmHandle, bsmArgs);

        operandStack.replace(ClassHelper.OBJECT_TYPE, numberOfArguments);
        compileStack.popLHS();
    }"
8030414,none,"        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_1 = input.LA(1);

                         
                        int index102_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalDomainmodel()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }"
8070913,none,"	@Override
	/** {@inheritDoc} */
	public void findReferences(final ReferenceFinder referenceFinder, final List<Hit> foundIdentifiers) {
		if (parsedParameters != null) {
			parsedParameters.findReferences(referenceFinder, foundIdentifiers);
		}
	}"
3922349,none,"    public List<PropertyType> fromProps(Map<String, Object> m) {
        List<PropertyType> props = new ArrayList<PropertyType>();
        for (Map.Entry<String, Object> entry : m.entrySet()) {
            String key = entry.getKey();
            Object val = entry.getValue();

            PropertyType propEl = new PropertyType();
            propEl.setName(key);
            ObjectFactory factory = new ObjectFactory();
            if (val.getClass().isArray()) {
                ArrayType arrayEl = new ArrayType();
                propEl.getContent().add(factory.createArray(arrayEl));
                for (Object o : normalizeArray(val)) {
                    setValueType(propEl, o);
                    ValueType valueType =  new ValueType();
                    valueType.getContent().add(o.toString());
                    arrayEl.getValue().add(valueType);
                }
            } else if (val instanceof List) {
                ArrayType listEl = new ArrayType();
                propEl.getContent().add(factory.createList(listEl));
                handleCollectionValue((Collection<?>) val, propEl, listEl);
            } else if (val instanceof Set) {
                ArrayType setEl = new ArrayType();
                propEl.getContent().add(factory.createSet(setEl));
                handleCollectionValue((Collection<?>) val, propEl, setEl);
            } else if (val instanceof String
                    || val instanceof Character
                    || val instanceof Boolean
                    || val instanceof Byte) {
                setValueType(propEl, val);
                propEl.setValue(val.toString());
            } else if (val instanceof Long
                    || val instanceof Double
                    || val instanceof Float
                    || val instanceof Integer
                    || val instanceof Short) {
                // various numbers..   maybe ""val instanceof Number""?
                setValueType(propEl, val);
                propEl.setValue(val.toString());
            } else {
                // Don't add this property as the value type is not supported
                continue;
            }
            props.add(propEl);
        }
        return props;
    }"
9506706,none,"  private void initReleases() {
    if (this.release != null) {
      return;
    }
    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;
    List<ContainerIdProto> list = p.getReleaseList();
    this.release = new ArrayList<ContainerId>();

    for (ContainerIdProto c : list) {
      this.release.add(convertFromProtoFormat(c));
    }
  }"
5294252,none,"    protected Builder(InputFile file) {
      this.readSupport = null;
      this.file = checkNotNull(file, ""file"");
      this.path = null;
      if (file instanceof HadoopInputFile) {
        this.conf = ((HadoopInputFile) file).getConfiguration();
      } else {
        this.conf = new Configuration();
      }
      optionsBuilder = HadoopReadOptions.builder(conf);
    }"
5339121,none,"    private String getOwnerPartition(final File swapFile) {
        final String filename = swapFile.getName();
        final int indexOfDot = filename.indexOf(""."");
        if (indexOfDot < 1) {
            return null;
        }

        final int lastIndexOfDot = filename.lastIndexOf(""."");
        if (lastIndexOfDot == indexOfDot) {
            return null;
        }

        return filename.substring(indexOfDot + 1, lastIndexOfDot);
    }"
9375078,none,"        private PublishingBodySubscriber() {
            completionCF = new MinimalFuture<>();
            completionCF.whenComplete(
                    (r,t) -> subscribedCF.thenAccept( s -> complete(s, t)));
        }"
9344142,none,"        public void stateChanged(ChangeEvent e) {
            if (!isDragging) {
                calculateThumbLocation();
                slider.repaint();
            }
            lastValue = slider.getValue();
        }"
9481601,none,"  @Override
  public GetCompInstancesResponseProto getCompInstances(
      GetCompInstancesRequestProto request) throws IOException, YarnException {
    try {
      return proxy.getCompInstances(null, request);
    } catch (ServiceException e) {
      RPCUtil.unwrapAndThrowException(e);
    }
    return null;
  }"
5510584,none,"	@Override
	public List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) throws Exception {
		if(LOG.isDebugEnabled()) {
			LOG.debug(""==> ServiceDBStore.getServicePolicies("" + serviceId + "")"");
		}

		XXService service = daoMgr.getXXService().getById(serviceId);

		if (service == null) {
			throw new Exception(""service does not exist - id='"" + serviceId);
		}

		List<RangerPolicy> ret = getServicePolicies(service, filter);

		if(LOG.isDebugEnabled()) {
			LOG.debug(""<== ServiceDBStore.getServicePolicies("" + serviceId + "") : policy-count="" + (ret == null ? 0 : ret.size()));
		}
		return ret;

	}"
6840071,none,"	protected void sequence_JSXSpreadAttribute(ISerializationContext context, JSXSpreadAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}"
4043468,none,"    public UnionAllOperatorDescriptor(IOperatorDescriptorRegistry spec, int nInputs,
            RecordDescriptor recordDescriptor) {
        super(spec, nInputs, 1);
        outRecDescs[0] = recordDescriptor;
    }"
7850192,none,"  long recoverDrf(OplogEntryIdSet deletedIds, boolean alreadyRecoveredOnce, boolean latestOplog) {
    File drfFile = this.drf.f;
    if (drfFile == null) {
      this.haveRecoveredDrf = true;
      return 0L;
    }
    lockCompactor();
    try {
      if (this.haveRecoveredDrf && !getHasDeletes())
        return 0L; // do this while holding lock
      if (!this.haveRecoveredDrf) {
        this.haveRecoveredDrf = true;
      }
      logger.info(""Recovering {} {} for disk store {}."",
          new Object[] {toString(), drfFile.getAbsolutePath(), getParent().getName()});
      this.recoverDelEntryId = DiskStoreImpl.INVALID_ID;
      boolean readLastRecord = true;
      CountingDataInputStream dis = null;
      try {
        int recordCount = 0;
        boolean foundDiskStoreRecord = false;
        FileInputStream fis = null;
        try {
          fis = new FileInputStream(drfFile);
          dis = new CountingDataInputStream(new BufferedInputStream(fis, 32 * 1024),
              drfFile.length());
          boolean endOfLog = false;
          while (!endOfLog) {
            if (dis.atEndOfFile()) {
              endOfLog = true;
              break;
            }
            readLastRecord = false;
            byte opCode = dis.readByte();
            if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, ""drf byte={} location={}"", opCode,
                  Long.toHexString(dis.getCount()));
            }
            switch (opCode) {
              case OPLOG_EOF_ID:
                // we are at the end of the oplog. So we need to back up one byte
                dis.decrementCount();
                endOfLog = true;
                break;
              case OPLOG_DEL_ENTRY_1ID:
              case OPLOG_DEL_ENTRY_2ID:
              case OPLOG_DEL_ENTRY_3ID:
              case OPLOG_DEL_ENTRY_4ID:
              case OPLOG_DEL_ENTRY_5ID:
              case OPLOG_DEL_ENTRY_6ID:
              case OPLOG_DEL_ENTRY_7ID:
              case OPLOG_DEL_ENTRY_8ID:
                readDelEntry(dis, opCode, deletedIds, parent);
                recordCount++;
                break;
              case OPLOG_DISK_STORE_ID:
                readDiskStoreRecord(dis, this.drf.f);
                foundDiskStoreRecord = true;
                recordCount++;
                break;
              case OPLOG_MAGIC_SEQ_ID:
                readOplogMagicSeqRecord(dis, this.drf.f, OPLOG_TYPE.DRF);
                break;
              case OPLOG_GEMFIRE_VERSION:
                readGemfireVersionRecord(dis, this.drf.f);
                recordCount++;
                break;

              case OPLOG_RVV:
                long idx = dis.getCount();
                readRVVRecord(dis, this.drf.f, true, latestOplog);
                recordCount++;
                break;

              default:
                throw new DiskAccessException(
                    String.format(""Unknown opCode %s found in disk operation log."",
                        opCode),
                    getParent());
            }
            readLastRecord = true;
            // @todo
            // if (rgn.isDestroyed()) {
            // break;
            // }
          } // while
        } finally {
          if (dis != null) {
            dis.close();
          }
          if (fis != null) {
            fis.close();
          }
        }
        if (!foundDiskStoreRecord && recordCount > 0) {
          throw new DiskAccessException(
              ""The oplog file \"""" + this.drf.f + ""\"" does not belong to the init file \""""
                  + getParent().getInitFile() + ""\"". Drf did not contain a disk store id."",
              getParent());
        }
      } catch (EOFException ignore) {
        // ignore since a partial record write can be caused by a crash
      } catch (IOException ex) {
        getParent().getCancelCriterion().checkCancelInProgress(ex);
        throw new DiskAccessException(
            String.format(""Failed to read file during recovery from %s"",
                drfFile.getPath()),
            ex, getParent());
      } catch (CancelException e) {
        if (logger.isDebugEnabled()) {
          logger.debug(""Oplog::readOplog:Error in recovery as Cache was closed"", e);
        }
      } catch (RegionDestroyedException e) {
        if (logger.isDebugEnabled()) {
          logger.debug(""Oplog::readOplog:Error in recovery as Region was destroyed"", e);
        }
      }
      // Add the Oplog size to the Directory Holder which owns this oplog,
      // so that available space is correctly calculated & stats updated.
      long byteCount = 0;
      if (!readLastRecord) {
        // this means that there was a crash
        // and hence we should not continue to read
        // the next oplog
        this.crashed = true;
        if (dis != null) {
          byteCount = dis.getFileLength();
        }
      } else {
        if (dis != null) {
          byteCount = dis.getCount();
        }
      }
      if (!alreadyRecoveredOnce) {
        setRecoveredDrfSize(byteCount);
        this.dirHolder.incrementTotalOplogSize(byteCount);
      }
      return byteCount;
    } finally {
      unlockCompactor();
    }
  }"
5978414,none,"    private void refreshSecurityGroups() {
        new RefreshSecurityGroupsThread().start();
    }"
5141751,none,"    private void generateReport( Locale locale, LinkcheckModel linkcheckModel )
    {
        LinkcheckReportGenerator reportGenerator = new LinkcheckReportGenerator( i18n );

        reportGenerator.setExcludedHttpStatusErrors( excludedHttpStatusErrors );
        reportGenerator.setExcludedHttpStatusWarnings( excludedHttpStatusWarnings );
        reportGenerator.setExcludedLinks( excludedLinks );
        reportGenerator.setExcludedPages( excludedPages );
        reportGenerator.setHttpFollowRedirect( httpFollowRedirect );
        reportGenerator.setHttpMethod( httpMethod );
        reportGenerator.setOffline( offline );

        reportGenerator.generateReport( locale, linkcheckModel, getSink() );
        closeReport();

        // Copy the images
        copyStaticResources();
    }"
7094545,none,"    @Override
    public ByteBuffer put(byte x) {
        if (isReadOnly) {
            throw new ReadOnlyBufferException();
        }
        hb[ix(nextPutIndex())] = x;
        return this;
    }"
7907397,none,"  @Override
  public Optional<JavacOptionsProvider> createToolchain(
      ToolchainProvider toolchainProvider, ToolchainCreationContext context) {
    JavaBuckConfig javaConfig = context.getBuckConfig().getView(JavaBuckConfig.class);
    JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();

    return Optional.of(JavacOptionsProvider.of(defaultJavacOptions));
  }"
8044671,none,"	protected String getArrayComponentTypeSimpleName(String typeName) {
		int idx = typeName.indexOf('[');
		if (idx != -1) {
			return getSimpleName(typeName.substring(0, idx));
		}
		return null;
	}"
5950858,none,"        public void addRekognizedOutput(final RekognizedOutput rekognizedOutput) {
            this.rekognizedOutputs.add(rekognizedOutput);
        }"
5110869,none,"  @Override
  public void viewConfiguration(IThreadContext threadContext, IHTTPOutput out, Locale locale, ConfigParams parameters)
    throws ManifoldCFException, IOException
  {
    Map<String,Object> velocityContext = new HashMap<String,Object>();
    fillInDomainControllerTab(velocityContext,out,parameters);
    fillInCacheTab(velocityContext,out,parameters);
    Messages.outputResourceWithVelocity(out,locale,""viewADConfiguration.html"",velocityContext);
  }"
7987571,none,"    public final EObject ruleXOtherOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XAdditiveExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;



        	enterRule();

        try {
            // InternalXbase.g:873:2: ( (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* ) )
            // InternalXbase.g:874:2: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )
            {
            // InternalXbase.g:874:2: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )
            // InternalXbase.g:875:3: this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_14);
            this_XAdditiveExpression_0=ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_XAdditiveExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalXbase.g:883:3: ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // InternalXbase.g:884:4: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )
            	    {
            	    // InternalXbase.g:884:4: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) )
            	    // InternalXbase.g:885:5: ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) )
            	    {
            	    // InternalXbase.g:895:5: ( () ( ( ruleOpOther ) ) )
            	    // InternalXbase.g:896:6: () ( ( ruleOpOther ) )
            	    {
            	    // InternalXbase.g:896:6: ()
            	    // InternalXbase.g:897:7: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }

            	    // InternalXbase.g:903:6: ( ( ruleOpOther ) )
            	    // InternalXbase.g:904:7: ( ruleOpOther )
            	    {
            	    // InternalXbase.g:904:7: ( ruleOpOther )
            	    // InternalXbase.g:905:8: ruleOpOther
            	    {
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());
            	      								}
            	      							
            	    }
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_4);
            	    ruleOpOther();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // InternalXbase.g:921:4: ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )
            	    // InternalXbase.g:922:5: (lv_rightOperand_3_0= ruleXAdditiveExpression )
            	    {
            	    // InternalXbase.g:922:5: (lv_rightOperand_3_0= ruleXAdditiveExpression )
            	    // InternalXbase.g:923:6: lv_rightOperand_3_0= ruleXAdditiveExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_14);
            	    lv_rightOperand_3_0=ruleXAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							""rightOperand"",
            	      							lv_rightOperand_3_0,
            	      							""org.eclipse.xtext.xbase.Xbase.XAdditiveExpression"");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
4687004,none,"  @Override
  public void close() throws IOException {
    IOUtils.cleanup(null, src);
    factory.close();
  }"
8430551,none,"    public RouteDefinition from(String uri) {
        getRouteCollection().setCamelContext(getContext());
        RouteDefinition answer = getRouteCollection().from(uri);
        configureRoute(answer);
        return answer;
    }"
3924473,none,"    public hasNamespacePermission_args setTblNspcPerm(byte tblNspcPerm) {
      this.tblNspcPerm = tblNspcPerm;
      setTblNspcPermIsSet(true);
      return this;
    }"
7378490,none,"	protected Server createJettyServer(JettyHttpHandlerAdapter servlet) {
		int port = (getPort() >= 0) ? getPort() : 0;
		InetSocketAddress address = new InetSocketAddress(getAddress(), port);
		Server server = new Server(getThreadPool());
		server.addConnector(createConnector(address, server));
		ServletHolder servletHolder = new ServletHolder(servlet);
		servletHolder.setAsyncSupported(true);
		ServletContextHandler contextHandler = new ServletContextHandler(server, """",
				false, false);
		contextHandler.addServlet(servletHolder, ""/"");
		server.setHandler(addHandlerWrappers(contextHandler));
		JettyReactiveWebServerFactory.logger
				.info(""Server initialized with port: "" + port);
		if (getSsl() != null && getSsl().isEnabled()) {
			customizeSsl(server, address);
		}
		for (JettyServerCustomizer customizer : getServerCustomizers()) {
			customizer.customize(server);
		}
		if (this.useForwardHeaders) {
			new ForwardHeadersCustomizer().customize(server);
		}
		return server;
	}"
7201768,none,"    @Override
    public java.util.concurrent.Future<GenerateAutonomousDatabaseWalletResponse>
            generateAutonomousDatabaseWallet(
                    final GenerateAutonomousDatabaseWalletRequest request,
                    final com.oracle.bmc.responses.AsyncHandler<
                                    GenerateAutonomousDatabaseWalletRequest,
                                    GenerateAutonomousDatabaseWalletResponse>
                            handler) {
        LOG.trace(""Called async generateAutonomousDatabaseWallet"");
        final GenerateAutonomousDatabaseWalletRequest interceptedRequest =
                GenerateAutonomousDatabaseWalletConverter.interceptRequest(request);
        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =
                GenerateAutonomousDatabaseWalletConverter.fromRequest(client, interceptedRequest);
        final com.google.common.base.Function<
                        javax.ws.rs.core.Response, GenerateAutonomousDatabaseWalletResponse>
                transformer = GenerateAutonomousDatabaseWalletConverter.fromResponse();

        com.oracle.bmc.responses.AsyncHandler<
                        GenerateAutonomousDatabaseWalletRequest,
                        GenerateAutonomousDatabaseWalletResponse>
                handlerToUse = handler;
        if (handler != null
                && this.authenticationDetailsProvider
                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            handlerToUse =
                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<
                            GenerateAutonomousDatabaseWalletRequest,
                            GenerateAutonomousDatabaseWalletResponse>(
                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                                    this.authenticationDetailsProvider,
                            handler) {
                        @Override
                        public void retryCall() {
                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>
                                    onSuccess =
                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                                    this, transformer, interceptedRequest);
                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                            this, interceptedRequest);
                            client.post(
                                    ib,
                                    interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    };
        }

        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                handlerToUse, transformer, interceptedRequest);
        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                handlerToUse, interceptedRequest);

        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =
                client.post(
                        ib,
                        interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),
                        interceptedRequest,
                        onSuccess,
                        onError);

        if (this.authenticationDetailsProvider
                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<
                    javax.ws.rs.core.Response, GenerateAutonomousDatabaseWalletResponse>(
                    responseFuture,
                    transformer,
                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                            this.authenticationDetailsProvider,
                    new com.google.common.base.Supplier<
                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {
                        @Override
                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {
                            return client.post(
                                    ib,
                                    interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    });
        } else {
            return new com.oracle.bmc.util.internal.TransformingFuture<>(
                    responseFuture, transformer);
        }
    }"
7745170,none,"    protected void checkDuringManage() {
        if (!inManage.get() || app == null) {
            throw new IllegalStateException(""Operation only permitted during manage, e.g. called from doBuild() of ""+this);
        }
    }"
7358328,none,"    public void test20() {
        final SparseTreeAdditionalData additionalData = new SparseTreeAdditionalData();
        final SparseTree<String> st = new SparseTree<String>('/', String.CASE_INSENSITIVE_ORDER);

        st.add(""$"", ""Root""); //$NON-NLS-1$ //$NON-NLS-2$
        st.add(""$/A"", ""A""); //$NON-NLS-1$ //$NON-NLS-2$
        st.add(""$/A/Z"", ""AZ""); //$NON-NLS-1$ //$NON-NLS-2$

        final List<String> results = new ArrayList<String>();
        st.EnumParents(""$/A/B/C/D/E"", new NoChildrenBelowCallback(), EnumParentsOptions.NONE, additionalData, results); //$NON-NLS-1$

        final List<String> expectedResults = new ArrayList<String>();
        expectedResults.add(""$/A/B""); //$NON-NLS-1$
        expectedResults.add(null);

        Assert.assertTrue(areStringListsEqual(expectedResults, results, String.CASE_INSENSITIVE_ORDER));
    }"
9143369,none,"	public IBaseDataSetEventHandler getEventHandler( )
	{
		return this.source.getEventHandler( );
	}"
6240859,none,"    private boolean labelNextToPort(final LPort dummyPort, final boolean placeNextToPortIfPossible) {
        return placeNextToPortIfPossible
                && dummyPort.getIncomingEdges().isEmpty()
                && dummyPort.getOutgoingEdges().isEmpty();
    }"
6024615,none,"    @Override
    public CachingBuildActionExecuter<T> addProgressListener(org.gradle.tooling.events.ProgressListener listener, OperationType... operationTypes) {
        this.cacheKey.markInvalid();
        this.delegate.addProgressListener(listener, operationTypes);
        return this;
    }"
8145522,none,"  public boolean needsTychoBuild() {
    return (this.needsMavenBuild() && this.runtimeProject.isEclipsePluginProject());
  }"
7070559,none,"
  @Override
  public Future<RecordMetadata> send(ProducerRecord<K, V> producerRecord) {
    return send(producerRecord, null);"
5233290,none,"	private List getCurrentBindings() throws NamingException {
		List names;
		try {
			Registry registry = getRegistry();
			names = Arrays.asList(registry.list());
		} catch (RemoteException ex) {
			names = Collections.EMPTY_LIST;
		}
		return names;
	}"
6519318,none,"  private Generator getGenerator(String serviceKey) {
    List<Generator> generators = this.registeredGeneratorsRepository.findByGeneratorKey(serviceKey);
    if (!generators.isEmpty()) {
      return generators.get(0);
    } else {
      return null;
    }
  }"
4453471,none,"  public Wrapper get(Fragment node) {
    Wrapper wrapper = fragmentMap.get(node);
    if (wrapper == null) {

      int majorFragmentId = 0;

      // If there is a sending exchange, we need to number other than zero.
      if (node.getSendingExchange() != null) {

        // assign the upper 16 bits as the major fragment id.
        majorFragmentId = node.getSendingExchange().getChild().getOperatorId() >> 16;

        // if they are not assigned, that means we mostly likely have an externally generated plan.  in this case, come up with a major fragmentid.
        if (majorFragmentId == 0) {
          majorFragmentId = majorFragmentIdIndex;
        }
      }
      wrapper = new Wrapper(node, majorFragmentId);
      fragmentMap.put(node, wrapper);
      majorFragmentIdIndex++;
    }
    return wrapper;
  }"
3808598,none,"      @Override
      public void run() {
         try {
            callOnMessage();
         } catch (Exception e) {
            ActiveMQClientLogger.LOGGER.onMessageError(e);

            lastException = e;
         }
      }"
4932611,none,"    public WikiPage setRealPage( WikiPage page )
    {
        WikiPage old = m_realPage;
        m_realPage = page;
        updateCommand( m_command.getRequestContext() );
        return old;
    }"
6694346,none,"    public APIRequestGetCallToActions requestAndroidDeeplinkField () {
      return this.requestAndroidDeeplinkField(true);
    }"
5782292,none,"  public static void verifyReply(String base64Hash, String msg, SecretKey key) throws IOException {
    byte[] hash = Base64.decodeBase64(base64Hash.getBytes(Charsets.UTF_8));
    boolean res = verifyHash(hash, msg.getBytes(Charsets.UTF_8), key);

    if(res != true) {
      throw new IOException(""Verification of the hashReply failed"");
    }
  }"
7231644,none,"  @Implementation(minSdk = LOLLIPOP)
  @HiddenApi
  protected static void nativeGetPointerCoords(
      long nativePtr, int pointerIndex, int historyPos, PointerCoords outPointerCoordsObj) {
    NativeInput.MotionEvent event = getNativeMotionEvent(nativePtr);
    int pointerCount = event.getPointerCount();
    validatePointerIndex(pointerIndex, pointerCount);
    validatePointerCoords(outPointerCoordsObj);

    NativeInput.PointerCoords rawPointerCoords;
    if (historyPos == HISTORY_CURRENT) {
      rawPointerCoords = event.getRawPointerCoords(pointerIndex);
    } else {
      int historySize = event.getHistorySize();
      validateHistoryPos(historyPos, historySize);
      rawPointerCoords = event.getHistoricalRawPointerCoords(pointerIndex, historyPos);
    }
    pointerCoordsFromNative(
        rawPointerCoords, event.getXOffset(), event.getYOffset(), outPointerCoordsObj);
  }"
3893413,none,"    protected static void initialize()
    {
      STRAM.setChildren(Sets.newHashSet(APPLICATION, TEMPLATE));
      APPLICATION.setChildren(Sets.newHashSet(GATEWAY, OPERATOR, STREAM));
      OPERATOR.setChildren(Sets.newHashSet(PORT));
      PORT.setChildren(Sets.newHashSet(UNIFIER));

      STRAM_ELEMENT_TO_CONF_ELEMENT.clear();

      //Initialize StramElement to ConfElement
      for (ConfElement confElement: ConfElement.values()) {
        STRAM_ELEMENT_TO_CONF_ELEMENT.put(confElement.getStramElement(), confElement);

        for (StramElement sElement: confElement.getAllRelatedElements()) {
          STRAM_ELEMENT_TO_CONF_ELEMENT.put(sElement, confElement);
        }
      }

      //Initialize attributes
      for (ConfElement confElement: ConfElement.values()) {
        if (confElement.getParent() == null) {
          continue;
        }

        setAmbiguousAttributes(confElement);
      }

      // build context to conf element map
      CONTEXT_TO_CONF_ELEMENT.clear();

      for (ConfElement confElement: ConfElement.values()) {
        CONTEXT_TO_CONF_ELEMENT.put(confElement.getContextClass(), confElement);
      }

      //Check if all the context classes are accounted for
      Set<Class<? extends Context>> confElementContextClasses = Sets.newHashSet();

      for (ConfElement confElement: ConfElement.values()) {
        if (confElement.getContextClass() == null) {
          continue;
        }

        confElementContextClasses.add(confElement.getContextClass());
      }

      if (!ContextUtils.CONTEXT_CLASSES.equals(confElementContextClasses)) {
        throw new IllegalStateException(""All the context classes "" + ContextUtils.CONTEXT_CLASSES + "" found in ""
                                        + Context.class + "" are not used by ConfElements "" + confElementContextClasses);
      }
    }"
7136727,none,"  @Override
  public Map<String, Object> getRequestContextLocalAttrs()
  {
    return Collections.unmodifiableMap(_context.getRawRequestContext().getLocalAttrs());
  }"
4745800,none,"    private void checkAccess(int index) throws ArrayIndexOutOfBoundsException {
        if (index < 0 || index >= size) {
            throw new ArrayIndexOutOfBoundsException();
        }
    }"
5585822,none,"    @Test
    public void testBug56655a() throws IOException {
        try (Workbook wb = _testDataProvider.createWorkbook()) {
            Sheet sheet = wb.createSheet();

            setCellFormula(sheet, 0, 0, ""B1*C1"");
            sheet.getRow(0).createCell(1).setCellValue(""A"");
            setCellFormula(sheet, 1, 0, ""B1*C1"");
            sheet.getRow(1).createCell(1).setCellValue(""A"");
            setCellFormula(sheet, 0, 3, ""SUMIFS(A:A,A:A,A2)"");

            wb.getCreationHelper().createFormulaEvaluator().evaluateAll();

            assertEquals(CellType.ERROR, getCell(sheet, 0, 0).getCachedFormulaResultType());
            assertEquals(FormulaError.VALUE.getCode(), getCell(sheet, 0, 0).getErrorCellValue());
            assertEquals(CellType.ERROR, getCell(sheet, 1, 0).getCachedFormulaResultType());
            assertEquals(FormulaError.VALUE.getCode(), getCell(sheet, 1, 0).getErrorCellValue());
            assertEquals(CellType.ERROR, getCell(sheet, 0, 3).getCachedFormulaResultType());
            assertEquals(FormulaError.VALUE.getCode(), getCell(sheet, 0, 3).getErrorCellValue());
        }
    }"
6569509,none,"    public final void rule__XSynchronizedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalEntities.g:13463:1: ( rule__XSynchronizedExpression__Group__1__Impl rule__XSynchronizedExpression__Group__2 )
            // InternalEntities.g:13464:2: rule__XSynchronizedExpression__Group__1__Impl rule__XSynchronizedExpression__Group__2
            {
            pushFollow(FOLLOW_66);
            rule__XSynchronizedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
9224432,none,"    public void setEditFormatter(JFormattedTextField.AbstractFormatter atf) {
        editFormat = atf;
    }"
5934742,none,"    public long getLastProcessedZxid(){
        return provider.getLastProcessedZxid();
    }"
7593524,none,"	@Nullable
	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {
		if (this.entityInterceptor instanceof Interceptor) {
			return (Interceptor) this.entityInterceptor;
		}
		else if (this.entityInterceptor instanceof String) {
			if (this.beanFactory == null) {
				throw new IllegalStateException(""Cannot get entity interceptor via bean name if no bean factory set"");
			}
			String beanName = (String) this.entityInterceptor;
			return this.beanFactory.getBean(beanName, Interceptor.class);
		}
		else {
			return null;
		}
	}"
4549169,critical,"    public void validateDepositDetailForUpdate(final JsonElement element, final FromJsonHelper fromApiJsonHelper,
            final DataValidatorBuilder baseDataValidator) {
        if (fromApiJsonHelper.parameterExists(nameParamName, element)) {
            final String name = fromApiJsonHelper.extractStringNamed(nameParamName, element);
            baseDataValidator.reset().parameter(nameParamName).value(name).notBlank().notExceedingLengthOf(100);
        }

        if (fromApiJsonHelper.parameterExists(shortNameParamName, element)) {
            final String shortName = fromApiJsonHelper.extractStringNamed(shortNameParamName, element);
            baseDataValidator.reset().parameter(shortNameParamName).value(shortName).notBlank().notExceedingLengthOf(4);
        }

        if (fromApiJsonHelper.parameterExists(descriptionParamName, element)) {
            final String description = fromApiJsonHelper.extractStringNamed(descriptionParamName, element);
            baseDataValidator.reset().parameter(descriptionParamName).value(description).notBlank().notExceedingLengthOf(500);
        }

        if (fromApiJsonHelper.parameterExists(currencyCodeParamName, element)) {
            final String currencyCode = fromApiJsonHelper.extractStringNamed(currencyCodeParamName, element);
            baseDataValidator.reset().parameter(currencyCodeParamName).value(currencyCode).notBlank();
        }

        if (fromApiJsonHelper.parameterExists(digitsAfterDecimalParamName, element)) {
            final Integer digitsAfterDecimal = fromApiJsonHelper.extractIntegerSansLocaleNamed(digitsAfterDecimalParamName, element);
            baseDataValidator.reset().parameter(digitsAfterDecimalParamName).value(digitsAfterDecimal).notNull().inMinMaxRange(0, 6);
        }

        if (fromApiJsonHelper.parameterExists(inMultiplesOfParamName, element)) {
            final Integer inMultiplesOf = fromApiJsonHelper.extractIntegerNamed(inMultiplesOfParamName, element, Locale.getDefault());
            baseDataValidator.reset().parameter(inMultiplesOfParamName).value(inMultiplesOf).ignoreIfNull().integerZeroOrGreater();
        }

        if (fromApiJsonHelper.parameterExists(nominalAnnualInterestRateParamName, element)) {
            final BigDecimal interestRate = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(nominalAnnualInterestRateParamName, element);
            baseDataValidator.reset().parameter(nominalAnnualInterestRateParamName).value(interestRate).notNull().zeroOrPositiveAmount();
        }

        if (fromApiJsonHelper.parameterExists(interestCompoundingPeriodTypeParamName, element)) {
            final Integer interestCompoundingPeriodType = fromApiJsonHelper.extractIntegerSansLocaleNamed(
                    interestCompoundingPeriodTypeParamName, element);
            baseDataValidator.reset().parameter(interestCompoundingPeriodTypeParamName).value(interestCompoundingPeriodType).notNull()
                    .isOneOfTheseValues(SavingsCompoundingInterestPeriodType.integerValues());
        }

        if (fromApiJsonHelper.parameterExists(interestCalculationTypeParamName, element)) {
            final Integer interestCalculationType = fromApiJsonHelper.extractIntegerSansLocaleNamed(interestCalculationTypeParamName,
                    element);
            baseDataValidator.reset().parameter(interestCalculationTypeParamName).value(interestCalculationType).notNull()
                    .inMinMaxRange(1, 2);
        }

        if (fromApiJsonHelper.parameterExists(interestCalculationDaysInYearTypeParamName, element)) {
            final Integer interestCalculationDaysInYearType = fromApiJsonHelper.extractIntegerSansLocaleNamed(
                    interestCalculationDaysInYearTypeParamName, element);
            baseDataValidator.reset().parameter(interestCalculationDaysInYearTypeParamName).value(interestCalculationDaysInYearType)
                    .notNull().isOneOfTheseValues(360, 365);
        }

        if (fromApiJsonHelper.parameterExists(minRequiredOpeningBalanceParamName, element)) {
            final BigDecimal minOpeningBalance = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(minRequiredOpeningBalanceParamName,
                    element);
            baseDataValidator.reset().parameter(minRequiredOpeningBalanceParamName).value(minOpeningBalance).ignoreIfNull()
                    .zeroOrPositiveAmount();
        }

        if (fromApiJsonHelper.parameterExists(lockinPeriodFrequencyParamName, element)) {
            final Integer lockinPeriodFrequency = fromApiJsonHelper.extractIntegerWithLocaleNamed(lockinPeriodFrequencyParamName, element);
            baseDataValidator.reset().parameter(lockinPeriodFrequencyParamName).value(lockinPeriodFrequency).ignoreIfNull()
                    .integerZeroOrGreater();
        }

        if (fromApiJsonHelper.parameterExists(lockinPeriodFrequencyTypeParamName, element)) {
            final Integer lockinPeriodFrequencyType = fromApiJsonHelper.extractIntegerSansLocaleNamed(lockinPeriodFrequencyTypeParamName,
                    element);
            baseDataValidator.reset().parameter(lockinPeriodFrequencyTypeParamName).value(lockinPeriodFrequencyType).inMinMaxRange(0, 3);
        }

        if (fromApiJsonHelper.parameterExists(withdrawalFeeForTransfersParamName, element)) {
            final Boolean isWithdrawalFeeApplicableForTransfers = fromApiJsonHelper.extractBooleanNamed(withdrawalFeeForTransfersParamName,
                    element);
            baseDataValidator.reset().parameter(withdrawalFeeForTransfersParamName).value(isWithdrawalFeeApplicableForTransfers)
                    .ignoreIfNull().validateForBooleanValue();
        }

        if (fromApiJsonHelper.parameterExists(feeAmountParamName, element)) {
            final BigDecimal annualFeeAmount = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(feeAmountParamName, element);
            baseDataValidator.reset().parameter(feeAmountParamName).value(annualFeeAmount).ignoreIfNull().zeroOrPositiveAmount();
        }

        if (fromApiJsonHelper.parameterExists(feeOnMonthDayParamName, element)) {
            final MonthDay monthDayOfAnnualFee = fromApiJsonHelper.extractMonthDayNamed(feeOnMonthDayParamName, element);
            baseDataValidator.reset().parameter(feeOnMonthDayParamName).value(monthDayOfAnnualFee).ignoreIfNull();
        }

        if (this.fromApiJsonHelper.parameterExists(minBalanceForInterestCalculationParamName, element)) {
            final BigDecimal minBalanceForInterestCalculation = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed(
                    minBalanceForInterestCalculationParamName, element);
            baseDataValidator.reset().parameter(minBalanceForInterestCalculationParamName).value(minBalanceForInterestCalculation)
                    .ignoreIfNull().zeroOrPositiveAmount();
        }

        final Long savingsControlAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue()).value(savingsControlAccountId)
                .ignoreIfNull().integerGreaterThanZero();

        final Long savingsReferenceAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue())
                .value(savingsReferenceAccountId).ignoreIfNull().integerGreaterThanZero();

        final Long transfersInSuspenseAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue())
                .value(transfersInSuspenseAccountId).ignoreIfNull().integerGreaterThanZero();

        final Long interestOnSavingsAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue())
                .value(interestOnSavingsAccountId).ignoreIfNull().integerGreaterThanZero();

        final Long incomeFromFeeId = fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),
                element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue()).value(incomeFromFeeId)
                .ignoreIfNull().integerGreaterThanZero();

        final Long incomeFromPenaltyId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue()).value(incomeFromPenaltyId)
                .ignoreIfNull().integerGreaterThanZero();

        validatePaymentChannelFundSourceMappings(fromApiJsonHelper, baseDataValidator, element);
        validateChargeToIncomeAccountMappings(fromApiJsonHelper, baseDataValidator, element);
        validateTaxWithHoldingParams(baseDataValidator, element, false);
    }"
